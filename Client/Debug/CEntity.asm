; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\CEntity.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ	; CEntity::GetEntity
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\game\centity.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ PROC		; CEntity::GetEntity, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	return m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 25   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ENDP		; CEntity::GetEntity
_TEXT	ENDS
PUBLIC	?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z	; CEntity::SetEntity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pEntity$ = 8						; size = 4
?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z PROC	; CEntity::SetEntity, COMDAT
; _this$ = ecx

; 30   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 	m_pEntity = pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pEntity$[ebp]
	mov	DWORD PTR [eax], ecx

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z ENDP	; CEntity::SetEntity
_TEXT	ENDS
PUBLIC	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z	; CEntity::GetMatrix
EXTRN	_memcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_matMatrix$ = 8						; size = 4
?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z PROC		; CEntity::GetMatrix, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@GetMatrix

; 39   : 	{
; 40   : 		memcpy(matMatrix, &m_pEntity->placeable.matMatrix, sizeof(MATRIX4X4));

	push	64					; 00000040H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _matMatrix$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@GetMatrix:

; 41   : 	}
; 42   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ENDP		; CEntity::GetMatrix
_TEXT	ENDS
PUBLIC	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z		; CEntity::SetMatrix
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_matMatrix$ = 8						; size = 64
?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z PROC		; CEntity::SetMatrix, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetMatrix

; 49   : 	{
; 50   : 		memcpy(&m_pEntity->placeable.matMatrix, &matMatrix, sizeof(MATRIX4X4));

	push	64					; 00000040H
	lea	eax, DWORD PTR _matMatrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@SetMatrix:

; 51   : 	}
; 52   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	64					; 00000040H
?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z ENDP		; CEntity::SetMatrix
_TEXT	ENDS
PUBLIC	?GetPosition@CEntity@@QAEXPAUVector3@@@Z	; CEntity::GetPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetPosition@CEntity@@QAEXPAUVector3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vecPosition$ = 8					; size = 4
?GetPosition@CEntity@@QAEXPAUVector3@@@Z PROC		; CEntity::GetPosition, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 58   : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@GetPositio

; 59   : 	{
; 60   : 		memcpy(vecPosition, &m_pEntity->placeable.matMatrix.vPos, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 52					; 00000034H
	push	ecx
	mov	edx, DWORD PTR _vecPosition$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@GetPositio:

; 61   : 	}
; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPosition@CEntity@@QAEXPAUVector3@@@Z ENDP		; CEntity::GetPosition
_TEXT	ENDS
PUBLIC	?SetPosition@CEntity@@QAEXUVector3@@@Z		; CEntity::SetPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetPosition@CEntity@@QAEXUVector3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vecPosition$ = 8					; size = 12
?SetPosition@CEntity@@QAEXUVector3@@@Z PROC		; CEntity::SetPosition, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetPositio

; 69   : 	{
; 70   : 		memcpy(&m_pEntity->placeable.matMatrix.vPos, &vecPosition, sizeof(Vector3));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _vecPosition$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 52					; 00000034H
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@SetPositio:

; 71   : 	}
; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetPosition@CEntity@@QAEXUVector3@@@Z ENDP		; CEntity::SetPosition
_TEXT	ENDS
PUBLIC	?SetHeading@CEntity@@QAEXM@Z			; CEntity::SetHeading
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetHeading@CEntity@@QAEXM@Z
_TEXT	SEGMENT
_dwFunc$209283 = -32					; size = 4
_pPlaceable$209282 = -20				; size = 4
_this$ = -8						; size = 4
_fHeading$ = 8						; size = 4
?SetHeading@CEntity@@QAEXM@Z PROC			; CEntity::SetHeading, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 78   : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@SetHeading

; 79   : 	{
; 80   : 		PLACEABLE * pPlaceable = &m_pEntity->placeable;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR _pPlaceable$209282[ebp], ecx

; 81   : 		DWORD dwFunc = FUNC_CPlaceable__SetHeading;

	mov	DWORD PTR _dwFunc$209283[ebp], 4962944	; 004bba80H

; 82   : 		_asm
; 83   : 		{
; 84   : 			push fHeading

	push	DWORD PTR _fHeading$[ebp]

; 85   : 			mov ecx, pPlaceable

	mov	ecx, DWORD PTR _pPlaceable$209282[ebp]

; 86   : 			call dwFunc

	call	DWORD PTR _dwFunc$209283[ebp]
$LN2@SetHeading:

; 87   : 		}
; 88   : 	}
; 89   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHeading@CEntity@@QAEXM@Z ENDP			; CEntity::SetHeading
_TEXT	ENDS
PUBLIC	?Teleport@CEntity@@QAEXMMM@Z			; CEntity::Teleport
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Teleport@CEntity@@QAEXMMM@Z
_TEXT	SEGMENT
_pEntity$209291 = -20					; size = 4
_this$ = -8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fZ$ = 16						; size = 4
?Teleport@CEntity@@QAEXMMM@Z PROC			; CEntity::Teleport, COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Teleport

; 96   : 	{
; 97   : 		ENTITY_TYPE * pEntity = m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pEntity$209291[ebp], ecx

; 98   : 
; 99   : 		// Call Teleport
; 100  : 		_asm
; 101  : 		{
; 102  : 			mov ecx, pEntity

	mov	ecx, DWORD PTR _pEntity$209291[ebp]

; 103  : 			mov ebx, [ecx]

	mov	ebx, DWORD PTR [ecx]

; 104  : 			push fZ

	push	DWORD PTR _fZ$[ebp]

; 105  : 			push fY

	push	DWORD PTR _fY$[ebp]

; 106  : 			push fX

	push	DWORD PTR _fX$[ebp]

; 107  : 			call [ebx+2Ch]

	call	DWORD PTR [ebx+44]
$LN2@Teleport:

; 108  : 		}
; 109  : 	}
; 110  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Teleport@CEntity@@QAEXMMM@Z ENDP			; CEntity::Teleport
_TEXT	ENDS
PUBLIC	?GetModelIndex@CEntity@@QAEGXZ			; CEntity::GetModelIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetModelIndex@CEntity@@QAEGXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetModelIndex@CEntity@@QAEGXZ PROC			; CEntity::GetModelIndex, COMDAT
; _this$ = ecx

; 115  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 116  : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@GetModelIn

; 117  : 	{
; 118  : 		return m_pEntity->wModelIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	ax, WORD PTR [ecx+92]
	jmp	SHORT $LN2@GetModelIn
$LN1@GetModelIn:

; 119  : 	}
; 120  : 
; 121  : 	return 0;

	xor	eax, eax
$LN2@GetModelIn:

; 122  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetModelIndex@CEntity@@QAEGXZ ENDP			; CEntity::GetModelIndex
_TEXT	ENDS
PUBLIC	?SetModelIndex@CEntity@@QAEXG@Z			; CEntity::SetModelIndex
EXTRN	__imp__Sleep@4:PROC
EXTRN	?LoadRequestedModels@CGame@@QAEXXZ:PROC		; CGame::LoadRequestedModels
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?IsModelLoaded@CGame@@QAEHH@Z:PROC		; CGame::IsModelLoaded
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetModelIndex@CEntity@@QAEXG@Z
_TEXT	SEGMENT
_dwModelIndex$209306 = -32				; size = 4
_pEntity$209305 = -20					; size = 4
_this$ = -8						; size = 4
_wModelIndex$ = 8					; size = 2
?SetModelIndex@CEntity@@QAEXG@Z PROC			; CEntity::SetModelIndex, COMDAT
; _this$ = ecx

; 127  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 128  : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@SetModelIn

; 129  : 	{
; 130  : 		// Is the model not loaded?
; 131  : 		if(!pGame->IsModelLoaded(wModelIndex))

	movzx	eax, WORD PTR _wModelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@SetModelIn

; 132  : 		{
; 133  : 			// Request the model
; 134  : 			pGame->RequestModel(wModelIndex);

	movzx	eax, WORD PTR _wModelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 135  : 
; 136  : 			// Load all requested models
; 137  : 			pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels
$LN2@SetModelIn:

; 138  : 
; 139  : 			// Wait for the model to load
; 140  : 			while(!pGame->IsModelLoaded(wModelIndex))

	movzx	eax, WORD PTR _wModelIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@SetModelIn

; 141  : 			{
; 142  : 				Sleep(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 			}

	jmp	SHORT $LN2@SetModelIn
$LN3@SetModelIn:

; 144  : 		}
; 145  : 
; 146  : 		ENTITY_TYPE * pEntity = m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pEntity$209305[ebp], ecx

; 147  : 
; 148  : 		// Call SetModelIndex
; 149  : 		DWORD dwModelIndex = wModelIndex;

	movzx	eax, WORD PTR _wModelIndex$[ebp]
	mov	DWORD PTR _dwModelIndex$209306[ebp], eax

; 150  : 		_asm
; 151  : 		{
; 152  : 			mov ecx, pEntity

	mov	ecx, DWORD PTR _pEntity$209305[ebp]

; 153  : 			mov ebx, [ecx]

	mov	ebx, DWORD PTR [ecx]

; 154  : 			push dwModelIndex

	push	DWORD PTR _dwModelIndex$209306[ebp]

; 155  : 			call [ebx+0Ch]

	call	DWORD PTR [ebx+12]
$LN5@SetModelIn:

; 156  : 		}
; 157  : 	}
; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetModelIndex@CEntity@@QAEXG@Z ENDP			; CEntity::SetModelIndex
_TEXT	ENDS
PUBLIC	?IsOnScreen@CEntity@@QAEHXZ			; CEntity::IsOnScreen
EXTRN	?IsEntityOnScreen@CWorld@@SA_NPAU_ENTITY_TYPE@@@Z:PROC ; CWorld::IsEntityOnScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsOnScreen@CEntity@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsOnScreen@CEntity@@QAEHXZ PROC			; CEntity::IsOnScreen, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@IsOnScreen

; 165  : 	{
; 166  : 		return CWorld::IsEntityOnScreen((ENTITY_TYPE *)m_pEntity);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?IsEntityOnScreen@CWorld@@SA_NPAU_ENTITY_TYPE@@@Z ; CWorld::IsEntityOnScreen
	add	esp, 4
	movzx	eax, al
	jmp	SHORT $LN2@IsOnScreen
$LN1@IsOnScreen:

; 167  : 	}
; 168  : 
; 169  : 	return FALSE;

	xor	eax, eax
$LN2@IsOnScreen:

; 170  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOnScreen@CEntity@@QAEHXZ ENDP			; CEntity::IsOnScreen
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?GetDistanceFromCentreOfMassToBaseOfModel@CEntity@@QAEMXZ ; CEntity::GetDistanceFromCentreOfMassToBaseOfModel
EXTRN	__fltused:DWORD
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetDistanceFromCentreOfMassToBaseOfModel@CEntity@@QAEMXZ
_TEXT	SEGMENT
_dwFunc$209318 = -44					; size = 4
_pEntity$209317 = -32					; size = 4
_fDistance$ = -20					; size = 4
_this$ = -8						; size = 4
?GetDistanceFromCentreOfMassToBaseOfModel@CEntity@@QAEMXZ PROC ; CEntity::GetDistanceFromCentreOfMassToBaseOfModel, COMDAT
; _this$ = ecx

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 176  : 	float fDistance = 0.0f;

	fldz
	fstp	DWORD PTR _fDistance$[ebp]

; 177  : 
; 178  : 	if(m_pEntity)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@GetDistanc

; 179  : 	{
; 180  : 		ENTITY_TYPE * pEntity = m_pEntity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pEntity$209317[ebp], ecx

; 181  : 		DWORD dwFunc = FUNC_CEntity__GetDistanceFromCentreOfMassToBaseOfModel;

	mov	DWORD PTR _dwFunc$209318[ebp], 4750608	; 00487d10H

; 182  : 		_asm
; 183  : 		{
; 184  : 			mov ecx, pEntity

	mov	ecx, DWORD PTR _pEntity$209317[ebp]

; 185  : 			call dwFunc

	call	DWORD PTR _dwFunc$209318[ebp]

; 186  : 			fstp fDistance

	fstp	DWORD PTR _fDistance$[ebp]
$LN1@GetDistanc:

; 187  : 		}
; 188  : 	}
; 189  : 
; 190  : 	return fDistance;

	fld	DWORD PTR _fDistance$[ebp]

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDistanceFromCentreOfMassToBaseOfModel@CEntity@@QAEMXZ ENDP ; CEntity::GetDistanceFromCentreOfMassToBaseOfModel
_TEXT	ENDS
END
