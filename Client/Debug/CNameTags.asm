; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\CNameTags.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?matView@@3U_D3DMATRIX@@A			; matView
PUBLIC	?bbfont@@3PAVCBBFont@@A				; bbfont
PUBLIC	?BarOldStateBlock@@3KA				; BarOldStateBlock
PUBLIC	?BarNewStateBlock@@3KA				; BarNewStateBlock
PUBLIC	?BarBDRVertices@@3PAUBarVertices_s@@A		; BarBDRVertices
PUBLIC	?BarBGVertices@@3PAUBarVertices_s@@A		; BarBGVertices
PUBLIC	?BarVertices@@3PAUBarVertices_s@@A		; BarVertices
_BSS	SEGMENT
?matView@@3U_D3DMATRIX@@A DB 040H DUP (?)		; matView
?bbfont@@3PAVCBBFont@@A DD 01H DUP (?)			; bbfont
?BarOldStateBlock@@3KA DD 01H DUP (?)			; BarOldStateBlock
?BarNewStateBlock@@3KA DD 01H DUP (?)			; BarNewStateBlock
_BSS	ENDS
_DATA	SEGMENT
?BarBDRVertices@@3PAUBarVertices_s@@A DD 0be99999ar ; -0.3 ; BarBDRVertices
	DD	0bcf5c28fr			; -0.03
	DD	000000000r			; 0
	DD	0ff000000H
	DD	0be99999ar			; -0.3
	DD	03cf5c28fr			; 0.03
	DD	000000000r			; 0
	DD	0ff000000H
	DD	03e99999ar			; 0.3
	DD	03cf5c28fr			; 0.03
	DD	000000000r			; 0
	DD	0ff000000H
	DD	03e99999ar			; 0.3
	DD	0bcf5c28fr			; -0.03
	DD	000000000r			; 0
	DD	0ff000000H
?BarBGVertices@@3PAUBarVertices_s@@A DD 0be947ae1r ; -0.29 ; BarBGVertices
	DD	0bca3d70ar			; -0.02
	DD	000000000r			; 0
	DD	0ff212121H
	DD	0be947ae1r			; -0.29
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	0ff212121H
	DD	03e947ae1r			; 0.29
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	0ff212121H
	DD	03e947ae1r			; 0.29
	DD	0bca3d70ar			; -0.02
	DD	000000000r			; 0
	DD	0ff212121H
?BarVertices@@3PAUBarVertices_s@@A DD 0be947ae1r ; -0.29 ; BarVertices
	DD	0bca3d70ar			; -0.02
	DD	000000000r			; 0
	DD	0ffff0000H
	DD	0be947ae1r			; -0.29
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	0ffff0000H
	DD	03e947ae1r			; 0.29
	DD	03ca3d70ar			; 0.02
	DD	000000000r			; 0
	DD	0ffff0000H
	DD	03e947ae1r			; 0.29
	DD	0bca3d70ar			; -0.02
	DD	000000000r			; 0
	DD	0ffff0000H
_DATA	ENDS
PUBLIC	??0CNameTags@@QAE@PAUIDirect3DDevice8@@@Z	; CNameTags::CNameTags
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\cnametags.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CNameTags@@QAE@PAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pD3DDevice$ = 8					; size = 4
??0CNameTags@@QAE@PAUIDirect3DDevice8@@@Z PROC		; CNameTags::CNameTags, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 64   : 	bbfont = NULL;

	mov	DWORD PTR ?bbfont@@3PAVCBBFont@@A, 0	; bbfont

; 65   : 	m_pD3DDevice = pD3DDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pD3DDevice$[ebp]
	mov	DWORD PTR [eax], ecx

; 66   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0CNameTags@@QAE@PAUIDirect3DDevice8@@@Z ENDP		; CNameTags::CNameTags
_TEXT	ENDS
PUBLIC	??1CNameTags@@QAE@XZ				; CNameTags::~CNameTags
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CNameTags@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CNameTags@@QAE@XZ PROC				; CNameTags::~CNameTags, COMDAT
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	
; 71   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CNameTags@@QAE@XZ ENDP				; CNameTags::~CNameTags
_TEXT	ENDS
PUBLIC	?GetPlayerName@CPlayerManager@@QAEPADE@Z	; CPlayerManager::GetPlayerName
PUBLIC	__real@3e99999a
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fd28f5c20000000
PUBLIC	__real@3f77c1bda0000000
PUBLIC	__real@42c80000
PUBLIC	__real@4059000000000000
PUBLIC	?GetReportedArmour@CRemotePlayer@@QAEMXZ	; CRemotePlayer::GetReportedArmour
PUBLIC	?GetReportedHealth@CRemotePlayer@@QAEMXZ	; CRemotePlayer::GetReportedHealth
PUBLIC	__real@3ff0000000000000
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
PUBLIC	__real@4054000000000000
PUBLIC	?IsActive@CRemotePlayer@@QAEHXZ			; CRemotePlayer::IsActive
PUBLIC	?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z	; CPlayerManager::GetAt
PUBLIC	?GetSlotState@CPlayerManager@@QAEHE@Z		; CPlayerManager::GetSlotState
PUBLIC	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
PUBLIC	__real@00000000
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	??_C@_06INMOKKKM@vcpfnt?$AA@			; `string'
PUBLIC	?Draw@CNameTags@@QAEXXZ				; CNameTags::Draw
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?End@CBBFont@@QAEXXZ:PROC			; CBBFont::End
EXTRN	?Draw@CBBFont@@QAEMPADMK@Z:PROC			; CBBFont::Draw
EXTRN	?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ:PROC	; CRemotePlayer::GetTeamColorAsARGB
EXTRN	?Begin@CBBFont@@QAEXXZ:PROC			; CBBFont::Begin
EXTRN	?GetPosition@CEntity@@QAEXPAUVector3@@@Z:PROC	; CEntity::GetPosition
EXTRN	?IsOnScreen@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsOnScreen
EXTRN	?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ:PROC ; CRemotePlayer::GetDistanceFromLocalPlayer
EXTRN	?pNetowkManager@@3PAVCNetworkManager@@A:DWORD	; pNetowkManager
EXTRN	_D3DXMatrixTranspose@8:PROC
EXTRN	?Initialise@CBBFont@@QAEHXZ:PROC		; CBBFont::Initialise
EXTRN	??0CBBFont@@QAE@PAUIDirect3DDevice8@@PAD@Z:PROC	; CBBFont::CBBFont
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fd28f5c20000000
CONST	SEGMENT
__real@3fd28f5c20000000 DQ 03fd28f5c20000000r	; 0.29
CONST	ENDS
;	COMDAT __real@3f77c1bda0000000
CONST	SEGMENT
__real@3f77c1bda0000000 DQ 03f77c1bda0000000r	; 0.0058
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4054000000000000
CONST	SEGMENT
__real@4054000000000000 DQ 04054000000000000r	; 80
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_06INMOKKKM@vcpfnt?$AA@
CONST	SEGMENT
??_C@_06INMOKKKM@vcpfnt?$AA@ DB 'vcpfnt', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Draw@CNameTags@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CNameTags@@QAEXXZ$0
__ehfuncinfo$?Draw@CNameTags@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@CNameTags@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Draw@CNameTags@@QAEXXZ
_TEXT	SEGMENT
tv74 = -408						; size = 4
$T209358 = -400						; size = 4
$T209359 = -388						; size = 4
_Armour$209312 = -184					; size = 4
_Health$209311 = -172					; size = 4
_vPos$209309 = -160					; size = 12
_PlayerPed$209307 = -140				; size = 4
_Player$209305 = -128					; size = 4
_x$209300 = -116					; size = 4
_pPlayerManager$209299 = -104				; size = 4
_matTransposed$ = -92					; size = 64
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?Draw@CNameTags@@QAEXXZ PROC				; CNameTags::Draw, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Draw@CNameTags@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 396				; 0000018cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 99					; 00000063H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 75   : 	if(!bbfont) 

	cmp	DWORD PTR ?bbfont@@3PAVCBBFont@@A, 0	; bbfont
	jne	SHORT $LN14@Draw

; 76   : 	{ 
; 77   : 		bbfont = new CBBFont(m_pD3DDevice, "vcpfnt");

	push	296					; 00000128H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209359[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209359[ebp], 0
	je	SHORT $LN17@Draw
	push	OFFSET ??_C@_06INMOKKKM@vcpfnt?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR $T209359[ebp]
	call	??0CBBFont@@QAE@PAUIDirect3DDevice8@@PAD@Z ; CBBFont::CBBFont
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN18@Draw
$LN17@Draw:
	mov	DWORD PTR tv74[ebp], 0
$LN18@Draw:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T209358[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T209358[ebp]
	mov	DWORD PTR ?bbfont@@3PAVCBBFont@@A, eax	; bbfont

; 78   : 		bbfont->Initialise(); 

	mov	ecx, DWORD PTR ?bbfont@@3PAVCBBFont@@A	; bbfont
	call	?Initialise@CBBFont@@QAEHXZ		; CBBFont::Initialise
$LN14@Draw:

; 79   : 	} 
; 80   : 
; 81   : 	if(!BarOldStateBlock) 

	cmp	DWORD PTR ?BarOldStateBlock@@3KA, 0	; BarOldStateBlock
	jne	$LN13@Draw

; 82   : 	{ 
; 83   : 		m_pD3DDevice->BeginStateBlock(); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : 		m_pD3DDevice->SetRenderState(D3DRS_LIGHTING, FALSE); 

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 85   : 		m_pD3DDevice->SetRenderState(D3DRS_FOGENABLE, FALSE); 

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 86   : 		m_pD3DDevice->SetRenderState(D3DRS_ZENABLE, 1); 

	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 87   : 		m_pD3DDevice->SetRenderState(D3DRS_FILLMODE, 3); 

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 88   : 		m_pD3DDevice->SetRenderState(D3DRS_CULLMODE, 1); 

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 89   : 		m_pD3DDevice->SetRenderState(D3DRS_WRAP0, 0); 

	mov	esi, esp
	push	0
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 		m_pD3DDevice->SetRenderState(D3DRS_CLIPPING, 1); 

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 91   : 		m_pD3DDevice->SetRenderState(D3DRS_VERTEXBLEND, 0); 

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 92   : 		m_pD3DDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, 1); 

	mov	esi, esp
	push	1
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : 		m_pD3DDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, 0); 

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 94   : 		m_pD3DDevice->SetRenderState(D3DRS_COLORWRITEENABLE, 15); 

	mov	esi, esp
	push	15					; 0000000fH
	push	168					; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 95   : 		m_pD3DDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, 1); 

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 96   : 		m_pD3DDevice->SetRenderState(D3DRS_SRCBLEND, 5); 

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 97   : 		m_pD3DDevice->SetRenderState(D3DRS_DESTBLEND, 6); 

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 98   : 		m_pD3DDevice->SetRenderState(D3DRS_BLENDOP, 1); 

	mov	esi, esp
	push	1
	push	171					; 000000abH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 99   : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLOROP, 4); 

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 100  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLORARG1, 2); 

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 101  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLORARG2, 0); 

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 102  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, 4); 

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 103  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, 2); 

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 104  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, 0); 

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 105  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0); 

	mov	esi, esp
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, 0); 

	mov	esi, esp
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 107  : 		m_pD3DDevice->SetTextureStageState(1, D3DTSS_COLOROP, 1); 

	mov	esi, esp
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 108  : 		m_pD3DDevice->SetTextureStageState(1, D3DTSS_ALPHAOP, 1); 

	mov	esi, esp
	push	1
	push	4
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 109  : 		m_pD3DDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD); 

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 110  : 		m_pD3DDevice->SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE); 

	mov	esi, esp
	push	66					; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  : 		m_pD3DDevice->SetStreamSource(0, NULL, 0); 

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 112  : 		m_pD3DDevice->EndStateBlock(&BarOldStateBlock); 

	mov	esi, esp
	push	OFFSET ?BarOldStateBlock@@3KA		; BarOldStateBlock
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+212]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@Draw:

; 113  : 	} 
; 114  : 
; 115  : 	if(!BarNewStateBlock) 

	cmp	DWORD PTR ?BarNewStateBlock@@3KA, 0	; BarNewStateBlock
	jne	$LN12@Draw

; 116  : 	{ 
; 117  : 		m_pD3DDevice->BeginStateBlock(); 

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 118  : 		m_pD3DDevice->SetRenderState(D3DRS_LIGHTING, FALSE); 

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 119  : 		m_pD3DDevice->SetRenderState(D3DRS_FOGENABLE, FALSE); 

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 120  : 		m_pD3DDevice->SetRenderState(D3DRS_ZENABLE, 1); 

	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 121  : 		m_pD3DDevice->SetRenderState(D3DRS_FILLMODE, 3); 

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 122  : 		m_pD3DDevice->SetRenderState(D3DRS_CULLMODE, 1); 

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 123  : 		m_pD3DDevice->SetRenderState(D3DRS_WRAP0, 0); 

	mov	esi, esp
	push	0
	push	128					; 00000080H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 124  : 		m_pD3DDevice->SetRenderState(D3DRS_CLIPPING, 1); 

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 125  : 		m_pD3DDevice->SetRenderState(D3DRS_VERTEXBLEND, 0); 

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 126  : 		m_pD3DDevice->SetRenderState(D3DRS_CLIPPLANEENABLE, 1); 

	mov	esi, esp
	push	1
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 127  : 		m_pD3DDevice->SetRenderState(D3DRS_INDEXEDVERTEXBLENDENABLE, 0); 

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 		m_pD3DDevice->SetRenderState(D3DRS_COLORWRITEENABLE, 15); 

	mov	esi, esp
	push	15					; 0000000fH
	push	168					; 000000a8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 129  : 		m_pD3DDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, 1); 

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  : 		m_pD3DDevice->SetRenderState(D3DRS_SRCBLEND, 5); 

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  : 		m_pD3DDevice->SetRenderState(D3DRS_DESTBLEND, 6); 

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 132  : 		m_pD3DDevice->SetRenderState(D3DRS_BLENDOP, 1); 

	mov	esi, esp
	push	1
	push	171					; 000000abH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 133  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLOROP, 4); 

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 134  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLORARG1, 2); 

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 135  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLORARG2, 0); 

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, 1); 

	mov	esi, esp
	push	1
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, 2); 

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 138  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, 0); 

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 139  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_TEXCOORDINDEX, 0); 

	mov	esi, esp
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 140  : 		m_pD3DDevice->SetTextureStageState(0, D3DTSS_TEXTURETRANSFORMFLAGS, 0); 

	mov	esi, esp
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 141  : 		m_pD3DDevice->SetTextureStageState(1, D3DTSS_COLOROP, 1); 

	mov	esi, esp
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : 		m_pD3DDevice->SetTextureStageState(1, D3DTSS_ALPHAOP, 1); 

	mov	esi, esp
	push	1
	push	4
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 		m_pD3DDevice->SetRenderState(D3DRS_SHADEMODE, D3DSHADE_GOURAUD); 

	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 144  : 		m_pD3DDevice->SetVertexShader(D3DFVF_XYZ|D3DFVF_DIFFUSE); 

	mov	esi, esp
	push	66					; 00000042H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 145  : 		m_pD3DDevice->EndStateBlock(&BarNewStateBlock); 

	mov	esi, esp
	push	OFFSET ?BarNewStateBlock@@3KA		; BarNewStateBlock
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+212]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@Draw:

; 146  : 	} 
; 147  : 
; 148  : 	m_pD3DDevice->CaptureStateBlock(BarOldStateBlock); 

	mov	esi, esp
	mov	eax, DWORD PTR ?BarOldStateBlock@@3KA	; BarOldStateBlock
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+220]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 149  : 	m_pD3DDevice->ApplyStateBlock(BarNewStateBlock); 

	mov	esi, esp
	mov	eax, DWORD PTR ?BarNewStateBlock@@3KA	; BarNewStateBlock
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+216]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 150  : 
; 151  : 	D3DXMATRIX matTransposed; 

	lea	ecx, DWORD PTR _matTransposed$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 152  : 	D3DXMatrixTranspose(&matTransposed, (D3DXMATRIX*)&matView); 

	push	OFFSET ?matView@@3U_D3DMATRIX@@A	; matView
	lea	eax, DWORD PTR _matTransposed$[ebp]
	push	eax
	call	_D3DXMatrixTranspose@8

; 153  : 	matTransposed._14 = matTransposed._24 = matTransposed._34 = 0.0f; 

	fldz
	fstp	DWORD PTR _matTransposed$[ebp+44]
	fld	DWORD PTR _matTransposed$[ebp+44]
	fstp	DWORD PTR _matTransposed$[ebp+28]
	fld	DWORD PTR _matTransposed$[ebp+28]
	fstp	DWORD PTR _matTransposed$[ebp+12]

; 154  : 
; 155  : 	if(pNetowkManager) 

	cmp	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, 0 ; pNetowkManager
	je	$LN8@Draw

; 156  : 	{ 
; 157  : 		CPlayerManager* pPlayerManager = pNetowkManager->GetPlayerManager(); 

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	DWORD PTR _pPlayerManager$209299[ebp], eax

; 158  : 		for(int x = 0; x < MAX_PLAYERS; x++)

	mov	DWORD PTR _x$209300[ebp], 0
	jmp	SHORT $LN10@Draw
$LN9@Draw:
	mov	eax, DWORD PTR _x$209300[ebp]
	add	eax, 1
	mov	DWORD PTR _x$209300[ebp], eax
$LN10@Draw:
	cmp	DWORD PTR _x$209300[ebp], 50		; 00000032H
	jge	$LN8@Draw

; 159  : 		{ 
; 160  : 			if(pPlayerManager->GetSlotState(x) == TRUE)

	movzx	eax, BYTE PTR _x$209300[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerManager$209299[ebp]
	call	?GetSlotState@CPlayerManager@@QAEHE@Z	; CPlayerManager::GetSlotState
	cmp	eax, 1
	jne	$LN1@Draw

; 161  : 			{ // Player is in use
; 162  : 				CRemotePlayer* Player = pPlayerManager->GetAt(x); 

	movzx	eax, BYTE PTR _x$209300[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerManager$209299[ebp]
	call	?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z ; CPlayerManager::GetAt
	mov	DWORD PTR _Player$209305[ebp], eax

; 163  : 
; 164  : 				if(Player->IsActive() && (Player->GetDistanceFromLocalPlayer() <= 80.0f))

	mov	ecx, DWORD PTR _Player$209305[ebp]
	call	?IsActive@CRemotePlayer@@QAEHXZ		; CRemotePlayer::IsActive
	test	eax, eax
	je	$LN1@Draw
	mov	ecx, DWORD PTR _Player$209305[ebp]
	call	?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ ; CRemotePlayer::GetDistanceFromLocalPlayer
	fcomp	QWORD PTR __real@4054000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	$LN1@Draw

; 165  : 				{ // Active and within reasonable distance 
; 166  : 					CPlayerPed* PlayerPed = Player->GetPlayerPed(); 

	mov	ecx, DWORD PTR _Player$209305[ebp]
	call	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
	mov	DWORD PTR _PlayerPed$209307[ebp], eax

; 167  : 
; 168  : 					if(PlayerPed->IsOnScreen()) { // They're onscreen 

	mov	ecx, DWORD PTR _PlayerPed$209307[ebp]
	call	?IsOnScreen@CPlayerPed@@QAEHXZ		; CPlayerPed::IsOnScreen
	test	eax, eax
	je	$LN1@Draw

; 169  : 						// Get their position
; 170  : 						Vector3 vPos;

	lea	ecx, DWORD PTR _vPos$209309[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 171  : 						PlayerPed->GetPosition(&vPos);

	lea	eax, DWORD PTR _vPos$209309[ebp]
	push	eax
	mov	ecx, DWORD PTR _PlayerPed$209307[ebp]
	call	?GetPosition@CEntity@@QAEXPAUVector3@@@Z ; CEntity::GetPosition

; 172  : 
; 173  : 						// Set the matrix position
; 174  : 						matTransposed._41 = vPos.X;

	fld	DWORD PTR _vPos$209309[ebp]
	fstp	DWORD PTR _matTransposed$[ebp+48]

; 175  : 						matTransposed._42 = vPos.Y;

	fld	DWORD PTR _vPos$209309[ebp+4]
	fstp	DWORD PTR _matTransposed$[ebp+52]

; 176  : 						matTransposed._43 = vPos.Z + 1.0f;

	fld	DWORD PTR _vPos$209309[ebp+8]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _matTransposed$[ebp+56]

; 177  : 
; 178  : 						// Set the world transformation
; 179  : 						m_pD3DDevice->SetTransform(D3DTS_WORLD, &matTransposed); 

	mov	esi, esp
	lea	eax, DWORD PTR _matTransposed$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 180  : 
; 181  : 						// Get their health and armour
; 182  : 						// TODO: Use the player ped health/armour?
; 183  : 						float Health = Player->GetReportedHealth(); 

	mov	ecx, DWORD PTR _Player$209305[ebp]
	call	?GetReportedHealth@CRemotePlayer@@QAEMXZ ; CRemotePlayer::GetReportedHealth
	fstp	DWORD PTR _Health$209311[ebp]

; 184  : 						float Armour = Player->GetReportedArmour();

	mov	ecx, DWORD PTR _Player$209305[ebp]
	call	?GetReportedArmour@CRemotePlayer@@QAEMXZ ; CRemotePlayer::GetReportedArmour
	fstp	DWORD PTR _Armour$209312[ebp]

; 185  : 
; 186  : 						// Cap their health and armour if needed
; 187  : 						if(Health > 100.0f) Health = 100.0f; 

	fld	DWORD PTR _Health$209311[ebp]
	fcomp	QWORD PTR __real@4059000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@Draw
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Health$209311[ebp]
$LN4@Draw:

; 188  : 						if(Armour > 100.0f) Armour = 100.0f; 

	fld	DWORD PTR _Armour$209312[ebp]
	fcomp	QWORD PTR __real@4059000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN3@Draw
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR _Armour$209312[ebp]
$LN3@Draw:

; 189  : 
; 190  : 						// Set the health bar offsets
; 191  : 						BarBGVertices[0].x = BarBGVertices[1].x = (0.0058f * Health) - 0.29f;

	fld	DWORD PTR _Health$209311[ebp]
	fmul	QWORD PTR __real@3f77c1bda0000000
	fsub	QWORD PTR __real@3fd28f5c20000000
	fstp	DWORD PTR ?BarBGVertices@@3PAUBarVertices_s@@A+16
	fld	DWORD PTR ?BarBGVertices@@3PAUBarVertices_s@@A+16
	fstp	DWORD PTR ?BarBGVertices@@3PAUBarVertices_s@@A

; 192  : 
; 193  : 						// Set the health bar color
; 194  : 						BarVertices[0].c = BarVertices[1].c = BarVertices[2].c = BarVertices[3].c 
; 195  : 							= HEALTH_BAR_COLOR;

	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+60, -26138 ; ffff99e6H
	mov	eax, DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+60
	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+44, eax
	mov	ecx, DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+44
	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+28, ecx
	mov	edx, DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+28
	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+12, edx

; 196  : 
; 197  : 						// Draw the health bar border
; 198  : 						m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, BarBDRVertices, sizeof(BarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?BarBDRVertices@@3PAUBarVertices_s@@A ; BarBDRVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 199  : 
; 200  : 						// Draw the health bar fill
; 201  : 						m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, BarVertices, sizeof(BarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?BarVertices@@3PAUBarVertices_s@@A ; BarVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 202  : 
; 203  : 						// Draw the health bar background
; 204  : 						m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, BarBGVertices, sizeof(BarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?BarBGVertices@@3PAUBarVertices_s@@A ; BarBGVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 205  : 
; 206  : 						if(Armour > 0.0f) { // They have armour

	fld	DWORD PTR _Armour$209312[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	$LN2@Draw

; 207  : 							// Add an offset to the z position
; 208  : 							matTransposed._43 += 0.1f;

	fld	DWORD PTR _matTransposed$[ebp+56]
	fadd	QWORD PTR __real@3fb99999a0000000
	fstp	DWORD PTR _matTransposed$[ebp+56]

; 209  : 
; 210  : 							// Set the world transformation
; 211  : 							m_pD3DDevice->SetTransform(D3DTS_WORLD, &matTransposed);

	mov	esi, esp
	lea	eax, DWORD PTR _matTransposed$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+148]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 212  : 
; 213  : 							// Set the armour bar offsets
; 214  : 							BarBGVertices[0].x = BarBGVertices[1].x = (0.0058f * Armour) - 0.29f;

	fld	DWORD PTR _Armour$209312[ebp]
	fmul	QWORD PTR __real@3f77c1bda0000000
	fsub	QWORD PTR __real@3fd28f5c20000000
	fstp	DWORD PTR ?BarBGVertices@@3PAUBarVertices_s@@A+16
	fld	DWORD PTR ?BarBGVertices@@3PAUBarVertices_s@@A+16
	fstp	DWORD PTR ?BarBGVertices@@3PAUBarVertices_s@@A

; 215  : 
; 216  : 							// Set the armour bar color
; 217  : 							BarVertices[0].c = BarVertices[1].c = BarVertices[2].c = 
; 218  : 								BarVertices[3].c = ARMOUR_BAR_COLOR;

	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+60, -8553091 ; ff7d7d7dH
	mov	eax, DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+60
	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+44, eax
	mov	ecx, DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+44
	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+28, ecx
	mov	edx, DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+28
	mov	DWORD PTR ?BarVertices@@3PAUBarVertices_s@@A+12, edx

; 219  : 
; 220  : 							// Draw the armour bar border
; 221  : 							m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, BarBDRVertices, sizeof(BarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?BarBDRVertices@@3PAUBarVertices_s@@A ; BarBDRVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 
; 223  : 							// Draw the armour bar fill
; 224  : 							m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, BarVertices, sizeof(BarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?BarVertices@@3PAUBarVertices_s@@A ; BarVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  : 
; 226  : 							// Draw the armour bar background
; 227  : 							m_pD3DDevice->DrawPrimitiveUP(D3DPT_TRIANGLEFAN, 2, BarBGVertices, sizeof(BarVertices_s));

	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ?BarBGVertices@@3PAUBarVertices_s@@A ; BarBGVertices
	push	2
	push	6
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+288]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Draw:

; 228  : 						}
; 229  : 
; 230  : 						// Draw the name tag
; 231  : 						if(bbfont) { 

	cmp	DWORD PTR ?bbfont@@3PAVCBBFont@@A, 0	; bbfont
	je	SHORT $LN1@Draw

; 232  : 							bbfont->Begin(); 

	mov	ecx, DWORD PTR ?bbfont@@3PAVCBBFont@@A	; bbfont
	call	?Begin@CBBFont@@QAEXXZ			; CBBFont::Begin

; 233  : 							//bbfont->Draw(pPlayerManager->GetPlayerName(x), 0.285f, 0xFF000000);
; 234  : 							bbfont->Draw(pPlayerManager->GetPlayerName(x), 0.300f, Player->GetTeamColorAsARGB()); 

	mov	ecx, DWORD PTR _Player$209305[ebp]
	call	?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ ; CRemotePlayer::GetTeamColorAsARGB
	push	eax
	push	ecx
	fld	DWORD PTR __real@3e99999a
	fstp	DWORD PTR [esp]
	movzx	eax, BYTE PTR _x$209300[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPlayerManager$209299[ebp]
	call	?GetPlayerName@CPlayerManager@@QAEPADE@Z ; CPlayerManager::GetPlayerName
	push	eax
	mov	ecx, DWORD PTR ?bbfont@@3PAVCBBFont@@A	; bbfont
	call	?Draw@CBBFont@@QAEMPADMK@Z		; CBBFont::Draw
	fstp	ST(0)

; 235  : 							bbfont->End(); 

	mov	ecx, DWORD PTR ?bbfont@@3PAVCBBFont@@A	; bbfont
	call	?End@CBBFont@@QAEXXZ			; CBBFont::End
$LN1@Draw:

; 236  : 						} 
; 237  : 					} 
; 238  : 				} 
; 239  : 			} 
; 240  : 		} 

	jmp	$LN9@Draw
$LN8@Draw:

; 241  : 	} 
; 242  : 
; 243  : 	m_pD3DDevice->ApplyStateBlock(BarOldStateBlock); 

	mov	esi, esp
	mov	eax, DWORD PTR ?BarOldStateBlock@@3KA	; BarOldStateBlock
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+216]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 244  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 408				; 00000198H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN24@Draw:
	DD	2
	DD	$LN23@Draw
$LN23@Draw:
	DD	-92					; ffffffa4H
	DD	64					; 00000040H
	DD	$LN20@Draw
	DD	-160					; ffffff60H
	DD	12					; 0000000cH
	DD	$LN21@Draw
$LN21@Draw:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN20@Draw:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@CNameTags@@QAEXXZ$0:
	mov	eax, DWORD PTR $T209359[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Draw@CNameTags@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-412]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Draw@CNameTags@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Draw@CNameTags@@QAEXXZ ENDP				; CNameTags::Draw
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.h
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\game\common.h
_TEXT	ENDS
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 34   : 	Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	{
; 36   : 		X = Y = Z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 37   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cremoteplayer.h
_TEXT	ENDS
;	COMDAT ?IsActive@CRemotePlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsActive@CRemotePlayer@@QAEHXZ PROC			; CRemotePlayer::IsActive, COMDAT
; _this$ = ecx

; 69   : 	BOOL IsActive() { return m_bIsActive; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsActive@CRemotePlayer@@QAEHXZ ENDP			; CRemotePlayer::IsActive
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ PROC	; CRemotePlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 80   : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CRemotePlayer::GetPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetReportedHealth@CRemotePlayer@@QAEMXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?GetReportedHealth@CRemotePlayer@@QAEMXZ PROC		; CRemotePlayer::GetReportedHealth, COMDAT
; _this$ = ecx

; 89   : 	float GetReportedHealth() { return (float)m_byteHealth; };

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	mov	DWORD PTR tv68[ebp], ecx
	fild	DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReportedHealth@CRemotePlayer@@QAEMXZ ENDP		; CRemotePlayer::GetReportedHealth
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetReportedArmour@CRemotePlayer@@QAEMXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?GetReportedArmour@CRemotePlayer@@QAEMXZ PROC		; CRemotePlayer::GetReportedArmour, COMDAT
; _this$ = ecx

; 91   : 	float GetReportedArmour() { return (float)m_byteArmour; };

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+117]
	mov	DWORD PTR tv68[ebp], ecx
	fild	DWORD PTR tv68[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetReportedArmour@CRemotePlayer@@QAEMXZ ENDP		; CRemotePlayer::GetReportedArmour
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cplayermanager.h
_TEXT	ENDS
;	COMDAT ?GetPlayerName@CPlayerManager@@QAEPADE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerID$ = 8						; size = 1
?GetPlayerName@CPlayerManager@@QAEPADE@Z PROC		; CPlayerManager::GetPlayerName, COMDAT
; _this$ = ecx

; 37   : 	char * GetPlayerName(EntityId playerID) { return m_szPlayerNames[playerID]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _playerID$[ebp]
	imul	eax, 25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+433]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerName@CPlayerManager@@QAEPADE@Z ENDP		; CPlayerManager::GetPlayerName
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerID$ = 8						; size = 1
?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerManager::GetAt, COMDAT
; _this$ = ecx

; 45   : 	CRemotePlayer* GetAt(EntityId playerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		if(playerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _playerID$[ebp]
	cmp	eax, 50					; 00000032H
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 47   : 		return m_pPlayers[playerID];

	movzx	eax, BYTE PTR _playerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+208]
$LN2@GetAt:

; 48   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerManager::GetAt
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetSlotState@CPlayerManager@@QAEHE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerID$ = 8						; size = 1
?GetSlotState@CPlayerManager@@QAEHE@Z PROC		; CPlayerManager::GetSlotState, COMDAT
; _this$ = ecx

; 50   : 	BOOL GetSlotState(EntityId playerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 51   : 		if(playerID > MAX_PLAYERS) { return FALSE; }

	movzx	eax, BYTE PTR _playerID$[ebp]
	cmp	eax, 50					; 00000032H
	jle	SHORT $LN1@GetSlotSta
	xor	eax, eax
	jmp	SHORT $LN2@GetSlotSta
$LN1@GetSlotSta:

; 52   : 		return m_bPlayerSlotState[playerID];

	movzx	eax, BYTE PTR _playerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
$LN2@GetSlotSta:

; 53   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSlotState@CPlayerManager@@QAEHE@Z ENDP		; CPlayerManager::GetSlotState
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cnetworkmanager.h
_TEXT	ENDS
;	COMDAT ?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ PROC ; CNetworkManager::GetPlayerManager, COMDAT
; _this$ = ecx

; 79   : 	CPlayerManager * GetPlayerManager() { return m_pPlayerManager; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ENDP ; CNetworkManager::GetPlayerManager
_TEXT	ENDS
END
