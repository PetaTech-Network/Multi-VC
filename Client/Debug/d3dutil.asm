; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\d3d8\d3dutil.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z ; D3DUtil_InitMaterial
EXTRN	_memset:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z
_TEXT	SEGMENT
_mtrl$ = 8						; size = 4
_r$ = 12						; size = 4
_g$ = 16						; size = 4
_b$ = 20						; size = 4
_a$ = 24						; size = 4
?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z PROC	; D3DUtil_InitMaterial, COMDAT

; 26   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 27   :     ZeroMemory( &mtrl, sizeof(D3DMATERIAL8) );

	push	68					; 00000044H
	push	0
	mov	eax, DWORD PTR _mtrl$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 28   :     mtrl.Diffuse.r = mtrl.Ambient.r = r;

	mov	eax, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _r$[ebp]
	fstp	DWORD PTR [eax+16]
	mov	ecx, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _r$[ebp]
	fstp	DWORD PTR [ecx]

; 29   :     mtrl.Diffuse.g = mtrl.Ambient.g = g;

	mov	eax, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _g$[ebp]
	fstp	DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _g$[ebp]
	fstp	DWORD PTR [ecx+4]

; 30   :     mtrl.Diffuse.b = mtrl.Ambient.b = b;

	mov	eax, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _b$[ebp]
	fstp	DWORD PTR [eax+24]
	mov	ecx, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _b$[ebp]
	fstp	DWORD PTR [ecx+8]

; 31   :     mtrl.Diffuse.a = mtrl.Ambient.a = a;

	mov	eax, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _mtrl$[ebp]
	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR [ecx+12]

; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z ENDP	; D3DUtil_InitMaterial
_TEXT	ENDS
PUBLIC	__real@447a0000
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	__real@3f800000
PUBLIC	?D3DUtil_InitLight@@YAXAAU_D3DLIGHT8@@W4_D3DLIGHTTYPE@@MMM@Z ; D3DUtil_InitLight
EXTRN	_D3DXVec3Normalize@8:PROC
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?D3DUtil_InitLight@@YAXAAU_D3DLIGHT8@@W4_D3DLIGHTTYPE@@MMM@Z
_TEXT	SEGMENT
$T95768 = -208						; size = 12
_light$ = 8						; size = 4
_ltType$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
?D3DUtil_InitLight@@YAXAAU_D3DLIGHT8@@W4_D3DLIGHTTYPE@@MMM@Z PROC ; D3DUtil_InitLight, COMDAT

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 45   :     ZeroMemory( &light, sizeof(D3DLIGHT8) );

	push	104					; 00000068H
	push	0
	mov	eax, DWORD PTR _light$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 46   :     light.Type        = ltType;

	mov	eax, DWORD PTR _light$[ebp]
	mov	ecx, DWORD PTR _ltType$[ebp]
	mov	DWORD PTR [eax], ecx

; 47   :     light.Diffuse.r   = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	fld1
	fstp	DWORD PTR [eax+4]

; 48   :     light.Diffuse.g   = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	fld1
	fstp	DWORD PTR [eax+8]

; 49   :     light.Diffuse.b   = 1.0f;

	mov	eax, DWORD PTR _light$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 50   :     D3DXVec3Normalize( (D3DXVECTOR3*)&light.Direction, &D3DXVECTOR3(x, y, z) );

	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95768[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	mov	eax, DWORD PTR _light$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	call	_D3DXVec3Normalize@8

; 51   :     light.Position.x   = x;

	mov	eax, DWORD PTR _light$[ebp]
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [eax+52]

; 52   :     light.Position.y   = y;

	mov	eax, DWORD PTR _light$[ebp]
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [eax+56]

; 53   :     light.Position.z   = z;

	mov	eax, DWORD PTR _light$[ebp]
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [eax+60]

; 54   :     light.Range        = 1000.0f;

	mov	eax, DWORD PTR _light$[ebp]
	fld	DWORD PTR __real@447a0000
	fstp	DWORD PTR [eax+76]

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DUtil_InitLight@@YAXAAU_D3DLIGHT8@@W4_D3DLIGHTTYPE@@MMM@Z ENDP ; D3DUtil_InitLight
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]

; 181  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]

; 182  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]

; 183  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice8@@PADPAPAUIDirect3DTexture8@@W4_D3DFORMAT@@@Z ; D3DUtil_CreateTexture
EXTRN	_D3DXCreateTextureFromFileExA@56:PROC
EXTRN	?DXUtil_FindMediaFile@@YAJPAD0@Z:PROC		; DXUtil_FindMediaFile
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
;	COMDAT ?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice8@@PADPAPAUIDirect3DTexture8@@W4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_strPath$ = -268					; size = 260
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_strTexture$ = 12					; size = 4
_ppTexture$ = 16					; size = 4
_d3dFormat$ = 20					; size = 4
?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice8@@PADPAPAUIDirect3DTexture8@@W4_D3DFORMAT@@@Z PROC ; D3DUtil_CreateTexture, COMDAT

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 464				; 000001d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-464]
	mov	ecx, 116				; 00000074H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 68   :     // Get the path to the texture
; 69   :     TCHAR strPath[MAX_PATH];
; 70   :     DXUtil_FindMediaFile( strPath, strTexture );

	mov	eax, DWORD PTR _strTexture$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUtil_FindMediaFile@@YAJPAD0@Z	; DXUtil_FindMediaFile
	add	esp, 8

; 71   : 
; 72   :     // Create the texture using D3DX
; 73   :     return D3DXCreateTextureFromFileEx( pd3dDevice, strPath, 
; 74   :                 D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, d3dFormat, 
; 75   :                 D3DPOOL_MANAGED, D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 
; 76   :                 D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 0, NULL, NULL, ppTexture );

	mov	eax, DWORD PTR _ppTexture$[ebp]
	push	eax
	push	0
	push	0
	push	0
	push	458756					; 00070004H
	push	458756					; 00070004H
	push	1
	mov	ecx, DWORD PTR _d3dFormat$[ebp]
	push	ecx
	push	0
	push	-1
	push	-1
	push	-1
	lea	edx, DWORD PTR _strPath$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	push	eax
	call	_D3DXCreateTextureFromFileExA@56

; 77   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@D3DUtil_Cr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 464				; 000001d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@D3DUtil_Cr:
	DD	1
	DD	$LN4@D3DUtil_Cr
$LN4@D3DUtil_Cr:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN3@D3DUtil_Cr
$LN3@D3DUtil_Cr:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice8@@PADPAPAUIDirect3DTexture8@@W4_D3DFORMAT@@@Z ENDP ; D3DUtil_CreateTexture
_TEXT	ENDS
PUBLIC	?D3DUtil_SetColorKey@@YAJPAUIDirect3DTexture8@@K@Z ; D3DUtil_SetColorKey
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?D3DUtil_SetColorKey@@YAJPAUIDirect3DTexture8@@K@Z
_TEXT	SEGMENT
_x$95338 = -112						; size = 4
_y$95334 = -100						; size = 4
_d3dlr$ = -88						; size = 8
_d3dsd$ = -72						; size = 32
_b$ = -32						; size = 4
_g$ = -20						; size = 4
_r$ = -8						; size = 4
_pTexture$ = 8						; size = 4
_dwColorKey$ = 12					; size = 4
?D3DUtil_SetColorKey@@YAJPAUIDirect3DTexture8@@K@Z PROC	; D3DUtil_SetColorKey, COMDAT

; 87   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 88   :     // Get colorkey's red, green, and blue components
; 89   :     DWORD r = ((dwColorKey&0x00ff0000)>>16);

	mov	eax, DWORD PTR _dwColorKey$[ebp]
	and	eax, 16711680				; 00ff0000H
	shr	eax, 16					; 00000010H
	mov	DWORD PTR _r$[ebp], eax

; 90   :     DWORD g = ((dwColorKey&0x0000ff00)>>8);

	mov	eax, DWORD PTR _dwColorKey$[ebp]
	and	eax, 65280				; 0000ff00H
	shr	eax, 8
	mov	DWORD PTR _g$[ebp], eax

; 91   :     DWORD b = ((dwColorKey&0x000000ff)>>0);

	mov	eax, DWORD PTR _dwColorKey$[ebp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _b$[ebp], eax

; 92   : 
; 93   :     // Put the colorkey in the texture's native format
; 94   :     D3DSURFACE_DESC d3dsd;
; 95   :     pTexture->GetLevelDesc( 0, &d3dsd );

	mov	esi, esp
	lea	eax, DWORD PTR _d3dsd$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+56]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 96   :     if( d3dsd.Format == D3DFMT_A4R4G4B4 )

	cmp	DWORD PTR _d3dsd$[ebp], 26		; 0000001aH
	jne	SHORT $LN16@D3DUtil_Se

; 97   :         dwColorKey = 0xf000 + ((r>>4)<<8) + ((g>>4)<<4) + (b>>4);

	mov	eax, DWORD PTR _r$[ebp]
	shr	eax, 4
	shl	eax, 8
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 4
	shl	ecx, 4
	lea	edx, DWORD PTR [eax+ecx+61440]
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 4
	add	edx, eax
	mov	DWORD PTR _dwColorKey$[ebp], edx
	jmp	SHORT $LN15@D3DUtil_Se
$LN16@D3DUtil_Se:

; 98   :     else if( d3dsd.Format == D3DFMT_A1R5G5B5 )

	cmp	DWORD PTR _d3dsd$[ebp], 25		; 00000019H
	jne	SHORT $LN14@D3DUtil_Se

; 99   :         dwColorKey = 0x8000 + ((r>>3)<<10) + ((g>>3)<<5) + (b>>3);

	mov	eax, DWORD PTR _r$[ebp]
	shr	eax, 3
	shl	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR _g$[ebp]
	shr	ecx, 3
	shl	ecx, 5
	lea	edx, DWORD PTR [eax+ecx+32768]
	mov	eax, DWORD PTR _b$[ebp]
	shr	eax, 3
	add	edx, eax
	mov	DWORD PTR _dwColorKey$[ebp], edx
	jmp	SHORT $LN15@D3DUtil_Se
$LN14@D3DUtil_Se:

; 100  :     else if( d3dsd.Format != D3DFMT_A8R8G8B8 )

	cmp	DWORD PTR _d3dsd$[ebp], 21		; 00000015H
	je	SHORT $LN15@D3DUtil_Se

; 101  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN17@D3DUtil_Se
$LN15@D3DUtil_Se:

; 102  : 
; 103  :     // Lock the texture
; 104  :     D3DLOCKED_RECT  d3dlr;
; 105  :     if( FAILED( pTexture->LockRect( 0, &d3dlr, 0, 0 ) ) )

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _d3dlr$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _pTexture$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN11@D3DUtil_Se

; 106  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN17@D3DUtil_Se
$LN11@D3DUtil_Se:

; 107  : 
; 108  :     // Scan through each pixel, looking for the colorkey to replace
; 109  :     for( DWORD y=0; y<d3dsd.Height; y++ )

	mov	DWORD PTR _y$95334[ebp], 0
	jmp	SHORT $LN10@D3DUtil_Se
$LN9@D3DUtil_Se:
	mov	eax, DWORD PTR _y$95334[ebp]
	add	eax, 1
	mov	DWORD PTR _y$95334[ebp], eax
$LN10@D3DUtil_Se:
	mov	eax, DWORD PTR _y$95334[ebp]
	cmp	eax, DWORD PTR _d3dsd$[ebp+28]
	jae	SHORT $LN8@D3DUtil_Se

; 110  :     {
; 111  :         for( DWORD x=0; x<d3dsd.Width; x++ )

	mov	DWORD PTR _x$95338[ebp], 0
	jmp	SHORT $LN7@D3DUtil_Se
$LN6@D3DUtil_Se:
	mov	eax, DWORD PTR _x$95338[ebp]
	add	eax, 1
	mov	DWORD PTR _x$95338[ebp], eax
$LN7@D3DUtil_Se:
	mov	eax, DWORD PTR _x$95338[ebp]
	cmp	eax, DWORD PTR _d3dsd$[ebp+24]
	jae	SHORT $LN5@D3DUtil_Se

; 112  :         {
; 113  :             if( d3dsd.Format==D3DFMT_A8R8G8B8 )

	cmp	DWORD PTR _d3dsd$[ebp], 21		; 00000015H
	jne	SHORT $LN4@D3DUtil_Se

; 114  :             {
; 115  :                 // Handle 32-bit formats
; 116  :                 if( ((DWORD*)d3dlr.pBits)[d3dsd.Width*y+x] == dwColorKey )

	mov	eax, DWORD PTR _d3dsd$[ebp+24]
	imul	eax, DWORD PTR _y$95334[ebp]
	add	eax, DWORD PTR _x$95338[ebp]
	mov	ecx, DWORD PTR _d3dlr$[ebp+4]
	mov	edx, DWORD PTR [ecx+eax*4]
	cmp	edx, DWORD PTR _dwColorKey$[ebp]
	jne	SHORT $LN3@D3DUtil_Se

; 117  :                     ((DWORD*)d3dlr.pBits)[d3dsd.Width*y+x] = 0x00000000;

	mov	eax, DWORD PTR _d3dsd$[ebp+24]
	imul	eax, DWORD PTR _y$95334[ebp]
	add	eax, DWORD PTR _x$95338[ebp]
	mov	ecx, DWORD PTR _d3dlr$[ebp+4]
	mov	DWORD PTR [ecx+eax*4], 0
$LN3@D3DUtil_Se:

; 118  :             }
; 119  :             else

	jmp	SHORT $LN2@D3DUtil_Se
$LN4@D3DUtil_Se:

; 120  :             {
; 121  :                 // Handle 16-bit formats
; 122  :                 if( ((WORD*)d3dlr.pBits)[d3dsd.Width*y+x] == dwColorKey )

	mov	eax, DWORD PTR _d3dsd$[ebp+24]
	imul	eax, DWORD PTR _y$95334[ebp]
	add	eax, DWORD PTR _x$95338[ebp]
	mov	ecx, DWORD PTR _d3dlr$[ebp+4]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, DWORD PTR _dwColorKey$[ebp]
	jne	SHORT $LN2@D3DUtil_Se

; 123  :                     ((WORD*)d3dlr.pBits)[d3dsd.Width*y+x] = 0x0000;

	mov	eax, DWORD PTR _d3dsd$[ebp+24]
	imul	eax, DWORD PTR _y$95334[ebp]
	add	eax, DWORD PTR _x$95338[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _d3dlr$[ebp+4]
	mov	WORD PTR [edx+eax*2], cx
$LN2@D3DUtil_Se:

; 124  :             }
; 125  :         }

	jmp	SHORT $LN6@D3DUtil_Se
$LN5@D3DUtil_Se:

; 126  :     }

	jmp	$LN9@D3DUtil_Se
$LN8@D3DUtil_Se:

; 127  : 
; 128  :     // Unlock the texture and return OK.
; 129  :     pTexture->UnlockRect(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pTexture$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pTexture$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+68]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  :     return S_OK;

	xor	eax, eax
$LN17@D3DUtil_Se:

; 131  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@D3DUtil_Se
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN22@D3DUtil_Se:
	DD	2
	DD	$LN21@D3DUtil_Se
$LN21@D3DUtil_Se:
	DD	-72					; ffffffb8H
	DD	32					; 00000020H
	DD	$LN19@D3DUtil_Se
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN20@D3DUtil_Se
$LN20@D3DUtil_Se:
	DB	100					; 00000064H
	DB	51					; 00000033H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	0
$LN19@D3DUtil_Se:
	DB	100					; 00000064H
	DB	51					; 00000033H
	DB	100					; 00000064H
	DB	115					; 00000073H
	DB	100					; 00000064H
	DB	0
?D3DUtil_SetColorKey@@YAJPAUIDirect3DTexture8@@K@Z ENDP	; D3DUtil_SetColorKey
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?D3DUtil_CreateVertexShader@@YAJPAUIDirect3DDevice8@@PADPAK2@Z ; D3DUtil_CreateVertexShader
EXTRN	_D3DXAssembleShaderFromFileA@20:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?D3DUtil_CreateVertexShader@@YAJPAUIDirect3DDevice8@@PADPAK2@Z
_TEXT	SEGMENT
_hr$ = -292						; size = 4
_strPath$ = -280					; size = 260
_pCode$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_strFilename$ = 12					; size = 4
_pdwVertexDecl$ = 16					; size = 4
_pdwVertexShader$ = 20					; size = 4
?D3DUtil_CreateVertexShader@@YAJPAUIDirect3DDevice8@@PADPAK2@Z PROC ; D3DUtil_CreateVertexShader, COMDAT

; 143  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 488				; 000001e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-488]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 144  :     LPD3DXBUFFER pCode;
; 145  :     TCHAR        strPath[MAX_PATH];
; 146  :     HRESULT      hr;
; 147  : 
; 148  :     // Get the path to the vertex shader file
; 149  :     DXUtil_FindMediaFile( strPath, strFilename );

	mov	eax, DWORD PTR _strFilename$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	?DXUtil_FindMediaFile@@YAJPAD0@Z	; DXUtil_FindMediaFile
	add	esp, 8

; 150  : 
; 151  :     // Assemble the vertex shader file
; 152  :     if( FAILED( hr = D3DXAssembleShaderFromFile( strPath, 0, NULL, &pCode, NULL ) ) )

	push	0
	lea	eax, DWORD PTR _pCode$[ebp]
	push	eax
	push	0
	push	0
	lea	ecx, DWORD PTR _strPath$[ebp]
	push	ecx
	call	_D3DXAssembleShaderFromFileA@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@D3DUtil_Cr@2

; 153  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN2@D3DUtil_Cr@2
$LN1@D3DUtil_Cr@2:

; 154  : 
; 155  :     // Create the vertex shader
; 156  :     hr = pd3dDevice->CreateVertexShader( pdwVertexDecl, 
; 157  :                                          (DWORD*)pCode->GetBufferPointer(),
; 158  :                                          pdwVertexShader, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _pdwVertexShader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	edi, esp
	mov	eax, DWORD PTR _pCode$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	mov	edx, DWORD PTR _pdwVertexDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+300]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 159  :     pCode->Release();

	mov	eax, DWORD PTR _pCode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pCode$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 160  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]
$LN2@D3DUtil_Cr@2:

; 161  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@D3DUtil_Cr@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 488				; 000001e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN7@D3DUtil_Cr@2:
	DD	2
	DD	$LN6@D3DUtil_Cr@2
$LN6@D3DUtil_Cr@2:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@D3DUtil_Cr@2
	DD	-280					; fffffee8H
	DD	260					; 00000104H
	DD	$LN5@D3DUtil_Cr@2
$LN5@D3DUtil_Cr@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
$LN4@D3DUtil_Cr@2:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?D3DUtil_CreateVertexShader@@YAJPAUIDirect3DDevice8@@PADPAK2@Z ENDP ; D3DUtil_CreateVertexShader
_TEXT	ENDS
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
PUBLIC	__real@bf800000
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	__real@00000000
PUBLIC	?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z ; D3DUtil_GetCubeMapViewMatrix
EXTRN	_D3DXMatrixLookAtLH@16:PROC
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z
_TEXT	SEGMENT
tv70 = -568						; size = 4
$T95799 = -560						; size = 12
$T95800 = -540						; size = 12
$T95801 = -520						; size = 12
$T95802 = -500						; size = 12
$T95803 = -480						; size = 12
$T95804 = -460						; size = 12
$T95805 = -440						; size = 12
$T95806 = -420						; size = 12
$T95807 = -400						; size = 12
$T95808 = -380						; size = 12
$T95809 = -360						; size = 12
$T95810 = -340						; size = 12
_matView$ = -128					; size = 64
_vUpDir$ = -56						; size = 12
_vLookDir$ = -36					; size = 12
_vEyePt$ = -16						; size = 12
___$ReturnUdt$ = 8					; size = 4
_dwFace$ = 12						; size = 4
?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z PROC ; D3DUtil_GetCubeMapViewMatrix, COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 568				; 00000238H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-568]
	mov	ecx, 142				; 0000008eH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 172  :     D3DXVECTOR3 vEyePt   = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _vEyePt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 173  :     D3DXVECTOR3 vLookDir;

	lea	ecx, DWORD PTR _vLookDir$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 174  :     D3DXVECTOR3 vUpDir;

	lea	ecx, DWORD PTR _vUpDir$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 175  : 
; 176  :     switch( dwFace )

	mov	eax, DWORD PTR _dwFace$[ebp]
	mov	DWORD PTR tv70[ebp], eax
	cmp	DWORD PTR tv70[ebp], 5
	ja	$LN7@D3DUtil_Ge
	mov	ecx, DWORD PTR tv70[ebp]
	jmp	DWORD PTR $LN17@D3DUtil_Ge[ecx*4]
$LN6@D3DUtil_Ge:

; 177  :     {
; 178  :         case D3DCUBEMAP_FACE_POSITIVE_X:
; 179  :             vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95799[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 180  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95800[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 181  :             break;

	jmp	$LN7@D3DUtil_Ge
$LN5@D3DUtil_Ge:

; 182  :         case D3DCUBEMAP_FACE_NEGATIVE_X:
; 183  :             vLookDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95801[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 184  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95802[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 185  :             break;

	jmp	$LN7@D3DUtil_Ge
$LN4@D3DUtil_Ge:

; 186  :         case D3DCUBEMAP_FACE_POSITIVE_Y:
; 187  :             vLookDir = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95803[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 188  :             vUpDir   = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );

	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95804[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 189  :             break;

	jmp	$LN7@D3DUtil_Ge
$LN3@D3DUtil_Ge:

; 190  :         case D3DCUBEMAP_FACE_NEGATIVE_Y:
; 191  :             vLookDir = D3DXVECTOR3( 0.0f,-1.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95805[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 192  :             vUpDir   = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95806[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 193  :             break;

	jmp	$LN7@D3DUtil_Ge
$LN2@D3DUtil_Ge:

; 194  :         case D3DCUBEMAP_FACE_POSITIVE_Z:
; 195  :             vLookDir = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95807[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 196  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95808[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax

; 197  :             break;

	jmp	SHORT $LN7@D3DUtil_Ge
$LN1@D3DUtil_Ge:

; 198  :         case D3DCUBEMAP_FACE_NEGATIVE_Z:
; 199  :             vLookDir = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );

	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95809[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vLookDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vLookDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vLookDir$[ebp+8], eax

; 200  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95810[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _vUpDir$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _vUpDir$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _vUpDir$[ebp+8], eax
$LN7@D3DUtil_Ge:

; 201  :             break;
; 202  :     }
; 203  : 
; 204  :     // Set the view transform for this cubemap surface
; 205  :     D3DXMATRIX matView;

	lea	ecx, DWORD PTR _matView$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 206  :     D3DXMatrixLookAtLH( &matView, &vEyePt, &vLookDir, &vUpDir );

	lea	eax, DWORD PTR _vUpDir$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vLookDir$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vEyePt$[ebp]
	push	edx
	lea	eax, DWORD PTR _matView$[ebp]
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 207  :     return matView;

	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matView$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 208  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@D3DUtil_Ge
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 568				; 00000238H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN16@D3DUtil_Ge:
	DD	4
	DD	$LN15@D3DUtil_Ge
$LN15@D3DUtil_Ge:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN11@D3DUtil_Ge
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN12@D3DUtil_Ge
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN13@D3DUtil_Ge
	DD	-128					; ffffff80H
	DD	64					; 00000040H
	DD	$LN14@D3DUtil_Ge
$LN14@D3DUtil_Ge:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
$LN13@D3DUtil_Ge:
	DB	118					; 00000076H
	DB	85					; 00000055H
	DB	112					; 00000070H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN12@D3DUtil_Ge:
	DB	118					; 00000076H
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN11@D3DUtil_Ge:
	DB	118					; 00000076H
	DB	69					; 00000045H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	80					; 00000050H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN17@D3DUtil_Ge:
	DD	$LN6@D3DUtil_Ge
	DD	$LN5@D3DUtil_Ge
	DD	$LN4@D3DUtil_Ge
	DD	$LN3@D3DUtil_Ge
	DD	$LN2@D3DUtil_Ge
	DD	$LN1@D3DUtil_Ge
?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z ENDP ; D3DUtil_GetCubeMapViewMatrix
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.h
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 177  :     D3DXMATRIX() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	_asinf
PUBLIC	__real@bff0000000000000
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
PUBLIC	__real@3fe6a09e667f3bcd
PUBLIC	_sqrtf
PUBLIC	??0D3DXQUATERNION@@QAE@MMMM@Z			; D3DXQUATERNION::D3DXQUATERNION
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z ; D3DUtil_GetRotationFromCursor
EXTRN	_D3DXQuaternionRotationAxis@12:PROC
EXTRN	__imp__ScreenToClient@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__GetCursorPos@4:PROC
;	COMDAT __real@bff0000000000000
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT __real@3fe6a09e667f3bcd
CONST	SEGMENT
__real@3fe6a09e667f3bcd DQ 03fe6a09e667f3bcdr	; 0.707107
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z
_TEXT	SEGMENT
tv257 = -424						; size = 4
tv249 = -424						; size = 4
tv228 = -424						; size = 4
tv219 = -424						; size = 4
$T95828 = -416						; size = 12
_quat$ = -204						; size = 16
_fAngle$ = -180						; size = 4
_t$ = -168						; size = 4
_vAxis$ = -156						; size = 12
_p2$ = -136						; size = 12
_p1$ = -116						; size = 12
_d2$ = -96						; size = 4
_d1$ = -84						; size = 4
_sz$ = -72						; size = 4
_sy$ = -60						; size = 4
_sx$ = -48						; size = 4
_rc$ = -36						; size = 16
_pt$ = -12						; size = 8
___$ReturnUdt$ = 8					; size = 4
_hWnd$ = 12						; size = 4
_fTrackBallRadius$ = 16					; size = 4
?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z PROC ; D3DUtil_GetRotationFromCursor, COMDAT

; 220  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 424				; 000001a8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-424]
	mov	ecx, 106				; 0000006aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 221  :     POINT pt;
; 222  :     RECT  rc;
; 223  :     GetCursorPos( &pt );

	mov	esi, esp
	lea	eax, DWORD PTR _pt$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  :     GetClientRect( hWnd, &rc );

	mov	esi, esp
	lea	eax, DWORD PTR _rc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetClientRect@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 225  :     ScreenToClient( hWnd, &pt );

	mov	esi, esp
	lea	eax, DWORD PTR _pt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hWnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__ScreenToClient@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 226  :     FLOAT sx = ( ( ( 2.0f * pt.x ) / (rc.right-rc.left) ) - 1 );

	fild	DWORD PTR _pt$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _rc$[ebp+8]
	sub	eax, DWORD PTR _rc$[ebp]
	mov	DWORD PTR tv219[ebp], eax
	fidiv	DWORD PTR tv219[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _sx$[ebp]

; 227  :     FLOAT sy = ( ( ( 2.0f * pt.y ) / (rc.bottom-rc.top) ) - 1 );

	fild	DWORD PTR _pt$[ebp+4]
	fmul	QWORD PTR __real@4000000000000000
	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR tv228[ebp], eax
	fidiv	DWORD PTR tv228[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR _sy$[ebp]

; 228  :     FLOAT sz;
; 229  : 
; 230  :     if( sx == 0.0f && sy == 0.0f )

	fld	DWORD PTR _sx$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@D3DUtil_Ge@2
	fld	DWORD PTR _sy$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jp	SHORT $LN5@D3DUtil_Ge@2

; 231  :         return D3DXQUATERNION( 0.0f, 0.0f, 0.0f, 1.0f );

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXQUATERNION@@QAE@MMMM@Z		; D3DXQUATERNION::D3DXQUATERNION
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN6@D3DUtil_Ge@2
$LN5@D3DUtil_Ge@2:

; 232  : 
; 233  :     FLOAT d1 = 0.0f;

	fldz
	fstp	DWORD PTR _d1$[ebp]

; 234  :     FLOAT d2 = sqrtf( sx*sx + sy*sy );

	fld	DWORD PTR _sx$[ebp]
	fmul	DWORD PTR _sx$[ebp]
	fld	DWORD PTR _sy$[ebp]
	fmul	DWORD PTR _sy$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv249[ebp]
	fld	DWORD PTR tv249[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _d2$[ebp]

; 235  : 
; 236  :     if( d2 < fTrackBallRadius * 0.70710678118654752440 ) // Inside sphere

	fld	DWORD PTR _d2$[ebp]
	fld	DWORD PTR _fTrackBallRadius$[ebp]
	fmul	QWORD PTR __real@3fe6a09e667f3bcd
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@D3DUtil_Ge@2

; 237  :         sz = sqrtf( fTrackBallRadius*fTrackBallRadius - d2*d2 );

	fld	DWORD PTR _fTrackBallRadius$[ebp]
	fmul	DWORD PTR _fTrackBallRadius$[ebp]
	fld	DWORD PTR _d2$[ebp]
	fmul	DWORD PTR _d2$[ebp]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR tv257[ebp]
	fld	DWORD PTR tv257[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _sz$[ebp]

; 238  :     else                                                 // On hyperbola

	jmp	SHORT $LN3@D3DUtil_Ge@2
$LN4@D3DUtil_Ge@2:

; 239  :         sz = (fTrackBallRadius*fTrackBallRadius) / (2.0f*d2);

	fld	DWORD PTR _fTrackBallRadius$[ebp]
	fmul	DWORD PTR _fTrackBallRadius$[ebp]
	fld	DWORD PTR _d2$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _sz$[ebp]
$LN3@D3DUtil_Ge@2:

; 240  : 
; 241  :     // Get two points on trackball's sphere
; 242  :     D3DXVECTOR3 p1( sx, sy, sz );

	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sy$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sx$[ebp]
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _p1$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 243  :     D3DXVECTOR3 p2( 0.0f, 0.0f, fTrackBallRadius );

	push	ecx
	fld	DWORD PTR _fTrackBallRadius$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _p2$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3

; 244  : 
; 245  :     // Get axis of rotation, which is cross product of p1 and p2
; 246  :     D3DXVECTOR3 vAxis;

	lea	ecx, DWORD PTR _vAxis$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 247  :     D3DXVec3Cross( &vAxis, &p1, &p2);

	lea	eax, DWORD PTR _p2$[ebp]
	push	eax
	lea	ecx, DWORD PTR _p1$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vAxis$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 248  : 
; 249  :     // Calculate angle for the rotation about that axis
; 250  :     FLOAT t = D3DXVec3Length( &(p2-p1) ) / ( 2.0f*fTrackBallRadius );

	lea	eax, DWORD PTR _p1$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T95828[ebp]
	push	ecx
	lea	ecx, DWORD PTR _p2$[ebp]
	call	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z		; D3DXVECTOR3::operator-
	push	eax
	call	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z	; D3DXVec3Length
	add	esp, 4
	fld	DWORD PTR _fTrackBallRadius$[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _t$[ebp]

; 251  :     if( t > +1.0f) t = +1.0f;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@D3DUtil_Ge@2
	fld1
	fstp	DWORD PTR _t$[ebp]
$LN2@D3DUtil_Ge@2:

; 252  :     if( t < -1.0f) t = -1.0f;

	fld	DWORD PTR _t$[ebp]
	fcomp	QWORD PTR __real@bff0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@D3DUtil_Ge@2
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR _t$[ebp]
$LN1@D3DUtil_Ge@2:

; 253  :     FLOAT fAngle = 2.0f * asinf( t );

	push	ecx
	fld	DWORD PTR _t$[ebp]
	fstp	DWORD PTR [esp]
	call	_asinf
	add	esp, 4
	fmul	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _fAngle$[ebp]

; 254  : 
; 255  :     // Convert axis to quaternion
; 256  :     D3DXQUATERNION quat;

	lea	ecx, DWORD PTR _quat$[ebp]
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION

; 257  :     D3DXQuaternionRotationAxis( &quat, &vAxis, fAngle );

	push	ecx
	fld	DWORD PTR _fAngle$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _vAxis$[ebp]
	push	eax
	lea	ecx, DWORD PTR _quat$[ebp]
	push	ecx
	call	_D3DXQuaternionRotationAxis@12

; 258  :     return quat;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _quat$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _quat$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _quat$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _quat$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN6@D3DUtil_Ge@2:

; 259  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@D3DUtil_Ge@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 424				; 000001a8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN15@D3DUtil_Ge@2:
	DD	6
	DD	$LN14@D3DUtil_Ge@2
$LN14@D3DUtil_Ge@2:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN8@D3DUtil_Ge@2
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN9@D3DUtil_Ge@2
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN10@D3DUtil_Ge@2
	DD	-136					; ffffff78H
	DD	12					; 0000000cH
	DD	$LN11@D3DUtil_Ge@2
	DD	-156					; ffffff64H
	DD	12					; 0000000cH
	DD	$LN12@D3DUtil_Ge@2
	DD	-204					; ffffff34H
	DD	16					; 00000010H
	DD	$LN13@D3DUtil_Ge@2
$LN13@D3DUtil_Ge@2:
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	0
$LN12@D3DUtil_Ge@2:
	DB	118					; 00000076H
	DB	65					; 00000041H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN11@D3DUtil_Ge@2:
	DB	112					; 00000070H
	DB	50					; 00000032H
	DB	0
$LN10@D3DUtil_Ge@2:
	DB	112					; 00000070H
	DB	49					; 00000031H
	DB	0
$LN9@D3DUtil_Ge@2:
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN8@D3DUtil_Ge@2:
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	0
?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z ENDP ; D3DUtil_GetRotationFromCursor
_TEXT	ENDS
EXTRN	_asin:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_asinf	PROC						; COMDAT

; 391  :         {return ((float)asin((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_asin
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_asinf	ENDP
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.h
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXQUATERNION@@QAE@XZ PROC				; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 332  :     D3DXQUATERNION() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
tv150 = -216						; size = 4
tv147 = -212						; size = 4
tv144 = -208						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv144[ebp]
	fld	DWORD PTR tv144[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [eax+4]
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	fsub	DWORD PTR [edx]
	fstp	DWORD PTR tv150[ebp]
	fld	DWORD PTR tv150[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 264  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXQUATERNION@@QAE@MMMM@Z PROC			; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 667  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]

; 668  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]

; 669  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]

; 670  :     w = fw;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fw$[ebp]
	fstp	DWORD PTR [eax+12]

; 671  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0D3DXQUATERNION@@QAE@MMMM@Z ENDP			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
tv146 = -196						; size = 4
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC		; D3DXVec3Length, COMDAT

; 1232 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1233 : #ifdef D3DX_DEBUG
; 1234 :     if(!pV)
; 1235 :         return 0.0f;
; 1236 : #endif
; 1237 : 
; 1238 : #ifdef __cplusplus
; 1239 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

	mov	eax, DWORD PTR _pV$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pV$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pV$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pV$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pV$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv146[ebp]
	fld	DWORD PTR tv146[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4

; 1240 : #else
; 1241 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
; 1242 : #endif
; 1243 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -16						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC	; D3DXVec3Cross, COMDAT

; 1269 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1270 :     D3DXVECTOR3 v;

	lea	ecx, DWORD PTR _v$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 1271 : 
; 1272 : #ifdef D3DX_DEBUG
; 1273 :     if(!pOut || !pV1 || !pV2)
; 1274 :         return NULL;
; 1275 : #endif
; 1276 : 
; 1277 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

	mov	eax, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [edx+8]
	mov	eax, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [eax+4]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _v$[ebp]

; 1278 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;

	mov	eax, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [edx]
	mov	eax, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [eax+8]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _v$[ebp+4]

; 1279 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;

	mov	eax, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [eax]
	fsubp	ST(1), ST(0)
	fstp	DWORD PTR _v$[ebp+8]

; 1280 : 
; 1281 :     *pOut = v;

	mov	eax, DWORD PTR _pOut$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _v$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _v$[ebp+8]
	mov	DWORD PTR [eax+8], ecx

; 1282 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1283 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@D3DXVec3Cr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@D3DXVec3Cr:
	DD	1
	DD	$LN4@D3DXVec3Cr
$LN4@D3DXVec3Cr:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@D3DXVec3Cr
$LN3@D3DXVec3Cr:
	DB	118					; 00000076H
	DB	0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice8@@PAUHICON__@@H@Z ; D3DUtil_SetDeviceCursor
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetDIBits@28:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp__GetIconInfo@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
;	COMDAT ?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice8@@PAUHICON__@@H@Z
_TEXT	SEGMENT
$T95867 = -592						; size = 4
$T95868 = -580						; size = 4
$T95869 = -568						; size = 4
$T95870 = -556						; size = 4
_wMask$95482 = -352					; size = 10
_lr$ = -332						; size = 8
_hgdiobjOld$ = -316					; size = 4
_pBitmap$ = -304					; size = 4
_pcrArrayMask$ = -292					; size = 4
_pcrArrayColor$ = -280					; size = 4
_bmi$ = -268						; size = 44
_y$ = -216						; size = 4
_x$ = -204						; size = 4
_crMask$ = -192						; size = 4
_crColor$ = -180					; size = 4
_dwHeightDest$ = -168					; size = 4
_dwHeightSrc$ = -156					; size = 4
_dwWidth$ = -144					; size = 4
_bm$ = -132						; size = 24
_hdcScreen$ = -100					; size = 4
_hdcMask$ = -88						; size = 4
_hdcColor$ = -76					; size = 4
_pCursorBitmap$ = -64					; size = 4
_bBWCursor$ = -52					; size = 4
_iconinfo$ = -40					; size = 20
_hr$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pd3dDevice$ = 8					; size = 4
_hCursor$ = 12						; size = 4
_bAddWatermark$ = 16					; size = 4
?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice8@@PAUHICON__@@H@Z PROC ; D3DUtil_SetDeviceCursor, COMDAT

; 270  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-596]
	mov	ecx, 149				; 00000095H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 271  :     HRESULT hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H

; 272  :     ICONINFO iconinfo;
; 273  :     BOOL bBWCursor;
; 274  :     LPDIRECT3DSURFACE8 pCursorBitmap = NULL;

	mov	DWORD PTR _pCursorBitmap$[ebp], 0

; 275  :     HDC hdcColor = NULL;

	mov	DWORD PTR _hdcColor$[ebp], 0

; 276  :     HDC hdcMask = NULL;

	mov	DWORD PTR _hdcMask$[ebp], 0

; 277  :     HDC hdcScreen = NULL;

	mov	DWORD PTR _hdcScreen$[ebp], 0

; 278  :     BITMAP bm;
; 279  :     DWORD dwWidth;
; 280  :     DWORD dwHeightSrc;
; 281  :     DWORD dwHeightDest;
; 282  :     COLORREF crColor;
; 283  :     COLORREF crMask;
; 284  :     UINT x;
; 285  :     UINT y;
; 286  :     BITMAPINFO bmi;
; 287  :     COLORREF* pcrArrayColor = NULL;

	mov	DWORD PTR _pcrArrayColor$[ebp], 0

; 288  :     COLORREF* pcrArrayMask = NULL;

	mov	DWORD PTR _pcrArrayMask$[ebp], 0

; 289  :     DWORD* pBitmap;
; 290  :     HGDIOBJ hgdiobjOld;
; 291  : 
; 292  :     ZeroMemory( &iconinfo, sizeof(iconinfo) );

	push	20					; 00000014H
	push	0
	lea	eax, DWORD PTR _iconinfo$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 293  :     if( !GetIconInfo( hCursor, &iconinfo ) )

	mov	esi, esp
	lea	eax, DWORD PTR _iconinfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hCursor$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetIconInfo@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN35@D3DUtil_Se@2
	jmp	$End$95446

; 294  :         goto End;

	jmp	$End$95446
$LN35@D3DUtil_Se@2:

; 295  : 
; 296  :     if (0 == GetObject((HGDIOBJ)iconinfo.hbmMask, sizeof(BITMAP), (LPVOID)&bm))

	mov	esi, esp
	lea	eax, DWORD PTR _bm$[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR _iconinfo$[ebp+12]
	push	ecx
	call	DWORD PTR __imp__GetObjectA@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN33@D3DUtil_Se@2
	jmp	$End$95446

; 297  :         goto End;

	jmp	$End$95446
$LN33@D3DUtil_Se@2:

; 298  :     dwWidth = bm.bmWidth;

	mov	eax, DWORD PTR _bm$[ebp+4]
	mov	DWORD PTR _dwWidth$[ebp], eax

; 299  :     dwHeightSrc = bm.bmHeight;

	mov	eax, DWORD PTR _bm$[ebp+8]
	mov	DWORD PTR _dwHeightSrc$[ebp], eax

; 300  : 
; 301  :     if( iconinfo.hbmColor == NULL )

	cmp	DWORD PTR _iconinfo$[ebp+16], 0
	jne	SHORT $LN31@D3DUtil_Se@2

; 302  :     {
; 303  :         bBWCursor = TRUE;

	mov	DWORD PTR _bBWCursor$[ebp], 1

; 304  :         dwHeightDest = dwHeightSrc / 2;

	mov	eax, DWORD PTR _dwHeightSrc$[ebp]
	shr	eax, 1
	mov	DWORD PTR _dwHeightDest$[ebp], eax

; 305  :     }
; 306  :     else 

	jmp	SHORT $LN30@D3DUtil_Se@2
$LN31@D3DUtil_Se@2:

; 307  :     {
; 308  :         bBWCursor = FALSE;

	mov	DWORD PTR _bBWCursor$[ebp], 0

; 309  :         dwHeightDest = dwHeightSrc;

	mov	eax, DWORD PTR _dwHeightSrc$[ebp]
	mov	DWORD PTR _dwHeightDest$[ebp], eax
$LN30@D3DUtil_Se@2:

; 310  :     }
; 311  : 
; 312  :     // Create a surface for the fullscreen cursor
; 313  :     if( FAILED( hr = pd3dDevice->CreateImageSurface( dwWidth, dwHeightDest, 
; 314  :         D3DFMT_A8R8G8B8, &pCursorBitmap ) ) )

	mov	esi, esp
	lea	eax, DWORD PTR _pCursorBitmap$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _dwHeightDest$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwWidth$[ebp]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+108]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN29@D3DUtil_Se@2
	jmp	$End$95446

; 315  :     {
; 316  :         goto End;

	jmp	$End$95446
$LN29@D3DUtil_Se@2:

; 317  :     }
; 318  : 
; 319  :     pcrArrayMask = new DWORD[dwWidth * dwHeightSrc];

	mov	eax, DWORD PTR _dwWidth$[ebp]
	imul	eax, DWORD PTR _dwHeightSrc$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T95867[ebp], eax
	mov	eax, DWORD PTR $T95867[ebp]
	mov	DWORD PTR _pcrArrayMask$[ebp], eax

; 320  : 
; 321  :     ZeroMemory(&bmi, sizeof(bmi));

	push	44					; 0000002cH
	push	0
	lea	eax, DWORD PTR _bmi$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 322  :     bmi.bmiHeader.biSize = sizeof(bmi.bmiHeader);

	mov	DWORD PTR _bmi$[ebp], 40		; 00000028H

; 323  :     bmi.bmiHeader.biWidth = dwWidth;

	mov	eax, DWORD PTR _dwWidth$[ebp]
	mov	DWORD PTR _bmi$[ebp+4], eax

; 324  :     bmi.bmiHeader.biHeight = dwHeightSrc;

	mov	eax, DWORD PTR _dwHeightSrc$[ebp]
	mov	DWORD PTR _bmi$[ebp+8], eax

; 325  :     bmi.bmiHeader.biPlanes = 1;

	mov	eax, 1
	mov	WORD PTR _bmi$[ebp+12], ax

; 326  :     bmi.bmiHeader.biBitCount = 32;

	mov	eax, 32					; 00000020H
	mov	WORD PTR _bmi$[ebp+14], ax

; 327  :     bmi.bmiHeader.biCompression = BI_RGB;

	mov	DWORD PTR _bmi$[ebp+16], 0

; 328  : 
; 329  :     hdcScreen = GetDC( NULL );

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdcScreen$[ebp], eax

; 330  :     hdcMask = CreateCompatibleDC( hdcScreen );

	mov	esi, esp
	mov	eax, DWORD PTR _hdcScreen$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateCompatibleDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdcMask$[ebp], eax

; 331  :     if( hdcMask == NULL )

	cmp	DWORD PTR _hdcMask$[ebp], 0
	jne	SHORT $LN27@D3DUtil_Se@2

; 332  :     {
; 333  :         hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$End$95446

; 334  :         goto End;

	jmp	$End$95446
$LN27@D3DUtil_Se@2:

; 335  :     }
; 336  :     hgdiobjOld = SelectObject(hdcMask, iconinfo.hbmMask);

	mov	esi, esp
	mov	eax, DWORD PTR _iconinfo$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _hdcMask$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hgdiobjOld$[ebp], eax

; 337  :     GetDIBits(hdcMask, iconinfo.hbmMask, 0, dwHeightSrc, 
; 338  :         pcrArrayMask, &bmi, DIB_RGB_COLORS);

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _bmi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcrArrayMask$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwHeightSrc$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _iconinfo$[ebp+12]
	push	eax
	mov	ecx, DWORD PTR _hdcMask$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDIBits@28
	cmp	esi, esp
	call	__RTC_CheckEsp

; 339  :     SelectObject(hdcMask, hgdiobjOld);

	mov	esi, esp
	mov	eax, DWORD PTR _hgdiobjOld$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdcMask$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 340  : 
; 341  :     if (!bBWCursor)

	cmp	DWORD PTR _bBWCursor$[ebp], 0
	jne	$LN25@D3DUtil_Se@2

; 342  :     {
; 343  :         pcrArrayColor = new DWORD[dwWidth * dwHeightDest];

	mov	eax, DWORD PTR _dwWidth$[ebp]
	imul	eax, DWORD PTR _dwHeightDest$[ebp]
	xor	ecx, ecx
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T95868[ebp], eax
	mov	eax, DWORD PTR $T95868[ebp]
	mov	DWORD PTR _pcrArrayColor$[ebp], eax

; 344  :         hdcColor = CreateCompatibleDC( GetDC( NULL ) );

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__GetDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__CreateCompatibleDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hdcColor$[ebp], eax

; 345  :         if( hdcColor == NULL )

	cmp	DWORD PTR _hdcColor$[ebp], 0
	jne	SHORT $LN24@D3DUtil_Se@2

; 346  :         {
; 347  :             hr = E_FAIL;

	mov	DWORD PTR _hr$[ebp], -2147467259	; 80004005H
	jmp	$End$95446

; 348  :             goto End;

	jmp	$End$95446
$LN24@D3DUtil_Se@2:

; 349  :         }
; 350  :         SelectObject(hdcColor, iconinfo.hbmColor);

	mov	esi, esp
	mov	eax, DWORD PTR _iconinfo$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _hdcColor$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 351  :         GetDIBits(hdcColor, iconinfo.hbmColor, 0, dwHeightDest, 
; 352  :             pcrArrayColor, &bmi, DIB_RGB_COLORS);

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _bmi$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pcrArrayColor$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwHeightDest$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _iconinfo$[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _hdcColor$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDIBits@28
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@D3DUtil_Se@2:

; 353  :     }
; 354  : 
; 355  :     // Transfer cursor image into the surface
; 356  :     D3DLOCKED_RECT lr;
; 357  :     pCursorBitmap->LockRect( &lr, NULL, 0 );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _lr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pCursorBitmap$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _pCursorBitmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+36]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 358  :     pBitmap = (DWORD*)lr.pBits;

	mov	eax, DWORD PTR _lr$[ebp+4]
	mov	DWORD PTR _pBitmap$[ebp], eax

; 359  :     for( y = 0; y < dwHeightDest; y++ )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN22@D3DUtil_Se@2
$LN21@D3DUtil_Se@2:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN22@D3DUtil_Se@2:
	mov	eax, DWORD PTR _y$[ebp]
	cmp	eax, DWORD PTR _dwHeightDest$[ebp]
	jae	$LN20@D3DUtil_Se@2

; 360  :     {
; 361  :         for( x = 0; x < dwWidth; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN19@D3DUtil_Se@2
$LN18@D3DUtil_Se@2:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN19@D3DUtil_Se@2:
	mov	eax, DWORD PTR _x$[ebp]
	cmp	eax, DWORD PTR _dwWidth$[ebp]
	jae	$LN17@D3DUtil_Se@2

; 362  :         {
; 363  :             if (bBWCursor)

	cmp	DWORD PTR _bBWCursor$[ebp], 0
	je	SHORT $LN16@D3DUtil_Se@2

; 364  :             {
; 365  :                 crColor = pcrArrayMask[dwWidth*(dwHeightDest-1-y) + x];

	mov	eax, DWORD PTR _dwHeightDest$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _dwWidth$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pcrArrayMask$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _crColor$[ebp], edx

; 366  :                 crMask = pcrArrayMask[dwWidth*(dwHeightSrc-1-y) + x];

	mov	eax, DWORD PTR _dwHeightSrc$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _dwWidth$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pcrArrayMask$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _crMask$[ebp], edx

; 367  :             }
; 368  :             else

	jmp	SHORT $LN15@D3DUtil_Se@2
$LN16@D3DUtil_Se@2:

; 369  :             {
; 370  :                 crColor = pcrArrayColor[dwWidth*(dwHeightDest-1-y) + x];

	mov	eax, DWORD PTR _dwHeightDest$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _dwWidth$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pcrArrayColor$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _crColor$[ebp], edx

; 371  :                 crMask = pcrArrayMask[dwWidth*(dwHeightDest-1-y) + x];

	mov	eax, DWORD PTR _dwHeightDest$[ebp]
	sub	eax, 1
	sub	eax, DWORD PTR _y$[ebp]
	imul	eax, DWORD PTR _dwWidth$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pcrArrayMask$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _crMask$[ebp], edx
$LN15@D3DUtil_Se@2:

; 372  :             }
; 373  :             if (crMask == 0)

	cmp	DWORD PTR _crMask$[ebp], 0
	jne	SHORT $LN14@D3DUtil_Se@2

; 374  :                 pBitmap[dwWidth*y + x] = 0xff000000 | crColor;

	mov	eax, DWORD PTR _crColor$[ebp]
	or	eax, -16777216				; ff000000H
	mov	ecx, DWORD PTR _dwWidth$[ebp]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _pBitmap$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 375  :             else

	jmp	SHORT $LN13@D3DUtil_Se@2
$LN14@D3DUtil_Se@2:

; 376  :                 pBitmap[dwWidth*y + x] = 0x00000000;

	mov	eax, DWORD PTR _dwWidth$[ebp]
	imul	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pBitmap$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
$LN13@D3DUtil_Se@2:

; 377  : 
; 378  :             // It may be helpful to make the D3D cursor look slightly 
; 379  :             // different from the Windows cursor so you can distinguish 
; 380  :             // between the two when developing/testing code.  When
; 381  :             // bAddWatermark is TRUE, the following code adds some
; 382  :             // small grey "D3D" characters to the upper-left corner of
; 383  :             // the D3D cursor image.
; 384  :             if( bAddWatermark && x < 12 && y < 5 )

	cmp	DWORD PTR _bAddWatermark$[ebp], 0
	je	$LN12@D3DUtil_Se@2
	cmp	DWORD PTR _x$[ebp], 12			; 0000000cH
	jae	$LN12@D3DUtil_Se@2
	cmp	DWORD PTR _y$[ebp], 5
	jae	$LN12@D3DUtil_Se@2

; 385  :             {
; 386  :                 // 11.. 11.. 11.. .... CCC0
; 387  :                 // 1.1. ..1. 1.1. .... A2A0
; 388  :                 // 1.1. .1.. 1.1. .... A4A0
; 389  :                 // 1.1. ..1. 1.1. .... A2A0
; 390  :                 // 11.. 11.. 11.. .... CCC0
; 391  : 
; 392  :                 const WORD wMask[5] = { 0xccc0, 0xa2a0, 0xa4a0, 0xa2a0, 0xccc0 };

	mov	eax, 52416				; 0000ccc0H
	mov	WORD PTR _wMask$95482[ebp], ax
	mov	eax, 41632				; 0000a2a0H
	mov	WORD PTR _wMask$95482[ebp+2], ax
	mov	eax, 42144				; 0000a4a0H
	mov	WORD PTR _wMask$95482[ebp+4], ax
	mov	eax, 41632				; 0000a2a0H
	mov	WORD PTR _wMask$95482[ebp+6], ax
	mov	eax, 52416				; 0000ccc0H
	mov	WORD PTR _wMask$95482[ebp+8], ax

; 393  :                 if( wMask[y] & (1 << (15 - x)) )

	mov	eax, DWORD PTR _y$[ebp]
	movzx	edx, WORD PTR _wMask$95482[ebp+eax*2]
	mov	ecx, 15					; 0000000fH
	sub	ecx, DWORD PTR _x$[ebp]
	mov	eax, 1
	shl	eax, cl
	and	edx, eax
	je	SHORT $LN12@D3DUtil_Se@2

; 394  :                 {
; 395  :                     pBitmap[dwWidth*y + x] |= 0xff808080;

	mov	eax, DWORD PTR _dwWidth$[ebp]
	imul	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pBitmap$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	or	edx, -8355712				; ff808080H
	mov	eax, DWORD PTR _dwWidth$[ebp]
	imul	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _pBitmap$[ebp]
	mov	DWORD PTR [ecx+eax*4], edx
$LN12@D3DUtil_Se@2:

; 396  :                 }
; 397  :             }
; 398  :         }

	jmp	$LN18@D3DUtil_Se@2
$LN17@D3DUtil_Se@2:

; 399  :     }

	jmp	$LN21@D3DUtil_Se@2
$LN20@D3DUtil_Se@2:

; 400  :     pCursorBitmap->UnlockRect();

	mov	eax, DWORD PTR _pCursorBitmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pCursorBitmap$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 401  : 
; 402  :     // Set the device cursor
; 403  :     if( FAILED( hr = pd3dDevice->SetCursorProperties( iconinfo.xHotspot, 
; 404  :         iconinfo.yHotspot, pCursorBitmap ) ) )

	mov	esi, esp
	mov	eax, DWORD PTR _pCursorBitmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iconinfo$[ebp+8]
	push	ecx
	mov	edx, DWORD PTR _iconinfo$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _pd3dDevice$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pd3dDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+40]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN10@D3DUtil_Se@2
	jmp	SHORT $End$95446

; 405  :     {
; 406  :         goto End;

	jmp	SHORT $End$95446
$LN10@D3DUtil_Se@2:

; 407  :     }
; 408  : 
; 409  :     hr = S_OK;

	mov	DWORD PTR _hr$[ebp], 0
$End$95446:

; 410  : 
; 411  : End:
; 412  :     if( iconinfo.hbmMask != NULL )

	cmp	DWORD PTR _iconinfo$[ebp+12], 0
	je	SHORT $LN8@D3DUtil_Se@2

; 413  :         DeleteObject( iconinfo.hbmMask );

	mov	esi, esp
	mov	eax, DWORD PTR _iconinfo$[ebp+12]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@D3DUtil_Se@2:

; 414  :     if( iconinfo.hbmColor != NULL )

	cmp	DWORD PTR _iconinfo$[ebp+16], 0
	je	SHORT $LN7@D3DUtil_Se@2

; 415  :         DeleteObject( iconinfo.hbmColor );

	mov	esi, esp
	mov	eax, DWORD PTR _iconinfo$[ebp+16]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@D3DUtil_Se@2:

; 416  :     if( hdcScreen != NULL )

	cmp	DWORD PTR _hdcScreen$[ebp], 0
	je	SHORT $LN6@D3DUtil_Se@2

; 417  :         ReleaseDC( NULL, hdcScreen );

	mov	esi, esp
	mov	eax, DWORD PTR _hdcScreen$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__ReleaseDC@8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@D3DUtil_Se@2:

; 418  :     if( hdcColor != NULL )

	cmp	DWORD PTR _hdcColor$[ebp], 0
	je	SHORT $LN5@D3DUtil_Se@2

; 419  :         DeleteDC( hdcColor );

	mov	esi, esp
	mov	eax, DWORD PTR _hdcColor$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@D3DUtil_Se@2:

; 420  :     if( hdcMask != NULL )

	cmp	DWORD PTR _hdcMask$[ebp], 0
	je	SHORT $LN4@D3DUtil_Se@2

; 421  :         DeleteDC( hdcMask );

	mov	esi, esp
	mov	eax, DWORD PTR _hdcMask$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@D3DUtil_Se@2:

; 422  :     SAFE_DELETE_ARRAY( pcrArrayColor );

	cmp	DWORD PTR _pcrArrayColor$[ebp], 0
	je	SHORT $LN3@D3DUtil_Se@2
	mov	eax, DWORD PTR _pcrArrayColor$[ebp]
	mov	DWORD PTR $T95869[ebp], eax
	mov	ecx, DWORD PTR $T95869[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pcrArrayColor$[ebp], 0
$LN3@D3DUtil_Se@2:

; 423  :     SAFE_DELETE_ARRAY( pcrArrayMask );

	cmp	DWORD PTR _pcrArrayMask$[ebp], 0
	je	SHORT $LN2@D3DUtil_Se@2
	mov	eax, DWORD PTR _pcrArrayMask$[ebp]
	mov	DWORD PTR $T95870[ebp], eax
	mov	ecx, DWORD PTR $T95870[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	mov	DWORD PTR _pcrArrayMask$[ebp], 0
$LN2@D3DUtil_Se@2:

; 424  :     SAFE_RELEASE( pCursorBitmap );

	cmp	DWORD PTR _pCursorBitmap$[ebp], 0
	je	SHORT $LN1@D3DUtil_Se@2
	mov	eax, DWORD PTR _pCursorBitmap$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _pCursorBitmap$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _pCursorBitmap$[ebp], 0
$LN1@D3DUtil_Se@2:

; 425  :     return hr;

	mov	eax, DWORD PTR _hr$[ebp]

; 426  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN45@D3DUtil_Se@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 596				; 00000254H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN45@D3DUtil_Se@2:
	DD	6
	DD	$LN44@D3DUtil_Se@2
$LN44@D3DUtil_Se@2:
	DD	-40					; ffffffd8H
	DD	20					; 00000014H
	DD	$LN38@D3DUtil_Se@2
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN39@D3DUtil_Se@2
	DD	-132					; ffffff7cH
	DD	24					; 00000018H
	DD	$LN40@D3DUtil_Se@2
	DD	-268					; fffffef4H
	DD	44					; 0000002cH
	DD	$LN41@D3DUtil_Se@2
	DD	-332					; fffffeb4H
	DD	8
	DD	$LN42@D3DUtil_Se@2
	DD	-352					; fffffea0H
	DD	10					; 0000000aH
	DD	$LN43@D3DUtil_Se@2
$LN43@D3DUtil_Se@2:
	DB	119					; 00000077H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	0
$LN42@D3DUtil_Se@2:
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	0
$LN41@D3DUtil_Se@2:
	DB	98					; 00000062H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN40@D3DUtil_Se@2:
	DB	98					; 00000062H
	DB	109					; 0000006dH
	DB	0
$LN39@D3DUtil_Se@2:
	DB	112					; 00000070H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	0
$LN38@D3DUtil_Se@2:
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice8@@PAUHICON__@@H@Z ENDP ; D3DUtil_SetDeviceCursor
_TEXT	ENDS
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
PUBLIC	??0CD3DArcBall@@QAE@XZ				; CD3DArcBall::CD3DArcBall
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CD3DArcBall@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CD3DArcBall@@QAE@XZ PROC				; CD3DArcBall::CD3DArcBall, COMDAT
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 240				; 000000f0H
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 478  :     D3DXQuaternionIdentity( &m_qDown );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
	add	esp, 4

; 479  :     D3DXQuaternionIdentity( &m_qNow );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
	add	esp, 4

; 480  :     D3DXMatrixIdentity( &m_matRotation );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 481  :     D3DXMatrixIdentity( &m_matRotationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 482  :     D3DXMatrixIdentity( &m_matTranslation );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 176				; 000000b0H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 483  :     D3DXMatrixIdentity( &m_matTranslationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4

; 484  :     m_bDrag = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0

; 485  :     m_fRadiusTranslation = 1.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 486  :     m_bRightHanded = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+308], 0

; 487  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CD3DArcBall@@QAE@XZ ENDP				; CD3DArcBall::CD3DArcBall
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT

; 1510 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1511 : #ifdef D3DX_DEBUG
; 1512 :     if(!pOut)
; 1513 :         return NULL;
; 1514 : #endif
; 1515 : 
; 1516 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1517 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1518 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1519 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+4]

; 1520 : 
; 1521 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax]

; 1522 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1523 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z PROC ; D3DXQuaternionIdentity, COMDAT

; 1585 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1586 : #ifdef D3DX_DEBUG
; 1587 :     if(!pOut)
; 1588 :         return NULL;
; 1589 : #endif
; 1590 : 
; 1591 :     pOut->x = pOut->y = pOut->z = 0.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 1592 :     pOut->w = 1.0f;

	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax+12]

; 1593 :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 1594 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ENDP ; D3DXQuaternionIdentity
_TEXT	ENDS
PUBLIC	?SetWindow@CD3DArcBall@@QAEXHHM@Z		; CD3DArcBall::SetWindow
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
;	COMDAT ?SetWindow@CD3DArcBall@@QAEXHHM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iWidth$ = 8						; size = 4
_iHeight$ = 12						; size = 4
_fRadius$ = 16						; size = 4
?SetWindow@CD3DArcBall@@QAEXHHM@Z PROC			; CD3DArcBall::SetWindow, COMDAT
; _this$ = ecx

; 497  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 498  :     // Set ArcBall info
; 499  :     m_iWidth  = iWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iWidth$[ebp]
	mov	DWORD PTR [eax], ecx

; 500  :     m_iHeight = iHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iHeight$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 501  :     m_fRadius = fRadius;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fRadius$[ebp]
	fstp	DWORD PTR [eax+8]

; 502  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetWindow@CD3DArcBall@@QAEXHHM@Z ENDP			; CD3DArcBall::SetWindow
_TEXT	ENDS
PUBLIC	?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ; CD3DArcBall::ScreenToVector
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z
_TEXT	SEGMENT
tv207 = -268						; size = 4
tv182 = -268						; size = 4
tv168 = -268						; size = 4
_scale$95534 = -68					; size = 4
_mag$ = -56						; size = 4
_z$ = -44						; size = 4
_y$ = -32						; size = 4
_x$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_sx$ = 12						; size = 4
_sy$ = 16						; size = 4
?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z PROC ; CD3DArcBall::ScreenToVector, COMDAT
; _this$ = ecx

; 512  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 513  :     // Scale to screen
; 514  :     FLOAT x   = -(sx - m_iWidth/2)  / (m_fRadius*m_iWidth/2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _sx$[ebp]
	sub	ecx, eax
	neg	ecx
	mov	DWORD PTR tv168[ebp], ecx
	fild	DWORD PTR tv168[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	fdiv	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _x$[ebp]

; 515  :     FLOAT y   =  (sy - m_iHeight/2) / (m_fRadius*m_iHeight/2);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _sy$[ebp]
	sub	ecx, eax
	mov	DWORD PTR tv182[ebp], ecx
	fild	DWORD PTR tv182[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	fild	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+8]
	fdiv	QWORD PTR __real@4000000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _y$[ebp]

; 516  : 
; 517  :     if( m_bRightHanded )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+308], 0
	je	SHORT $LN3@ScreenToVe

; 518  :     {
; 519  :         x = -x;

	fld	DWORD PTR _x$[ebp]
	fchs
	fstp	DWORD PTR _x$[ebp]

; 520  :         y = -y;

	fld	DWORD PTR _y$[ebp]
	fchs
	fstp	DWORD PTR _y$[ebp]
$LN3@ScreenToVe:

; 521  :     }
; 522  : 
; 523  :     FLOAT z   = 0.0f;

	fldz
	fstp	DWORD PTR _z$[ebp]

; 524  :     FLOAT mag = x*x + y*y;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _x$[ebp]
	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR _y$[ebp]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR _mag$[ebp]

; 525  : 
; 526  :     if( mag > 1.0f )

	fld	DWORD PTR _mag$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@ScreenToVe

; 527  :     {
; 528  :         FLOAT scale = 1.0f/sqrtf(mag);

	push	ecx
	fld	DWORD PTR _mag$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	fld1
	fdivrp	ST(1), ST(0)
	fstp	DWORD PTR _scale$95534[ebp]

; 529  :         x *= scale;

	fld	DWORD PTR _x$[ebp]
	fmul	DWORD PTR _scale$95534[ebp]
	fstp	DWORD PTR _x$[ebp]

; 530  :         y *= scale;

	fld	DWORD PTR _y$[ebp]
	fmul	DWORD PTR _scale$95534[ebp]
	fstp	DWORD PTR _y$[ebp]

; 531  :     }
; 532  :     else

	jmp	SHORT $LN1@ScreenToVe
$LN2@ScreenToVe:

; 533  :         z = sqrtf( 1.0f - mag );

	fld	DWORD PTR _mag$[ebp]
	fld1
	fsubrp	ST(1), ST(0)
	fstp	DWORD PTR tv207[ebp]
	fld	DWORD PTR tv207[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	fstp	DWORD PTR _z$[ebp]
$LN1@ScreenToVe:

; 534  : 
; 535  :     // Return vector
; 536  :     return D3DXVECTOR3( x, y, z );

	push	ecx
	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 537  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ENDP ; CD3DArcBall::ScreenToVector
_TEXT	ENDS
PUBLIC	?SetRadius@CD3DArcBall@@QAEXM@Z			; CD3DArcBall::SetRadius
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetRadius@CD3DArcBall@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fRadius$ = 8						; size = 4
?SetRadius@CD3DArcBall@@QAEXM@Z PROC			; CD3DArcBall::SetRadius, COMDAT
; _this$ = ecx

; 547  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 548  :     m_fRadiusTranslation = fRadius;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fRadius$[ebp]
	fstp	DWORD PTR [eax+12]

; 549  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRadius@CD3DArcBall@@QAEXM@Z ENDP			; CD3DArcBall::SetRadius
_TEXT	ENDS
PUBLIC	__real@4014000000000000
PUBLIC	__real@c000000000000000
PUBLIC	??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z		; D3DXQUATERNION::operator*=
PUBLIC	?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionAxisToAxis
PUBLIC	?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ; CD3DArcBall::HandleMouseMessages
EXTRN	_D3DXMatrixMultiply@12:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixRotationQuaternion@8:PROC
EXTRN	___CxxFrameHandler3:PROC
_BSS	SEGMENT
?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::iCurMouseY
?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::iCurMouseX
?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A DB 0cH DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::s_vDown
?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::$S1
_BSS	ENDS
;	COMDAT __real@4014000000000000
CONST	SEGMENT
__real@4014000000000000 DQ 04014000000000000r	; 5
CONST	ENDS
;	COMDAT __real@c000000000000000
CONST	SEGMENT
__real@c000000000000000 DQ 0c000000000000000r	; -2
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z$0
__ehfuncinfo$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv301 = -336						; size = 4
tv313 = -332						; size = 4
tv299 = -332						; size = 4
tv291 = -332						; size = 4
tv284 = -332						; size = 4
tv76 = -332						; size = 4
$T95893 = -324						; size = 12
_fDeltaY$95582 = -112					; size = 4
_fDeltaX$95581 = -100					; size = 4
_qAxisToAxis$95576 = -88				; size = 16
_vCur$95574 = -64					; size = 12
_iMouseY$ = -44						; size = 4
_iMouseX$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z PROC ; CD3DArcBall::HandleMouseMessages, COMDAT
; _this$ = ecx

; 560  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-336]
	mov	ecx, 81					; 00000051H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 561  :     static int         iCurMouseX;      // Saved mouse position
; 562  :     static int         iCurMouseY;
; 563  :     static D3DXVECTOR3 s_vDown;         // Button down vector

	mov	eax, DWORD PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA
	and	eax, 1
	jne	SHORT $LN15@HandleMous
	mov	eax, DWORD PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA
	or	eax, 1
	mov	DWORD PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN15@HandleMous:

; 564  : 
; 565  :     // Current mouse position
; 566  :     int iMouseX = LOWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR _iMouseX$[ebp], ecx

; 567  :     int iMouseY = HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 65535				; 0000ffffH
	movzx	ecx, ax
	mov	DWORD PTR _iMouseY$[ebp], ecx

; 568  : 
; 569  :     switch( uMsg )

	mov	eax, DWORD PTR _uMsg$[ebp]
	mov	DWORD PTR tv76[ebp], eax
	mov	ecx, DWORD PTR tv76[ebp]
	sub	ecx, 512				; 00000200H
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 7
	ja	$LN13@HandleMous
	mov	edx, DWORD PTR tv76[ebp]
	jmp	DWORD PTR $LN24@HandleMous[edx*4]
$LN12@HandleMous:

; 570  :     {
; 571  :         case WM_RBUTTONDOWN:
; 572  :         case WM_MBUTTONDOWN:
; 573  :             // Store off the position of the cursor when the button is pressed
; 574  :             iCurMouseX = iMouseX;

	mov	eax, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, eax

; 575  :             iCurMouseY = iMouseY;

	mov	eax, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, eax

; 576  :             return TRUE;

	mov	eax, 1
	jmp	$LN16@HandleMous
$LN11@HandleMous:

; 577  : 
; 578  :         case WM_LBUTTONDOWN:
; 579  :             // Start drag mode
; 580  :             m_bDrag = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 1

; 581  :             s_vDown = ScreenToVector( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T95893[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ; CD3DArcBall::ScreenToVector
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A, ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A+4, edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A+8, eax

; 582  :             m_qDown = m_qNow;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 583  :             return TRUE;

	mov	eax, 1
	jmp	$LN16@HandleMous
$LN10@HandleMous:

; 584  : 
; 585  :         case WM_LBUTTONUP:
; 586  :             // End drag mode
; 587  :             m_bDrag = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 0

; 588  :             return TRUE;

	mov	eax, 1
	jmp	$LN16@HandleMous
$LN9@HandleMous:

; 589  : 
; 590  :         case WM_MOUSEMOVE:
; 591  :             // Drag object
; 592  :             if( MK_LBUTTON&wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 1
	je	$LN8@HandleMous

; 593  :             {
; 594  :                 if( m_bDrag )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+304], 0
	je	SHORT $LN7@HandleMous

; 595  :                 {
; 596  :                     // recompute m_qNow
; 597  :                     D3DXVECTOR3 vCur = ScreenToVector( iMouseX, iMouseY );

	mov	eax, DWORD PTR _iMouseY$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iMouseX$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vCur$95574[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ; CD3DArcBall::ScreenToVector

; 598  :                     D3DXQUATERNION qAxisToAxis;

	lea	ecx, DWORD PTR _qAxisToAxis$95576[ebp]
	call	??0D3DXQUATERNION@@QAE@XZ		; D3DXQUATERNION::D3DXQUATERNION

; 599  :                     D3DXQuaternionAxisToAxis(&qAxisToAxis, &s_vDown, &vCur);

	lea	eax, DWORD PTR _vCur$95574[ebp]
	push	eax
	push	OFFSET ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A
	lea	ecx, DWORD PTR _qAxisToAxis$95576[ebp]
	push	ecx
	call	?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionAxisToAxis

; 600  :                     m_qNow = m_qDown;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], eax

; 601  :                     m_qNow *= qAxisToAxis;

	lea	eax, DWORD PTR _qAxisToAxis$95576[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z	; D3DXQUATERNION::operator*=

; 602  :                     D3DXMatrixRotationQuaternion(&m_matRotationDelta, &qAxisToAxis);

	lea	eax, DWORD PTR _qAxisToAxis$95576[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	call	_D3DXMatrixRotationQuaternion@8

; 603  :                 }
; 604  :                 else

	jmp	SHORT $LN6@HandleMous
$LN7@HandleMous:

; 605  :                     D3DXMatrixIdentity(&m_matRotationDelta);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4
$LN6@HandleMous:

; 606  :                 D3DXMatrixRotationQuaternion(&m_matRotation, &m_qNow);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_D3DXMatrixRotationQuaternion@8

; 607  :                 m_bDrag = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+304], 1
	jmp	$LN4@HandleMous
$LN8@HandleMous:

; 608  :             }
; 609  :             else if( (MK_RBUTTON&wParam) || (MK_MBUTTON&wParam) )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 2
	jne	SHORT $LN3@HandleMous
	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 16					; 00000010H
	je	$LN4@HandleMous
$LN3@HandleMous:

; 610  :             {
; 611  :                 // Normalize based on size of window and bounding sphere radius
; 612  :                 FLOAT fDeltaX = ( iCurMouseX-iMouseX ) * m_fRadiusTranslation / m_iWidth;

	mov	eax, DWORD PTR ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
	sub	eax, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR tv284[ebp], eax
	fild	DWORD PTR tv284[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fidiv	DWORD PTR [edx]
	fstp	DWORD PTR _fDeltaX$95581[ebp]

; 613  :                 FLOAT fDeltaY = ( iCurMouseY-iMouseY ) * m_fRadiusTranslation / m_iHeight;

	mov	eax, DWORD PTR ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
	sub	eax, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR tv291[ebp], eax
	fild	DWORD PTR tv291[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+12]
	mov	edx, DWORD PTR _this$[ebp]
	fidiv	DWORD PTR [edx+4]
	fstp	DWORD PTR _fDeltaY$95582[ebp]

; 614  : 
; 615  :                 if( wParam & MK_RBUTTON )

	mov	eax, DWORD PTR _wParam$[ebp]
	and	eax, 2
	je	SHORT $LN2@HandleMous

; 616  :                 {
; 617  :                     D3DXMatrixTranslation( &m_matTranslationDelta, -2*fDeltaX, 2*fDeltaY, 0.0f );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _fDeltaY$95582[ebp]
	fmul	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR tv299[ebp]
	fld	DWORD PTR tv299[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _fDeltaX$95581[ebp]
	fmul	QWORD PTR __real@c000000000000000
	fstp	DWORD PTR tv301[ebp]
	fld	DWORD PTR tv301[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	call	_D3DXMatrixTranslation@16

; 618  :                     D3DXMatrixMultiply( &m_matTranslation, &m_matTranslation, &m_matTranslationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	call	_D3DXMatrixMultiply@12

; 619  :                 }
; 620  :                 else  // wParam & MK_MBUTTON

	jmp	SHORT $LN1@HandleMous
$LN2@HandleMous:

; 621  :                 {
; 622  :                     D3DXMatrixTranslation( &m_matTranslationDelta, 0.0f, 0.0f, 5*fDeltaY );

	fld	DWORD PTR _fDeltaY$95582[ebp]
	fmul	QWORD PTR __real@4014000000000000
	fstp	DWORD PTR tv313[ebp]
	fld	DWORD PTR tv313[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	call	_D3DXMatrixTranslation@16

; 623  :                     D3DXMatrixMultiply( &m_matTranslation, &m_matTranslation, &m_matTranslationDelta );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 240				; 000000f0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	push	edx
	call	_D3DXMatrixMultiply@12
$LN1@HandleMous:

; 624  :                 }
; 625  : 
; 626  :                 // Store mouse coordinate
; 627  :                 iCurMouseX = iMouseX;

	mov	eax, DWORD PTR _iMouseX$[ebp]
	mov	DWORD PTR ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, eax

; 628  :                 iCurMouseY = iMouseY;

	mov	eax, DWORD PTR _iMouseY$[ebp]
	mov	DWORD PTR ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, eax
$LN4@HandleMous:

; 629  :             }
; 630  :             return TRUE;

	mov	eax, 1
	jmp	SHORT $LN16@HandleMous
$LN13@HandleMous:

; 631  :     }
; 632  : 
; 633  :     return FALSE;

	xor	eax, eax
$LN16@HandleMous:

; 634  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@HandleMous
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN23@HandleMous:
	DD	2
	DD	$LN22@HandleMous
$LN22@HandleMous:
	DD	-64					; ffffffc0H
	DD	12					; 0000000cH
	DD	$LN19@HandleMous
	DD	-88					; ffffffa8H
	DD	16					; 00000010H
	DD	$LN20@HandleMous
$LN20@HandleMous:
	DB	113					; 00000071H
	DB	65					; 00000041H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	65					; 00000041H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
$LN19@HandleMous:
	DB	118					; 00000076H
	DB	67					; 00000043H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
	npad	3
$LN24@HandleMous:
	DD	$LN9@HandleMous
	DD	$LN11@HandleMous
	DD	$LN10@HandleMous
	DD	$LN13@HandleMous
	DD	$LN12@HandleMous
	DD	$LN13@HandleMous
	DD	$LN13@HandleMous
	DD	$LN12@HandleMous
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z$0:
	mov	eax, DWORD PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA, eax
	ret	0
__ehhandler$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-340]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ENDP ; CD3DArcBall::HandleMouseMessages
EXTRN	_D3DXQuaternionMultiply@12:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
;	COMDAT ??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_q$ = 8							; size = 4
??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z PROC			; D3DXQUATERNION::operator*=, COMDAT
; _this$ = ecx

; 711  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 712  :     D3DXQuaternionMultiply(this, this, &q);

	mov	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	_D3DXQuaternionMultiply@12

; 713  :     return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 714  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z ENDP			; D3DXQUATERNION::operator*=
_TEXT	ENDS
PUBLIC	?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionUnitAxisToUnitAxis2
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
;	COMDAT ?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
_vHalf$ = -56						; size = 12
_vB$ = -36						; size = 12
_vA$ = -16						; size = 12
_pOut$ = 8						; size = 4
_pvFrom$ = 12						; size = 4
_pvTo$ = 16						; size = 4
?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z PROC ; D3DXQuaternionAxisToAxis, COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 461  :     D3DXVECTOR3 vA, vB;

	lea	ecx, DWORD PTR _vA$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	lea	ecx, DWORD PTR _vB$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 462  :     D3DXVec3Normalize(&vA, pvFrom);

	mov	eax, DWORD PTR _pvFrom$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vA$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 463  :     D3DXVec3Normalize(&vB, pvTo);

	mov	eax, DWORD PTR _pvTo$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vB$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 464  :     D3DXVECTOR3 vHalf(vA + vB);

	lea	eax, DWORD PTR _vB$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vHalf$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vA$[ebp]
	call	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z		; D3DXVECTOR3::operator+

; 465  :     D3DXVec3Normalize(&vHalf, &vHalf);

	lea	eax, DWORD PTR _vHalf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vHalf$[ebp]
	push	ecx
	call	_D3DXVec3Normalize@8

; 466  :     return D3DXQuaternionUnitAxisToUnitAxis2(pOut, &vA, &vHalf);

	lea	eax, DWORD PTR _vHalf$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vA$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pOut$[ebp]
	push	edx
	call	?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionUnitAxisToUnitAxis2

; 467  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@D3DXQuater
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN7@D3DXQuater:
	DD	3
	DD	$LN6@D3DXQuater
$LN6@D3DXQuater:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@D3DXQuater
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN4@D3DXQuater
	DD	-56					; ffffffc8H
	DD	12					; 0000000cH
	DD	$LN5@D3DXQuater
$LN5@D3DXQuater:
	DB	118					; 00000076H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	102					; 00000066H
	DB	0
$LN4@D3DXQuater:
	DB	118					; 00000076H
	DB	66					; 00000042H
	DB	0
$LN3@D3DXQuater:
	DB	118					; 00000076H
	DB	65					; 00000041H
	DB	0
?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ENDP ; D3DXQuaternionAxisToAxis
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
tv150 = -216						; size = 4
tv147 = -212						; size = 4
tv144 = -208						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC			; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 256  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 257  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [ecx+8]
	fstp	DWORD PTR tv144[ebp]
	fld	DWORD PTR tv144[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [eax+4]
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx]
	mov	edx, DWORD PTR _v$[ebp]
	fadd	DWORD PTR [edx]
	fstp	DWORD PTR tv150[ebp]
	fld	DWORD PTR tv150[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 258  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
;	COMDAT ?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
_vAxis$ = -16						; size = 12
_pOut$ = 8						; size = 4
_pvFrom$ = 12						; size = 4
_pvTo$ = 16						; size = 4
?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z PROC ; D3DXQuaternionUnitAxisToUnitAxis2, COMDAT

; 439  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 440  :     D3DXVECTOR3 vAxis;

	lea	ecx, DWORD PTR _vAxis$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3

; 441  :     D3DXVec3Cross(&vAxis, pvFrom, pvTo);    // proportional to sin(theta)

	mov	eax, DWORD PTR _pvTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pvFrom$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vAxis$[ebp]
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 442  :     pOut->x = vAxis.x;

	mov	eax, DWORD PTR _pOut$[ebp]
	fld	DWORD PTR _vAxis$[ebp]
	fstp	DWORD PTR [eax]

; 443  :     pOut->y = vAxis.y;

	mov	eax, DWORD PTR _pOut$[ebp]
	fld	DWORD PTR _vAxis$[ebp+4]
	fstp	DWORD PTR [eax+4]

; 444  :     pOut->z = vAxis.z;

	mov	eax, DWORD PTR _pOut$[ebp]
	fld	DWORD PTR _vAxis$[ebp+8]
	fstp	DWORD PTR [eax+8]

; 445  :     pOut->w = D3DXVec3Dot( pvFrom, pvTo );

	mov	eax, DWORD PTR _pvTo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pvFrom$[ebp]
	push	ecx
	call	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z	; D3DXVec3Dot
	add	esp, 8
	mov	edx, DWORD PTR _pOut$[ebp]
	fstp	DWORD PTR [edx+12]

; 446  :     return pOut;

	mov	eax, DWORD PTR _pOut$[ebp]

; 447  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@D3DXQuater@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN5@D3DXQuater@2:
	DD	1
	DD	$LN4@D3DXQuater@2
$LN4@D3DXQuater@2:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN3@D3DXQuater@2
$LN3@D3DXQuater@2:
	DB	118					; 00000076H
	DB	65					; 00000041H
	DB	120					; 00000078H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	0
?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ENDP ; D3DXQuaternionUnitAxisToUnitAxis2
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
tv144 = -196						; size = 4
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC		; D3DXVec3Dot, COMDAT

; 1258 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1259 : #ifdef D3DX_DEBUG
; 1260 :     if(!pV1 || !pV2)
; 1261 :         return 0.0f;
; 1262 : #endif
; 1263 : 
; 1264 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

	mov	eax, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [eax]
	mov	ecx, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [ecx]
	mov	edx, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [edx+4]
	mov	eax, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [eax+4]
	faddp	ST(1), ST(0)
	mov	ecx, DWORD PTR _pV1$[ebp]
	fld	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pV2$[ebp]
	fmul	DWORD PTR [edx+8]
	faddp	ST(1), ST(0)
	fstp	DWORD PTR tv144[ebp]
	fld	DWORD PTR tv144[ebp]

; 1265 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
PUBLIC	?SetProjParams@CD3DCamera@@QAEXMMMM@Z		; CD3DCamera::SetProjParams
PUBLIC	__real@3f490fdb
PUBLIC	?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z ; CD3DCamera::SetViewParams
PUBLIC	??0CD3DCamera@@QAE@XZ				; CD3DCamera::CD3DCamera
;	COMDAT __real@3f490fdb
; File d:\vice-players-master\client\d3d8\d3dutil.cpp
CONST	SEGMENT
__real@3f490fdb DD 03f490fdbr			; 0.785398
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0CD3DCamera@@QAE@XZ
_TEXT	SEGMENT
$T95933 = -260						; size = 12
$T95934 = -240						; size = 12
$T95935 = -220						; size = 12
_this$ = -8						; size = 4
??0CD3DCamera@@QAE@XZ PROC				; CD3DCamera::CD3DCamera, COMDAT
; _this$ = ecx

; 644  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX

; 645  :     // Set attributes for the view matrix
; 646  :     SetViewParams( D3DXVECTOR3(0.0f,0.0f,0.0f), D3DXVECTOR3(0.0f,0.0f,1.0f),
; 647  :                    D3DXVECTOR3(0.0f,1.0f,0.0f) );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95933[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95934[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T95935[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z ; CD3DCamera::SetViewParams

; 648  : 
; 649  :     // Set attributes for the projection matrix
; 650  :     SetProjParams( D3DX_PI/4, 1.0f, 1.0f, 1000.0f );

	push	ecx
	fld	DWORD PTR __real@447a0000
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f490fdb
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetProjParams@CD3DCamera@@QAEXMMMM@Z	; CD3DCamera::SetProjParams

; 651  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CD3DCamera@@QAE@XZ ENDP				; CD3DCamera::CD3DCamera
_TEXT	ENDS
EXTRN	_D3DXMatrixInverse@12:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
$T95940 = -220						; size = 12
_this$ = -8						; size = 4
_vEyePt$ = 8						; size = 4
_vLookatPt$ = 12					; size = 4
_vUpVec$ = 16						; size = 4
?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z PROC ; CD3DCamera::SetViewParams, COMDAT
; _this$ = ecx

; 662  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 663  :     // Set attributes for the view matrix
; 664  :     m_vEyePt    = vEyePt;

	mov	eax, DWORD PTR _vEyePt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 665  :     m_vLookatPt = vLookatPt;

	mov	eax, DWORD PTR _vLookatPt$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 666  :     m_vUpVec    = vUpVec;

	mov	eax, DWORD PTR _vUpVec$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax

; 667  :     D3DXVec3Normalize( &m_vView, &(m_vLookatPt - m_vEyePt) );

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T95940[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z		; D3DXVECTOR3::operator-
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	call	_D3DXVec3Normalize@8

; 668  :     D3DXVec3Cross( &m_vCross, &m_vView, &m_vUpVec );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	call	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ; D3DXVec3Cross
	add	esp, 12					; 0000000cH

; 669  : 
; 670  :     D3DXMatrixLookAtLH( &m_matView, &m_vEyePt, &m_vLookatPt, &m_vUpVec );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 24					; 00000018H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	call	_D3DXMatrixLookAtLH@16

; 671  :     D3DXMatrixInverse( &m_matBillboard, NULL, &m_matView );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	push	ecx
	call	_D3DXMatrixInverse@12

; 672  :     m_matBillboard._41 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+172]

; 673  :     m_matBillboard._42 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+176]

; 674  :     m_matBillboard._43 = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+180]

; 675  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z ENDP ; CD3DCamera::SetViewParams
_TEXT	ENDS
EXTRN	_D3DXMatrixPerspectiveFovLH@20:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetProjParams@CD3DCamera@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fFOV$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?SetProjParams@CD3DCamera@@QAEXMMMM@Z PROC		; CD3DCamera::SetProjParams, COMDAT
; _this$ = ecx

; 686  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 687  :     // Set attributes for the projection matrix
; 688  :     m_fFOV        = fFOV;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fFOV$[ebp]
	fstp	DWORD PTR [eax+188]

; 689  :     m_fAspect     = fAspect;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fAspect$[ebp]
	fstp	DWORD PTR [eax+192]

; 690  :     m_fNearPlane  = fNearPlane;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fNearPlane$[ebp]
	fstp	DWORD PTR [eax+196]

; 691  :     m_fFarPlane   = fFarPlane;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fFarPlane$[ebp]
	fstp	DWORD PTR [eax+200]

; 692  : 
; 693  :     D3DXMatrixPerspectiveFovLH( &m_matProj, fFOV, fAspect, fNearPlane, fFarPlane );

	push	ecx
	fld	DWORD PTR _fFarPlane$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fNearPlane$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fAspect$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fFOV$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 204				; 000000ccH
	push	eax
	call	_D3DXMatrixPerspectiveFovLH@20

; 694  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetProjParams@CD3DCamera@@QAEXMMMM@Z ENDP		; CD3DCamera::SetProjParams
_TEXT	ENDS
END
