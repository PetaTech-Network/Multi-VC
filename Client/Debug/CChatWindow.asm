; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\CChatWindow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_01ELNMCGJD@W?$AA@				; `string'
PUBLIC	__real@00000000
PUBLIC	??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@		; `string'
PUBLIC	__real@40400000
PUBLIC	__real@41f00000
PUBLIC	__real@41c80000
PUBLIC	??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z	; CChatWindow::CChatWindow
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memset:PROC
EXTRN	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z:PROC ; CD3DFont::GetTextExtent
EXTRN	?RestoreDeviceObjects@CD3DFont@@QAEJXZ:PROC	; CD3DFont::RestoreDeviceObjects
EXTRN	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z:PROC ; CD3DFont::InitDeviceObjects
EXTRN	??0CD3DFont@@QAE@PADKK@Z:PROC			; CD3DFont::CD3DFont
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_01ELNMCGJD@W?$AA@
; File d:\vice-players-master\client\cchatwindow.cpp
CONST	SEGMENT
??_C@_01ELNMCGJD@W?$AA@ DB 'W', 00H			; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@
CONST	SEGMENT
??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@ DB 'Arial BOLD', 00H	; `string'
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z$0
__ehfuncinfo$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
tv80 = -256						; size = 4
$T209384 = -248						; size = 4
$T209385 = -236						; size = 4
_x$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pD3DDevice$ = 8					; size = 4
??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z PROC	; CChatWindow::CChatWindow, COMDAT
; _this$ = ecx

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 20   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 21   : 
; 22   : 	m_bEnabled			= TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 23   : 	m_fDrawStartX		= 25.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@41c80000
	fstp	DWORD PTR [eax+948]

; 24   : 	m_fDrawStartY		= 30.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@41f00000
	fstp	DWORD PTR [eax+952]

; 25   : 	m_fDrawPadding		= 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR [eax+956]

; 26   : 	m_pD3DFont			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+968], 0

; 27   : 
; 28   : 	if(pD3DDevice) {

	cmp	DWORD PTR _pD3DDevice$[ebp], 0
	je	$LN3@CChatWindo

; 29   : 		m_pD3DFont = new CD3DFont(CHAT_FONT,CHAT_FONT_SIZE+1,0);

	push	1664					; 00000680H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209385[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209385[ebp], 0
	je	SHORT $LN6@CChatWindo
	push	0
	push	13					; 0000000dH
	push	OFFSET ??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@
	mov	ecx, DWORD PTR $T209385[ebp]
	call	??0CD3DFont@@QAE@PADKK@Z		; CD3DFont::CD3DFont
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN7@CChatWindo
$LN6@CChatWindo:
	mov	DWORD PTR tv80[ebp], 0
$LN7@CChatWindo:
	mov	eax, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T209384[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T209384[ebp]
	mov	DWORD PTR [ecx+968], edx

; 30   : 		m_pD3DFont->InitDeviceObjects(pD3DDevice);

	mov	eax, DWORD PTR _pD3DDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+968]
	call	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z ; CD3DFont::InitDeviceObjects

; 31   : 		m_pD3DFont->RestoreDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+968]
	call	?RestoreDeviceObjects@CD3DFont@@QAEJXZ	; CD3DFont::RestoreDeviceObjects
$LN3@CChatWindo:

; 32   : 	}
; 33   : 
; 34   :   	m_pD3DFont->GetTextExtent("W",&m_sizeText);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 960				; 000003c0H
	push	eax
	push	OFFSET ??_C@_01ELNMCGJD@W?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+968]
	call	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z ; CD3DFont::GetTextExtent
$LN2@CChatWindo:

; 35   : 
; 36   : 	// Init the chat window lines to 0
; 37   : 	while(x!=MAX_DISP_MESSAGES) {

	cmp	DWORD PTR _x$[ebp], 7
	je	SHORT $LN1@CChatWindo

; 38   : 		memset(m_szChatWindowBuffer[x],0,MAX_MESSAGE_LENGTH);

	push	128					; 00000080H
	push	0
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 39   : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 40   : 	}

	jmp	SHORT $LN2@CChatWindo
$LN1@CChatWindo:

; 41   : 
; 42   : 	m_dwChatTextColor = 0xFFFFFFFFFFFFFFFF;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+928], -1

; 43   : 	m_dwChatInfoColor = 0xFFFFFFFFFF88AA62;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+932], -7820702		; ff88aa62H

; 44   : 	m_dwChatDebugColor = 0xFFFFFFFFFFA9C4E4;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+936], -5651228		; ffa9c4e4H

; 45   : 	m_dwChatBackgroundColor = -16777216;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+944], -16777216		; ff000000H

; 46   : 
; 47   : 	m_pD3DDevice = pD3DDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pD3DDevice$[ebp]
	mov	DWORD PTR [eax+972], ecx

; 48   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z$0:
	mov	eax, DWORD PTR $T209385[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z ENDP	; CChatWindow::CChatWindow
PUBLIC	??_GCD3DFont@@QAEPAXI@Z				; CD3DFont::`scalar deleting destructor'
PUBLIC	??1CChatWindow@@QAE@XZ				; CChatWindow::~CChatWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CChatWindow@@QAE@XZ
_TEXT	SEGMENT
tv71 = -232						; size = 4
$T209420 = -224						; size = 4
$T209421 = -212						; size = 4
_this$ = -8						; size = 4
??1CChatWindow@@QAE@XZ PROC				; CChatWindow::~CChatWindow, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 54   : 	if(m_pD3DFont) delete m_pD3DFont;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+968], 0
	je	SHORT $LN2@CChatWindo@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+968]
	mov	DWORD PTR $T209421[ebp], ecx
	mov	edx, DWORD PTR $T209421[ebp]
	mov	DWORD PTR $T209420[ebp], edx
	cmp	DWORD PTR $T209420[ebp], 0
	je	SHORT $LN4@CChatWindo@2
	push	1
	mov	ecx, DWORD PTR $T209420[ebp]
	call	??_GCD3DFont@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN2@CChatWindo@2
$LN4@CChatWindo@2:
	mov	DWORD PTR tv71[ebp], 0
$LN2@CChatWindo@2:

; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CChatWindow@@QAE@XZ ENDP				; CChatWindow::~CChatWindow
_TEXT	ENDS
EXTRN	??1CD3DFont@@QAE@XZ:PROC			; CD3DFont::~CD3DFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCD3DFont@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCD3DFont@@QAEPAXI@Z PROC				; CD3DFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CD3DFont@@QAE@XZ			; CD3DFont::~CD3DFont
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCD3DFont@@QAEPAXI@Z ENDP				; CD3DFont::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?Draw@CChatWindow@@QAEXXZ			; CChatWindow::Draw
EXTRN	?pD3DDevice@@3PAUIDirect3DDevice8@@A:DWORD	; pD3DDevice
EXTRN	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z:PROC	; CD3DFont::DrawTextA
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Draw@CChatWindow@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CChatWindow@@QAEXXZ$0
__ehfuncinfo$?Draw@CChatWindow@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@CChatWindow@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Draw@CChatWindow@@QAEXXZ
_TEXT	SEGMENT
tv185 = -320						; size = 4
tv184 = -316						; size = 4
tv164 = -316						; size = 4
$T209428 = -308						; size = 4
$T209429 = -296						; size = 4
_x$ = -92						; size = 4
_dwColorChat$ = -80					; size = 4
_fDrawY$ = -68						; size = 4
_fDrawX$ = -56						; size = 4
_DisplayMode$ = -44					; size = 16
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?Draw@CChatWindow@@QAEXXZ PROC				; CChatWindow::Draw, COMDAT
; _this$ = ecx

; 60   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Draw@CChatWindow@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 	D3DDISPLAYMODE DisplayMode;
; 62   : 	float fDrawX=m_fDrawStartX;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+948]
	fstp	DWORD PTR _fDrawX$[ebp]

; 63   : 	float fDrawY=m_fDrawStartY; 

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+952]
	fstp	DWORD PTR _fDrawY$[ebp]

; 64   : 	DWORD dwColorChat=0;

	mov	DWORD PTR _dwColorChat$[ebp], 0

; 65   : 
; 66   : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0

; 67   : 
; 68   : 	if(m_pD3DFont && m_bEnabled)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+968], 0
	je	$LN5@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN5@Draw
$LN4@Draw:

; 69   : 	{
; 70   : 		while(x!=(MAX_DISP_MESSAGES)) {

	cmp	DWORD PTR _x$[ebp], 7
	je	$LN3@Draw

; 71   : 			dwColorChat = m_dwChatColor[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+900]
	mov	DWORD PTR _dwColorChat$[ebp], edx

; 72   : 
; 73   : 			// Draws a drop shadow on the text. Too CPU intense?
; 74   : 			m_pD3DFont->DrawText(fDrawX+1.0f,fDrawY+1.0f,m_dwChatBackgroundColor,
; 75   : 				m_szChatWindowBuffer[x],0L,TRUE);

	push	1
	push	0
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+944]
	push	ecx
	fld	DWORD PTR _fDrawY$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv184[ebp]
	fld	DWORD PTR tv184[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _fDrawX$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv185[ebp]
	fld	DWORD PTR tv185[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+968]
	call	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z	; CD3DFont::DrawTextA

; 76   : 
; 77   : 			m_pD3DFont->DrawText(fDrawX,fDrawY,dwColorChat,
; 78   : 				m_szChatWindowBuffer[x]);

	push	0
	push	0
	mov	eax, DWORD PTR _x$[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _dwColorChat$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _fDrawY$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fDrawX$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+968]
	call	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z	; CD3DFont::DrawTextA

; 79   : 
; 80   : 			pD3DDevice->GetDisplayMode(&DisplayMode);

	mov	esi, esp
	lea	eax, DWORD PTR _DisplayMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pD3DDevice@@3PAUIDirect3DDevice8@@A ; pD3DDevice
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR ?pD3DDevice@@3PAUIDirect3DDevice8@@A ; pD3DDevice
	push	eax
	mov	ecx, DWORD PTR [edx+32]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 81   : 			//m_pD3DFont->DrawText(m_fDrawStartX,((float)(DisplayMode.Height)-20),D3DCOLOR_ARGB(255,255,255,255),
; 82   : 			//	"Vice City: Players - Development Version (" __TIME__ ", " __DATE__ ")");
; 83   : 
; 84   : 			fDrawY+=m_sizeText.cy+m_fDrawPadding;

	mov	eax, DWORD PTR _this$[ebp]
	fild	DWORD PTR [eax+964]
	mov	ecx, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [ecx+956]
	fadd	DWORD PTR _fDrawY$[ebp]
	fstp	DWORD PTR _fDrawY$[ebp]

; 85   : 		
; 86   : 			x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 87   : 		}

	jmp	$LN4@Draw
$LN3@Draw:

; 88   : 	} else {

	jmp	$LN1@Draw
$LN5@Draw:

; 89   : 		if((NULL == m_pD3DFont) && m_pD3DDevice) { // Create/recreate it.

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+968], 0
	jne	$LN1@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+972], 0
	je	$LN1@Draw

; 90   : 			m_pD3DFont = new CD3DFont(CHAT_FONT,CHAT_FONT_SIZE,0);

	push	1664					; 00000680H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209429[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209429[ebp], 0
	je	SHORT $LN8@Draw
	push	0
	push	12					; 0000000cH
	push	OFFSET ??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@
	mov	ecx, DWORD PTR $T209429[ebp]
	call	??0CD3DFont@@QAE@PADKK@Z		; CD3DFont::CD3DFont
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN9@Draw
$LN8@Draw:
	mov	DWORD PTR tv164[ebp], 0
$LN9@Draw:
	mov	eax, DWORD PTR tv164[ebp]
	mov	DWORD PTR $T209428[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T209428[ebp]
	mov	DWORD PTR [ecx+968], edx

; 91   : 			m_pD3DFont->InitDeviceObjects(m_pD3DDevice);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+972]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+968]
	call	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z ; CD3DFont::InitDeviceObjects

; 92   : 			m_pD3DFont->RestoreDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+968]
	call	?RestoreDeviceObjects@CD3DFont@@QAEJXZ	; CD3DFont::RestoreDeviceObjects
$LN1@Draw:

; 93   : 		}
; 94   : 	}
; 95   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@Draw:
	DD	1
	DD	$LN13@Draw
$LN13@Draw:
	DD	-44					; ffffffd4H
	DD	16					; 00000010H
	DD	$LN11@Draw
$LN11@Draw:
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@CChatWindow@@QAEXXZ$0:
	mov	eax, DWORD PTR $T209429[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Draw@CChatWindow@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-324]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Draw@CChatWindow@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Draw@CChatWindow@@QAEXXZ ENDP				; CChatWindow::Draw
PUBLIC	?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z	; CChatWindow::AddToChatWindowBuffer
PUBLIC	?FilterInvalidChars@CChatWindow@@AAEXPAD@Z	; CChatWindow::FilterInvalidChars
PUBLIC	?AddClientMessage@CChatWindow@@QAEXKPAD@Z	; CChatWindow::AddClientMessage
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddClientMessage@CChatWindow@@QAEXKPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwColor$ = 8						; size = 4
_szMessage$ = 12					; size = 4
?AddClientMessage@CChatWindow@@QAEXKPAD@Z PROC		; CChatWindow::AddClientMessage, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	FilterInvalidChars(szMessage);

	mov	eax, DWORD PTR _szMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FilterInvalidChars@CChatWindow@@AAEXPAD@Z ; CChatWindow::FilterInvalidChars

; 102  : 	AddToChatWindowBuffer(szMessage,dwColor); // (dwColor >> 8) | 0xFF000000

	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szMessage$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z ; CChatWindow::AddToChatWindowBuffer

; 103  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddClientMessage@CChatWindow@@QAEXKPAD@Z ENDP		; CChatWindow::AddClientMessage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AddChatMessage@CChatWindow@@QAEXPADK0@Z	; CChatWindow::AddChatMessage
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddChatMessage@CChatWindow@@QAEXPADK0@Z
_TEXT	SEGMENT
_t$ = -544						; size = 4
_tmp_buf$ = -532					; size = 512
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_szNick$ = 8						; size = 4
_dwNickColor$ = 12					; size = 4
_szMessage$ = 16					; size = 4
?AddChatMessage@CChatWindow@@QAEXPADK0@Z PROC		; CChatWindow::AddChatMessage, COMDAT
; _this$ = ecx

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 	char tmp_buf[512] = {0};

	mov	BYTE PTR _tmp_buf$[ebp], 0
	push	511					; 000001ffH
	push	0
	lea	eax, DWORD PTR _tmp_buf$[ebp+1]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 110  : 	char * t = tmp_buf;

	lea	eax, DWORD PTR _tmp_buf$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 111  : 
; 112  : 	memset(tmp_buf,0,512);

	push	512					; 00000200H
	push	0
	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 113  : 
; 114  : 	// NICKNAME
; 115  : 	*t = '\01'; t++; // color start

	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax], 1
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax

; 116  : 	memcpy(t,&dwNickColor,sizeof(DWORD)); t+=4; // nick color

	push	4
	lea	eax, DWORD PTR _dwNickColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax

; 117  : 	memcpy(t,szNick,strlen(szNick)); t+=strlen(szNick); // nick string

	mov	eax, DWORD PTR _szNick$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _szNick$[ebp]
	push	ecx
	mov	edx, DWORD PTR _t$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _szNick$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _t$[ebp]
	mov	DWORD PTR _t$[ebp], eax

; 118  : 	*t = '\01'; t++; // color start

	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax], 1
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax

; 119  : 	memcpy(t,&m_dwChatTextColor,sizeof(DWORD)); t+=4; // chat color

	push	4
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 928				; 000003a0H
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 4
	mov	DWORD PTR _t$[ebp], eax

; 120  : 	*t = ':'; t++;

	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax], 58			; 0000003aH
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax

; 121  : 	*t = ' '; t++;

	mov	eax, DWORD PTR _t$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
	mov	eax, DWORD PTR _t$[ebp]
	add	eax, 1
	mov	DWORD PTR _t$[ebp], eax

; 122  : 
; 123  : 	// MESSAGE
; 124  : 	FilterInvalidChars(szMessage);

	mov	eax, DWORD PTR _szMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FilterInvalidChars@CChatWindow@@AAEXPAD@Z ; CChatWindow::FilterInvalidChars

; 125  : 
; 126  : 	strcpy(t,szMessage);

	mov	eax, DWORD PTR _szMessage$[ebp]
	push	eax
	mov	ecx, DWORD PTR _t$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 127  : 
; 128  : 	AddToChatWindowBuffer(tmp_buf, m_dwChatTextColor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+928]
	push	ecx
	lea	edx, DWORD PTR _tmp_buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z ; CChatWindow::AddToChatWindowBuffer

; 129  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@AddChatMes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN5@AddChatMes:
	DD	1
	DD	$LN4@AddChatMes
$LN4@AddChatMes:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN3@AddChatMes
$LN3@AddChatMes:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?AddChatMessage@CChatWindow@@QAEXPADK0@Z ENDP		; CChatWindow::AddChatMessage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AddInfoMessage@CChatWindow@@QAAXPADZZ		; CChatWindow::AddInfoMessage
EXTRN	_vsprintf:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddInfoMessage@CChatWindow@@QAAXPADZZ
_TEXT	SEGMENT
_args$ = -532						; size = 4
_tmp_buf$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_szFormat$ = 12						; size = 4
?AddInfoMessage@CChatWindow@@QAAXPADZZ PROC		; CChatWindow::AddInfoMessage, COMDAT

; 134  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 135  : 	char tmp_buf[512];
; 136  : 	memset(tmp_buf,0,512);

	push	512					; 00000200H
	push	0
	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 137  : 
; 138  : 	va_list args;
; 139  : 	va_start(args, szFormat);

	lea	eax, DWORD PTR _szFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 140  : 	vsprintf(tmp_buf, szFormat, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szFormat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp_buf$[ebp]
	push	edx
	call	_vsprintf
	add	esp, 12					; 0000000cH

; 141  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 142  : 
; 143  : 	FilterInvalidChars(tmp_buf);

	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FilterInvalidChars@CChatWindow@@AAEXPAD@Z ; CChatWindow::FilterInvalidChars

; 144  : 	AddToChatWindowBuffer(tmp_buf, m_dwChatInfoColor);	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+932]
	push	ecx
	lea	edx, DWORD PTR _tmp_buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z ; CChatWindow::AddToChatWindowBuffer

; 145  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@AddInfoMes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@AddInfoMes:
	DD	1
	DD	$LN4@AddInfoMes
$LN4@AddInfoMes:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@AddInfoMes
$LN3@AddInfoMes:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?AddInfoMessage@CChatWindow@@QAAXPADZZ ENDP		; CChatWindow::AddInfoMessage
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?AddDebugMessage@CChatWindow@@QAAXPADZZ		; CChatWindow::AddDebugMessage
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddDebugMessage@CChatWindow@@QAAXPADZZ
_TEXT	SEGMENT
_args$ = -532						; size = 4
_tmp_buf$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_szFormat$ = 12						; size = 4
?AddDebugMessage@CChatWindow@@QAAXPADZZ PROC		; CChatWindow::AddDebugMessage, COMDAT

; 150  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 151  : 	char tmp_buf[512];
; 152  : 	memset(tmp_buf,0,512);

	push	512					; 00000200H
	push	0
	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 153  : 
; 154  : 	va_list args;
; 155  : 	va_start(args, szFormat);

	lea	eax, DWORD PTR _szFormat$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 156  : 	vsprintf(tmp_buf, szFormat, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szFormat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp_buf$[ebp]
	push	edx
	call	_vsprintf
	add	esp, 12					; 0000000cH

; 157  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 158  : 
; 159  : 	FilterInvalidChars(tmp_buf);

	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FilterInvalidChars@CChatWindow@@AAEXPAD@Z ; CChatWindow::FilterInvalidChars

; 160  : 	AddToChatWindowBuffer(tmp_buf, m_dwChatDebugColor);	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	push	ecx
	lea	edx, DWORD PTR _tmp_buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z ; CChatWindow::AddToChatWindowBuffer

; 161  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@AddDebugMe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@AddDebugMe:
	DD	1
	DD	$LN4@AddDebugMe
$LN4@AddDebugMe:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@AddDebugMe
$LN3@AddDebugMe:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?AddDebugMessage@CChatWindow@@QAAXPADZZ ENDP		; CChatWindow::AddDebugMessage
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?FilterInvalidChars@CChatWindow@@AAEXPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szString$ = 8						; size = 4
?FilterInvalidChars@CChatWindow@@AAEXPAD@Z PROC		; CChatWindow::FilterInvalidChars, COMDAT
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@FilterInva:

; 167  : 	while(*szString) {

	mov	eax, DWORD PTR _szString$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@FilterInva

; 168  : 		if(*szString < ' ' || *szString > 'z') {

	mov	eax, DWORD PTR _szString$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jl	SHORT $LN1@FilterInva
	mov	eax, DWORD PTR _szString$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 122				; 0000007aH
	jle	SHORT $LN2@FilterInva
$LN1@FilterInva:

; 169  : 			*szString = ' ';

	mov	eax, DWORD PTR _szString$[ebp]
	mov	BYTE PTR [eax], 32			; 00000020H
$LN2@FilterInva:

; 170  : 		}
; 171  : 		szString++;

	mov	eax, DWORD PTR _szString$[ebp]
	add	eax, 1
	mov	DWORD PTR _szString$[ebp], eax

; 172  : 	}

	jmp	SHORT $LN4@FilterInva
$LN5@FilterInva:

; 173  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?FilterInvalidChars@CChatWindow@@AAEXPAD@Z ENDP		; CChatWindow::FilterInvalidChars
_TEXT	ENDS
PUBLIC	?PushBack@CChatWindow@@AAEXXZ			; CChatWindow::PushBack
EXTRN	_strncpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z
_TEXT	SEGMENT
_iBestLineLength$ = -20					; size = 4
_this$ = -8						; size = 4
_szString$ = 8						; size = 4
_dwColor$ = 12						; size = 4
?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z PROC	; CChatWindow::AddToChatWindowBuffer, COMDAT
; _this$ = ecx

; 178  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 179  : 	int iBestLineLength;
; 180  : 	
; 181  : 	PushBack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushBack@CChatWindow@@AAEXXZ		; CChatWindow::PushBack

; 182  : 
; 183  : 	if(strlen(szString) > MAX_LINE_LENGTH)

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	cmp	eax, 64					; 00000040H
	jbe	$LN6@AddToChatW

; 184  : 	{
; 185  : 		iBestLineLength = MAX_LINE_LENGTH;

	mov	DWORD PTR _iBestLineLength$[ebp], 64	; 00000040H
$LN5@AddToChatW:

; 186  : 		// see if we can locate a space.
; 187  : 		while(szString[iBestLineLength] != ' ' && iBestLineLength)

	mov	eax, DWORD PTR _szString$[ebp]
	add	eax, DWORD PTR _iBestLineLength$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN4@AddToChatW
	cmp	DWORD PTR _iBestLineLength$[ebp], 0
	je	SHORT $LN4@AddToChatW

; 188  : 			iBestLineLength--;

	mov	eax, DWORD PTR _iBestLineLength$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iBestLineLength$[ebp], eax
	jmp	SHORT $LN5@AddToChatW
$LN4@AddToChatW:

; 189  : 
; 190  : 		if((MAX_LINE_LENGTH - iBestLineLength) > 8) {

	mov	eax, 64					; 00000040H
	sub	eax, DWORD PTR _iBestLineLength$[ebp]
	cmp	eax, 8
	jle	SHORT $LN3@AddToChatW

; 191  : 			// we should just take the whole line
; 192  : 			strncpy(m_szChatWindowBuffer[MAX_DISP_MESSAGES-1],szString,MAX_LINE_LENGTH);

	push	64					; 00000040H
	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 193  : 			m_szChatWindowBuffer[MAX_DISP_MESSAGES-1][MAX_LINE_LENGTH] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+836], 0

; 194  : 			m_dwChatColor[MAX_DISP_MESSAGES-1] = dwColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR [eax+924], ecx

; 195  : 			PushBack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushBack@CChatWindow@@AAEXXZ		; CChatWindow::PushBack

; 196  : 			strcpy(m_szChatWindowBuffer[MAX_DISP_MESSAGES-1],szString+MAX_LINE_LENGTH);

	mov	eax, DWORD PTR _szString$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	push	ecx
	call	_strcpy
	add	esp, 8

; 197  : 			m_dwChatColor[MAX_DISP_MESSAGES-1] = dwColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR [eax+924], ecx

; 198  : 		}
; 199  : 		else {

	jmp	SHORT $LN2@AddToChatW
$LN3@AddToChatW:

; 200  : 			// grab upto the found space.
; 201  : 			strncpy(m_szChatWindowBuffer[MAX_DISP_MESSAGES-1],szString,iBestLineLength);

	mov	eax, DWORD PTR _iBestLineLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szString$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 772				; 00000304H
	push	edx
	call	_strncpy
	add	esp, 12					; 0000000cH

; 202  : 			m_szChatWindowBuffer[MAX_DISP_MESSAGES-1][iBestLineLength] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _iBestLineLength$[ebp]
	mov	BYTE PTR [eax+772], 0

; 203  : 			m_dwChatColor[MAX_DISP_MESSAGES-1] = dwColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR [eax+924], ecx

; 204  : 			PushBack();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PushBack@CChatWindow@@AAEXXZ		; CChatWindow::PushBack

; 205  : 			strcpy(m_szChatWindowBuffer[MAX_DISP_MESSAGES-1],szString+(iBestLineLength+1));

	mov	eax, DWORD PTR _iBestLineLength$[ebp]
	mov	ecx, DWORD PTR _szString$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 772				; 00000304H
	push	eax
	call	_strcpy
	add	esp, 8

; 206  : 			m_dwChatColor[MAX_DISP_MESSAGES-1] = dwColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR [eax+924], ecx
$LN2@AddToChatW:

; 207  : 		}
; 208  : 	}
; 209  : 	else {

	jmp	SHORT $LN7@AddToChatW
$LN6@AddToChatW:

; 210  : 		strcpy(m_szChatWindowBuffer[MAX_DISP_MESSAGES-1],szString);

	mov	eax, DWORD PTR _szString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 772				; 00000304H
	push	ecx
	call	_strcpy
	add	esp, 8

; 211  : 		m_dwChatColor[MAX_DISP_MESSAGES-1] = dwColor;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR [eax+924], ecx
$LN7@AddToChatW:

; 212  : 	}
; 213  : 	
; 214  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddToChatWindowBuffer@CChatWindow@@AAEXPADK@Z ENDP	; CChatWindow::AddToChatWindowBuffer
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?PushBack@CChatWindow@@AAEXXZ
_TEXT	SEGMENT
_i$209354 = -20						; size = 4
_this$ = -8						; size = 4
?PushBack@CChatWindow@@AAEXXZ PROC			; CChatWindow::PushBack, COMDAT
; _this$ = ecx

; 219  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 220  : 	for(int i = 0; i < (MAX_DISP_MESSAGES - 1); i++) {

	mov	DWORD PTR _i$209354[ebp], 0
	jmp	SHORT $LN3@PushBack
$LN2@PushBack:
	mov	eax, DWORD PTR _i$209354[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209354[ebp], eax
$LN3@PushBack:
	cmp	DWORD PTR _i$209354[ebp], 6
	jge	SHORT $LN4@PushBack

; 221  : 		strcpy(m_szChatWindowBuffer[i],m_szChatWindowBuffer[i + 1]);

	mov	eax, DWORD PTR _i$209354[ebp]
	add	eax, 1
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	mov	eax, DWORD PTR _i$209354[ebp]
	shl	eax, 7
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+4]
	push	edx
	call	_strcpy
	add	esp, 8

; 222  : 		m_dwChatColor[i] = m_dwChatColor[i + 1];

	mov	eax, DWORD PTR _i$209354[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$209354[ebp]
	mov	esi, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [esi+edx*4+904]
	mov	DWORD PTR [ecx+eax*4+900], edx
	jmp	SHORT $LN2@PushBack
$LN4@PushBack:

; 223  : 	}
; 224  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?PushBack@CChatWindow@@AAEXXZ ENDP			; CChatWindow::PushBack
_TEXT	ENDS
PUBLIC	?DeleteDeviceObjects@CChatWindow@@QAEXXZ	; CChatWindow::DeleteDeviceObjects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DeleteDeviceObjects@CChatWindow@@QAEXXZ
_TEXT	SEGMENT
tv71 = -232						; size = 4
$T209474 = -224						; size = 4
$T209475 = -212						; size = 4
_this$ = -8						; size = 4
?DeleteDeviceObjects@CChatWindow@@QAEXXZ PROC		; CChatWindow::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 230  : 	SAFE_DELETE(m_pD3DFont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+968], 0
	je	SHORT $LN2@DeleteDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+968]
	mov	DWORD PTR $T209475[ebp], ecx
	mov	edx, DWORD PTR $T209475[ebp]
	mov	DWORD PTR $T209474[ebp], edx
	cmp	DWORD PTR $T209474[ebp], 0
	je	SHORT $LN4@DeleteDevi
	push	1
	mov	ecx, DWORD PTR $T209474[ebp]
	call	??_GCD3DFont@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@DeleteDevi
$LN4@DeleteDevi:
	mov	DWORD PTR tv71[ebp], 0
$LN5@DeleteDevi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+968], 0
$LN2@DeleteDevi:

; 231  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CChatWindow@@QAEXXZ ENDP		; CChatWindow::DeleteDeviceObjects
_TEXT	ENDS
END
