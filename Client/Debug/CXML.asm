; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Shared\CXML.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0CXML@@QAE@XZ					; CXML::CXML
EXTRN	??0TiXmlDocument@@QAE@XZ:PROC			; TiXmlDocument::TiXmlDocument
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\shared\cxml.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CXML@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CXML@@QAE@XZ PROC					; CXML::CXML, COMDAT
; _this$ = ecx

; 15   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlDocument@@QAE@XZ		; TiXmlDocument::TiXmlDocument

; 16   : 	m_node = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 17   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CXML@@QAE@XZ ENDP					; CXML::CXML
_TEXT	ENDS
PUBLIC	??1TiXmlDocument@@UAE@XZ			; TiXmlDocument::~TiXmlDocument
PUBLIC	??1CXML@@QAE@XZ					; CXML::~CXML
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CXML@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CXML@@QAE@XZ PROC					; CXML::~CXML, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 
; 22   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlDocument@@UAE@XZ		; TiXmlDocument::~TiXmlDocument
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CXML@@QAE@XZ ENDP					; CXML::~CXML
_TEXT	ENDS
PUBLIC	?RootElement@TiXmlDocument@@QAEPAVTiXmlElement@@XZ ; TiXmlDocument::RootElement
PUBLIC	?SetTabSize@TiXmlDocument@@QAEXH@Z		; TiXmlDocument::SetTabSize
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CXML::load
EXTRN	?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z:PROC ; TiXmlDocument::LoadFile
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
__ehfuncinfo$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T209505 = -245						; size = 1
$T209506 = -233						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_strFileName$ = 8					; size = 32
?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CXML::load, COMDAT
; _this$ = ecx

; 25   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 26   : 	m_node = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0

; 27   : 
; 28   : 	if(!m_document.LoadFile(strFileName.c_str()))

	push	0
	lea	ecx, DWORD PTR _strFileName$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LoadFile@TiXmlDocument@@QAE_NPBDW4TiXmlEncoding@@@Z ; TiXmlDocument::LoadFile
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@load

; 29   : 	{
; 30   : 		return false;

	mov	BYTE PTR $T209505[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFileName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	al, BYTE PTR $T209505[ebp]
	jmp	SHORT $LN2@load
$LN1@load:

; 31   : 	}
; 32   : 
; 33   : 	m_document.SetTabSize(4);

	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTabSize@TiXmlDocument@@QAEXH@Z	; TiXmlDocument::SetTabSize

; 34   : 	m_node = m_document.RootElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RootElement@TiXmlDocument@@QAEPAVTiXmlElement@@XZ ; TiXmlDocument::RootElement
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 35   : 	return true;

	mov	BYTE PTR $T209506[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strFileName$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	al, BYTE PTR $T209506[ebp]
$LN2@load:

; 36   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@load
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
	npad	3
$LN8@load:
	DD	1
	DD	$LN7@load
$LN7@load:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@load
$LN5@load:
	DB	95					; 0000005fH
	DB	36					; 00000024H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	lea	ecx, DWORD PTR _strFileName$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-256]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?load@CXML@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CXML::load
PUBLIC	?save@CXML@@QAE_NXZ				; CXML::save
EXTRN	?SaveFile@TiXmlDocument@@QBE_NXZ:PROC		; TiXmlDocument::SaveFile
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?save@CXML@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?save@CXML@@QAE_NXZ PROC				; CXML::save, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	return m_document.SaveFile();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?SaveFile@TiXmlDocument@@QBE_NXZ	; TiXmlDocument::SaveFile

; 41   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?save@CXML@@QAE_NXZ ENDP				; CXML::save
_TEXT	ENDS
PUBLIC	?setTabSize@CXML@@QAEXH@Z			; CXML::setTabSize
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setTabSize@CXML@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_size$ = 8						; size = 4
?setTabSize@CXML@@QAEXH@Z PROC				; CXML::setTabSize, COMDAT
; _this$ = ecx

; 44   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 45   : 	m_document.SetTabSize(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTabSize@TiXmlDocument@@QAEXH@Z	; TiXmlDocument::SetTabSize

; 46   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setTabSize@CXML@@QAEXH@Z ENDP				; CXML::setTabSize
_TEXT	ENDS
PUBLIC	?isComment@CXML@@QAE_NXZ			; CXML::isComment
PUBLIC	?getAttribute@CXML@@QAEPBDPBD@Z			; CXML::getAttribute
EXTRN	?Attribute@TiXmlElement@@QBEPBDPBD@Z:PROC	; TiXmlElement::Attribute
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?getAttribute@CXML@@QAEPBDPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_attributeName$ = 8					; size = 4
?getAttribute@CXML@@QAEPBDPBD@Z PROC			; CXML::getAttribute, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	if(m_node && !isComment())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@getAttribu
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isComment@CXML@@QAE_NXZ		; CXML::isComment
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@getAttribu

; 51   : 	{
; 52   : 		return m_node->Attribute(attributeName);

	mov	eax, DWORD PTR _attributeName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?Attribute@TiXmlElement@@QBEPBDPBD@Z	; TiXmlElement::Attribute
	jmp	SHORT $LN2@getAttribu
$LN1@getAttribu:

; 53   : 	}
; 54   : 
; 55   : 	return NULL;

	xor	eax, eax
$LN2@getAttribu:

; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?getAttribute@CXML@@QAEPBDPBD@Z ENDP			; CXML::getAttribute
_TEXT	ENDS
PUBLIC	?removeAttribute@CXML@@QAEXPBD@Z		; CXML::removeAttribute
EXTRN	?RemoveAttribute@TiXmlElement@@QAEXPBD@Z:PROC	; TiXmlElement::RemoveAttribute
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?removeAttribute@CXML@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_attributeName$ = 8					; size = 4
?removeAttribute@CXML@@QAEXPBD@Z PROC			; CXML::removeAttribute, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	if(m_node && !isComment())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@removeAttr
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isComment@CXML@@QAE_NXZ		; CXML::isComment
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@removeAttr

; 61   : 	{
; 62   : 		m_node->RemoveAttribute(attributeName);

	mov	eax, DWORD PTR _attributeName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?RemoveAttribute@TiXmlElement@@QAEXPBD@Z ; TiXmlElement::RemoveAttribute
$LN2@removeAttr:

; 63   : 	}
; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?removeAttribute@CXML@@QAEXPBD@Z ENDP			; CXML::removeAttribute
_TEXT	ENDS
PUBLIC	?setAttribute@CXML@@QAEXPBD0@Z			; CXML::setAttribute
EXTRN	?SetAttribute@TiXmlElement@@QAEXPBD0@Z:PROC	; TiXmlElement::SetAttribute
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?setAttribute@CXML@@QAEXPBD0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_attributeName$ = 8					; size = 4
_value$ = 12						; size = 4
?setAttribute@CXML@@QAEXPBD0@Z PROC			; CXML::setAttribute, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 	if(m_node && !isComment())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@setAttribu
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isComment@CXML@@QAE_NXZ		; CXML::isComment
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@setAttribu

; 69   : 	{
; 70   : 		m_node->SetAttribute(attributeName, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attributeName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	?SetAttribute@TiXmlElement@@QAEXPBD0@Z	; TiXmlElement::SetAttribute
$LN2@setAttribu:

; 71   : 	}
; 72   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?setAttribute@CXML@@QAEXPBD0@Z ENDP			; CXML::setAttribute
_TEXT	ENDS
PUBLIC	?Value@TiXmlNode@@QBEPBDXZ			; TiXmlNode::Value
PUBLIC	?nodeName@CXML@@QAEPBDXZ			; CXML::nodeName
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nodeName@CXML@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?nodeName@CXML@@QAEPBDXZ PROC				; CXML::nodeName, COMDAT
; _this$ = ecx

; 75   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 76   : 	if(m_node)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@nodeName

; 77   : 	{
; 78   : 		return m_node->Value();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?Value@TiXmlNode@@QBEPBDXZ		; TiXmlNode::Value
	jmp	SHORT $LN2@nodeName
$LN1@nodeName:

; 79   : 	}
; 80   : 
; 81   : 	return NULL;

	xor	eax, eax
$LN2@nodeName:

; 82   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?nodeName@CXML@@QAEPBDXZ ENDP				; CXML::nodeName
_TEXT	ENDS
PUBLIC	?SetValue@TiXmlNode@@QAEXPBD@Z			; TiXmlNode::SetValue
PUBLIC	?nodeSetName@CXML@@QAEXPBD@Z			; CXML::nodeSetName
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nodeSetName@CXML@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_content$ = 8						; size = 4
?nodeSetName@CXML@@QAEXPBD@Z PROC			; CXML::nodeSetName, COMDAT
; _this$ = ecx

; 85   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 86   : 	if(m_node)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@nodeSetNam

; 87   : 	{
; 88   : 		m_node->SetValue(content);

	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?SetValue@TiXmlNode@@QAEXPBD@Z		; TiXmlNode::SetValue
$LN2@nodeSetNam:

; 89   : 	}
; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?nodeSetName@CXML@@QAEXPBD@Z ENDP			; CXML::nodeSetName
_TEXT	ENDS
PUBLIC	?nodeContent@CXML@@QAEPBDXZ			; CXML::nodeContent
EXTRN	?GetText@TiXmlElement@@QBEPBDXZ:PROC		; TiXmlElement::GetText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nodeContent@CXML@@QAEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?nodeContent@CXML@@QAEPBDXZ PROC			; CXML::nodeContent, COMDAT
; _this$ = ecx

; 93   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 94   : 	if(m_node && !isComment())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@nodeConten
	mov	ecx, DWORD PTR _this$[ebp]
	call	?isComment@CXML@@QAE_NXZ		; CXML::isComment
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@nodeConten

; 95   : 	{
; 96   : 		return m_node->GetText();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?GetText@TiXmlElement@@QBEPBDXZ		; TiXmlElement::GetText
	jmp	SHORT $LN2@nodeConten
$LN1@nodeConten:

; 97   : 	}
; 98   : 
; 99   : 	return NULL;

	xor	eax, eax
$LN2@nodeConten:

; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?nodeContent@CXML@@QAEPBDXZ ENDP			; CXML::nodeContent
_TEXT	ENDS
PUBLIC	??0TiXmlText@@QAE@PBD@Z				; TiXmlText::TiXmlText
PUBLIC	?nodeSetContent@CXML@@QAEXPBD@Z			; CXML::nodeSetContent
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z:PROC	; TiXmlNode::LinkEndChild
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?Clear@TiXmlNode@@QAEXXZ:PROC			; TiXmlNode::Clear
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?nodeSetContent@CXML@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?nodeSetContent@CXML@@QAEXPBD@Z$0
__ehfuncinfo$?nodeSetContent@CXML@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?nodeSetContent@CXML@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?nodeSetContent@CXML@@QAEXPBD@Z
_TEXT	SEGMENT
tv80 = -256						; size = 4
$T209541 = -248						; size = 4
$T209542 = -236						; size = 4
_newNode$209299 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_content$ = 8						; size = 4
?nodeSetContent@CXML@@QAEXPBD@Z PROC			; CXML::nodeSetContent, COMDAT
; _this$ = ecx

; 103  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?nodeSetContent@CXML@@QAEXPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 104  : 	if(m_node)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@nodeSetCon

; 105  : 	{
; 106  : 		m_node->Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear

; 107  : 		// This could cause leaks?
; 108  : 		TiXmlText * newNode = new TiXmlText(content);

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209542[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209542[ebp], 0
	je	SHORT $LN4@nodeSetCon
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T209542[ebp]
	call	??0TiXmlText@@QAE@PBD@Z			; TiXmlText::TiXmlText
	mov	DWORD PTR tv80[ebp], eax
	jmp	SHORT $LN5@nodeSetCon
$LN4@nodeSetCon:
	mov	DWORD PTR tv80[ebp], 0
$LN5@nodeSetCon:
	mov	ecx, DWORD PTR tv80[ebp]
	mov	DWORD PTR $T209541[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209541[ebp]
	mov	DWORD PTR _newNode$209299[ebp], edx

; 109  : 		m_node->LinkEndChild(newNode);

	mov	eax, DWORD PTR _newNode$209299[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild
$LN2@nodeSetCon:

; 110  : 	}
; 111  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?nodeSetContent@CXML@@QAEXPBD@Z$0:
	mov	eax, DWORD PTR $T209542[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?nodeSetContent@CXML@@QAEXPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?nodeSetContent@CXML@@QAEXPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?nodeSetContent@CXML@@QAEXPBD@Z ENDP			; CXML::nodeSetContent
PUBLIC	?nodeToRoot@CXML@@QAEXXZ			; CXML::nodeToRoot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nodeToRoot@CXML@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?nodeToRoot@CXML@@QAEXXZ PROC				; CXML::nodeToRoot, COMDAT
; _this$ = ecx

; 114  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 115  : 	m_node = m_document.RootElement();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?RootElement@TiXmlDocument@@QAEPAVTiXmlElement@@XZ ; TiXmlDocument::RootElement
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 116  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?nodeToRoot@CXML@@QAEXXZ ENDP				; CXML::nodeToRoot
_TEXT	ENDS
PUBLIC	?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z		; TiXmlNode::FirstChild
PUBLIC	?findNode@CXML@@QAE_NPBD@Z			; CXML::findNode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?findNode@CXML@@QAE_NPBD@Z
_TEXT	SEGMENT
tv85 = -208						; size = 4
_this$ = -8						; size = 4
_name$ = 8						; size = 4
?findNode@CXML@@QAE_NPBD@Z PROC				; CXML::findNode, COMDAT
; _this$ = ecx

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 120  : 	if(m_node && m_node->FirstChild(name) != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@findNode
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z	; TiXmlNode::FirstChild
	test	eax, eax
	je	SHORT $LN1@findNode

; 121  : 	{
; 122  : 		m_node = m_node->FirstChild(name)->ToElement();

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z	; TiXmlNode::FirstChild
	mov	DWORD PTR tv85[ebp], eax
	mov	edx, DWORD PTR tv85[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv85[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 123  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@findNode
$LN1@findNode:

; 124  : 	}
; 125  : 
; 126  : 	return false;

	xor	al, al
$LN2@findNode:

; 127  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?findNode@CXML@@QAE_NPBD@Z ENDP				; CXML::findNode
_TEXT	ENDS
PUBLIC	?NextSibling@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::NextSibling
PUBLIC	?nextNode@CXML@@QAE_NXZ				; CXML::nextNode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nextNode@CXML@@QAE_NXZ
_TEXT	SEGMENT
tv83 = -208						; size = 4
_this$ = -8						; size = 4
?nextNode@CXML@@QAE_NXZ PROC				; CXML::nextNode, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 	if(m_node && m_node->NextSibling() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@nextNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?NextSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::NextSibling
	test	eax, eax
	je	SHORT $LN1@nextNode

; 132  : 	{
; 133  : 		m_node = m_node->NextSibling()->ToElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?NextSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::NextSibling
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 134  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@nextNode
$LN1@nextNode:

; 135  : 	}
; 136  : 
; 137  : 	return false;

	xor	al, al
$LN2@nextNode:

; 138  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?nextNode@CXML@@QAE_NXZ ENDP				; CXML::nextNode
_TEXT	ENDS
PUBLIC	?PreviousSibling@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::PreviousSibling
PUBLIC	?previousNode@CXML@@QAE_NXZ			; CXML::previousNode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?previousNode@CXML@@QAE_NXZ
_TEXT	SEGMENT
tv83 = -208						; size = 4
_this$ = -8						; size = 4
?previousNode@CXML@@QAE_NXZ PROC			; CXML::previousNode, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 142  : 	if(m_node && m_node->PreviousSibling() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@previousNo
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?PreviousSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::PreviousSibling
	test	eax, eax
	je	SHORT $LN1@previousNo

; 143  : 	{
; 144  : 		m_node = m_node->PreviousSibling()->ToElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?PreviousSibling@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::PreviousSibling
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 145  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@previousNo
$LN1@previousNo:

; 146  : 	}
; 147  : 
; 148  : 	return false;

	xor	al, al
$LN2@previousNo:

; 149  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?previousNode@CXML@@QAE_NXZ ENDP			; CXML::previousNode
_TEXT	ENDS
PUBLIC	?FirstChild@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::FirstChild
PUBLIC	?childNodeFirst@CXML@@QAE_NXZ			; CXML::childNodeFirst
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?childNodeFirst@CXML@@QAE_NXZ
_TEXT	SEGMENT
tv83 = -208						; size = 4
_this$ = -8						; size = 4
?childNodeFirst@CXML@@QAE_NXZ PROC			; CXML::childNodeFirst, COMDAT
; _this$ = ecx

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 153  : 	if(m_node && m_node->FirstChild() != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@childNodeF
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?FirstChild@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::FirstChild
	test	eax, eax
	je	SHORT $LN1@childNodeF

; 154  : 	{
; 155  : 		m_node = m_node->FirstChild()->ToElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?FirstChild@TiXmlNode@@QAEPAV1@XZ	; TiXmlNode::FirstChild
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 156  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@childNodeF
$LN1@childNodeF:

; 157  : 	}
; 158  : 
; 159  : 	return false;

	xor	al, al
$LN2@childNodeF:

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?childNodeFirst@CXML@@QAE_NXZ ENDP			; CXML::childNodeFirst
_TEXT	ENDS
PUBLIC	?Parent@TiXmlNode@@QAEPAV1@XZ			; TiXmlNode::Parent
PUBLIC	?nodeParent@CXML@@QAEXXZ			; CXML::nodeParent
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nodeParent@CXML@@QAEXXZ
_TEXT	SEGMENT
tv83 = -208						; size = 4
_this$ = -8						; size = 4
?nodeParent@CXML@@QAEXXZ PROC				; CXML::nodeParent, COMDAT
; _this$ = ecx

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 164  : 	if(m_node && m_node->Parent())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@nodeParent
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?Parent@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::Parent
	test	eax, eax
	je	SHORT $LN2@nodeParent

; 165  : 	{
; 166  : 		m_node = m_node->Parent()->ToElement();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?Parent@TiXmlNode@@QAEPAV1@XZ		; TiXmlNode::Parent
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax
$LN2@nodeParent:

; 167  : 	}
; 168  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?nodeParent@CXML@@QAEXXZ ENDP				; CXML::nodeParent
_TEXT	ENDS
PUBLIC	?nodeClear@CXML@@QAEXXZ				; CXML::nodeClear
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?nodeClear@CXML@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?nodeClear@CXML@@QAEXXZ PROC				; CXML::nodeClear, COMDAT
; _this$ = ecx

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 172  : 	if(m_node)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@nodeClear

; 173  : 	{
; 174  : 		m_node->Clear();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?Clear@TiXmlNode@@QAEXXZ		; TiXmlNode::Clear
$LN2@nodeClear:

; 175  : 	}
; 176  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?nodeClear@CXML@@QAEXXZ ENDP				; CXML::nodeClear
_TEXT	ENDS
PUBLIC	?newNode@CXML@@QAEXPBD_N@Z			; CXML::newNode
EXTRN	??0TiXmlElement@@QAE@PBD@Z:PROC			; TiXmlElement::TiXmlElement
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newNode@CXML@@QAEXPBD_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newNode@CXML@@QAEXPBD_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?newNode@CXML@@QAEXPBD_N@Z$1
__ehfuncinfo$?newNode@CXML@@QAEXPBD_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?newNode@CXML@@QAEXPBD_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?newNode@CXML@@QAEXPBD_N@Z
_TEXT	SEGMENT
tv129 = -280						; size = 4
tv75 = -280						; size = 4
$T209568 = -272						; size = 4
$T209569 = -260						; size = 4
$T209572 = -248						; size = 4
$T209573 = -236						; size = 4
_newNode$209344 = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_name$ = 8						; size = 4
_nodePointerToNewNode$ = 12				; size = 1
?newNode@CXML@@QAEXPBD_N@Z PROC				; CXML::newNode, COMDAT
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newNode@CXML@@QAEXPBD_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 180  : 	if(nodePointerToNewNode == true)

	movzx	eax, BYTE PTR _nodePointerToNewNode$[ebp]
	cmp	eax, 1
	jne	SHORT $LN3@newNode

; 181  : 	{
; 182  : 		// This could cause leaks?
; 183  : 		m_node = new TiXmlElement(name);

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209569[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209569[ebp], 0
	je	SHORT $LN6@newNode
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T209569[ebp]
	call	??0TiXmlElement@@QAE@PBD@Z		; TiXmlElement::TiXmlElement
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN7@newNode
$LN6@newNode:
	mov	DWORD PTR tv75[ebp], 0
$LN7@newNode:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T209568[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T209568[ebp]
	mov	DWORD PTR [edx+72], eax

; 184  : 		m_node->LinkEndChild(m_node);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+72]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild

; 185  : 	}
; 186  : 	else

	jmp	SHORT $LN4@newNode
$LN3@newNode:

; 187  : 	{
; 188  : 		if(m_node)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN4@newNode

; 189  : 		{
; 190  : 			// This could cause leaks?
; 191  : 			TiXmlElement * newNode = new TiXmlElement(name);

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209573[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T209573[ebp], 0
	je	SHORT $LN8@newNode
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T209573[ebp]
	call	??0TiXmlElement@@QAE@PBD@Z		; TiXmlElement::TiXmlElement
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN9@newNode
$LN8@newNode:
	mov	DWORD PTR tv129[ebp], 0
$LN9@newNode:
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T209572[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209572[ebp]
	mov	DWORD PTR _newNode$209344[ebp], edx

; 192  : 			m_node->LinkEndChild(newNode);

	mov	eax, DWORD PTR _newNode$209344[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild
$LN4@newNode:

; 193  : 		}
; 194  : 	}
; 195  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newNode@CXML@@QAEXPBD_N@Z$0:
	mov	eax, DWORD PTR $T209569[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?newNode@CXML@@QAEXPBD_N@Z$1:
	mov	eax, DWORD PTR $T209573[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?newNode@CXML@@QAEXPBD_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newNode@CXML@@QAEXPBD_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?newNode@CXML@@QAEXPBD_N@Z ENDP				; CXML::newNode
PUBLIC	??0TiXmlComment@@QAE@PBD@Z			; TiXmlComment::TiXmlComment
PUBLIC	?newComment@CXML@@QAEXPBD@Z			; CXML::newComment
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?newComment@CXML@@QAEXPBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?newComment@CXML@@QAEXPBD@Z$0
__ehfuncinfo$?newComment@CXML@@QAEXPBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?newComment@CXML@@QAEXPBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?newComment@CXML@@QAEXPBD@Z
_TEXT	SEGMENT
tv74 = -256						; size = 4
$T209586 = -248						; size = 4
$T209587 = -236						; size = 4
_newComment$209354 = -32				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_comment$ = 8						; size = 4
?newComment@CXML@@QAEXPBD@Z PROC			; CXML::newComment, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?newComment@CXML@@QAEXPBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	if(m_node)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN2@newComment

; 200  : 	{
; 201  : 		TiXmlComment * newComment = new TiXmlComment(comment);

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209587[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209587[ebp], 0
	je	SHORT $LN4@newComment
	mov	eax, DWORD PTR _comment$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T209587[ebp]
	call	??0TiXmlComment@@QAE@PBD@Z		; TiXmlComment::TiXmlComment
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@newComment
$LN4@newComment:
	mov	DWORD PTR tv74[ebp], 0
$LN5@newComment:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T209586[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209586[ebp]
	mov	DWORD PTR _newComment$209354[ebp], edx

; 202  : 		m_node->LinkEndChild(newComment);

	mov	eax, DWORD PTR _newComment$209354[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+72]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild
$LN2@newComment:

; 203  : 	}
; 204  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?newComment@CXML@@QAEXPBD@Z$0:
	mov	eax, DWORD PTR $T209587[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?newComment@CXML@@QAEXPBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?newComment@CXML@@QAEXPBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?newComment@CXML@@QAEXPBD@Z ENDP			; CXML::newComment
PUBLIC	?ErrorDesc@TiXmlDocument@@QBEPBDXZ		; TiXmlDocument::ErrorDesc
PUBLIC	?ErrorRow@TiXmlDocument@@QBEHXZ			; TiXmlDocument::ErrorRow
PUBLIC	?ErrorCol@TiXmlDocument@@QBEHXZ			; TiXmlDocument::ErrorCol
PUBLIC	?Error@TiXmlDocument@@QBE_NXZ			; TiXmlDocument::Error
PUBLIC	?lastError@CXML@@QAEPBDPAH0@Z			; CXML::lastError
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?lastError@CXML@@QAEPBDPAH0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iErrorRow$ = 8						; size = 4
_iErrorCol$ = 12					; size = 4
?lastError@CXML@@QAEPBDPAH0@Z PROC			; CXML::lastError, COMDAT
; _this$ = ecx

; 207  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 208  : 	if(m_document.Error())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Error@TiXmlDocument@@QBE_NXZ		; TiXmlDocument::Error
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@lastError

; 209  : 	{
; 210  : 		if(iErrorRow)

	cmp	DWORD PTR _iErrorRow$[ebp], 0
	je	SHORT $LN2@lastError

; 211  : 		{
; 212  : 			*iErrorRow = m_document.ErrorCol();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ErrorCol@TiXmlDocument@@QBEHXZ		; TiXmlDocument::ErrorCol
	mov	ecx, DWORD PTR _iErrorRow$[ebp]
	mov	DWORD PTR [ecx], eax
$LN2@lastError:

; 213  : 		}
; 214  : 
; 215  : 		if(iErrorCol)

	cmp	DWORD PTR _iErrorCol$[ebp], 0
	je	SHORT $LN1@lastError

; 216  : 		{
; 217  : 			*iErrorCol = m_document.ErrorRow();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ErrorRow@TiXmlDocument@@QBEHXZ		; TiXmlDocument::ErrorRow
	mov	ecx, DWORD PTR _iErrorCol$[ebp]
	mov	DWORD PTR [ecx], eax
$LN1@lastError:

; 218  : 		}
; 219  : 
; 220  : 		return m_document.ErrorDesc();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ErrorDesc@TiXmlDocument@@QBEPBDXZ	; TiXmlDocument::ErrorDesc
	jmp	SHORT $LN4@lastError
$LN3@lastError:

; 221  : 	}
; 222  : 
; 223  : 	return NULL;

	xor	eax, eax
$LN4@lastError:

; 224  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?lastError@CXML@@QAEPBDPAH0@Z ENDP			; CXML::lastError
_TEXT	ENDS
PUBLIC	?Type@TiXmlNode@@QBEHXZ				; TiXmlNode::Type
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?isComment@CXML@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?isComment@CXML@@QAE_NXZ PROC				; CXML::isComment, COMDAT
; _this$ = ecx

; 227  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 228  : 	if(m_node && m_node->Type() == TiXmlNode::COMMENT)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN1@isComment
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	call	?Type@TiXmlNode@@QBEHXZ			; TiXmlNode::Type
	cmp	eax, 2
	jne	SHORT $LN1@isComment

; 229  : 	{
; 230  : 		return true;

	mov	al, 1
	jmp	SHORT $LN2@isComment
$LN1@isComment:

; 231  : 	}
; 232  : 
; 233  : 	return false;

	xor	al, al
$LN2@isComment:

; 234  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?isComment@CXML@@QAE_NXZ ENDP				; CXML::isComment
_TEXT	ENDS
PUBLIC	?c_str@TiXmlString@@QBEPBDXZ			; TiXmlString::c_str
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinyxml.h
;	COMDAT ?Value@TiXmlNode@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Value@TiXmlNode@@QBEPBDXZ PROC				; TiXmlNode::Value, COMDAT
; _this$ = ecx

; 503  : 	const char *Value() const { return value.c_str (); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Value@TiXmlNode@@QBEPBDXZ ENDP				; TiXmlNode::Value
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinystr.h
_TEXT	ENDS
;	COMDAT ?c_str@TiXmlString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@TiXmlString@@QBEPBDXZ PROC			; TiXmlString::c_str, COMDAT
; _this$ = ecx

; 142  : 	const char * c_str () const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@TiXmlString@@QBEPBDXZ ENDP			; TiXmlString::c_str
_TEXT	ENDS
PUBLIC	??4TiXmlString@@QAEAAV0@PBD@Z			; TiXmlString::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinyxml.h
;	COMDAT ?SetValue@TiXmlNode@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__value$ = 8						; size = 4
?SetValue@TiXmlNode@@QAEXPBD@Z PROC			; TiXmlNode::SetValue, COMDAT
; _this$ = ecx

; 524  : 	void SetValue(const char * _value) { value = _value;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetValue@TiXmlNode@@QAEXPBD@Z ENDP			; TiXmlNode::SetValue
_TEXT	ENDS
EXTRN	?assign@TiXmlString@@QAEAAV1@PBDI@Z:PROC	; TiXmlString::assign
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinystr.h
;	COMDAT ??4TiXmlString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??4TiXmlString@@QAEAAV0@PBD@Z PROC			; TiXmlString::operator=, COMDAT
; _this$ = ecx

; 111  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return assign( copy, (size_type)strlen(copy));

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::assign

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlString@@QAEAAV0@PBD@Z ENDP			; TiXmlString::operator=
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinyxml.h
_TEXT	ENDS
;	COMDAT ?Parent@TiXmlNode@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Parent@TiXmlNode@@QAEPAV1@XZ PROC			; TiXmlNode::Parent, COMDAT
; _this$ = ecx

; 535  : 	TiXmlNode* Parent()							{ return parent; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Parent@TiXmlNode@@QAEPAV1@XZ ENDP			; TiXmlNode::Parent
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?FirstChild@TiXmlNode@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FirstChild@TiXmlNode@@QAEPAV1@XZ PROC			; TiXmlNode::FirstChild, COMDAT
; _this$ = ecx

; 539  : 	TiXmlNode* FirstChild()						{ return firstChild; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChild@TiXmlNode@@QAEPAV1@XZ ENDP			; TiXmlNode::FirstChild
_TEXT	ENDS
EXTRN	?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z:PROC	; TiXmlNode::FirstChild
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__value$ = 8						; size = 4
?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z PROC		; TiXmlNode::FirstChild, COMDAT
; _this$ = ecx

; 542  : 	TiXmlNode* FirstChild( const char * _value ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 543  : 		// Call through to the const version - safe since nothing is changed. Exiting syntax: cast this to a const (always safe)
; 544  : 		// call the method, cast the return back to non-const.
; 545  : 		return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->FirstChild( _value ));

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChild@TiXmlNode@@QBEPBV1@PBD@Z	; TiXmlNode::FirstChild

; 546  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FirstChild@TiXmlNode@@QAEPAV1@PBD@Z ENDP		; TiXmlNode::FirstChild
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?PreviousSibling@TiXmlNode@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?PreviousSibling@TiXmlNode@@QAEPAV1@XZ PROC		; TiXmlNode::PreviousSibling, COMDAT
; _this$ = ecx

; 631  : 	TiXmlNode* PreviousSibling()						{ return prev; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?PreviousSibling@TiXmlNode@@QAEPAV1@XZ ENDP		; TiXmlNode::PreviousSibling
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?NextSibling@TiXmlNode@@QAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?NextSibling@TiXmlNode@@QAEPAV1@XZ PROC			; TiXmlNode::NextSibling, COMDAT
; _this$ = ecx

; 648  : 	TiXmlNode* NextSibling()							{ return next; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+40]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?NextSibling@TiXmlNode@@QAEPAV1@XZ ENDP			; TiXmlNode::NextSibling
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Type@TiXmlNode@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Type@TiXmlNode@@QBEHXZ PROC				; TiXmlNode::Type, COMDAT
; _this$ = ecx

; 700  : 	int Type() const	{ return type; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Type@TiXmlNode@@QBEHXZ ENDP				; TiXmlNode::Type
_TEXT	ENDS
PUBLIC	??_7TiXmlComment@@6B@				; TiXmlComment::`vftable'
PUBLIC	??_R4TiXmlComment@@6B@				; TiXmlComment::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlComment@@@8			; TiXmlComment `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlComment@@8				; TiXmlComment::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlComment@@8				; TiXmlComment::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlComment@@8			; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@TiXmlNode@@8			; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTiXmlNode@@@8				; TiXmlNode `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlNode@@8				; TiXmlNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlNode@@8				; TiXmlNode::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlBase@@8			; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTiXmlBase@@@8				; TiXmlBase `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlBase@@8				; TiXmlBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlBase@@8				; TiXmlBase::`RTTI Base Class Array'
PUBLIC	?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ	; TiXmlNode::ToDocument
PUBLIC	?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ	; TiXmlNode::ToDocument
PUBLIC	?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ	; TiXmlNode::ToElement
PUBLIC	?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ	; TiXmlNode::ToElement
PUBLIC	?ToComment@TiXmlComment@@UAEPAV1@XZ		; TiXmlComment::ToComment
PUBLIC	?ToComment@TiXmlComment@@UBEPBV1@XZ		; TiXmlComment::ToComment
PUBLIC	?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ	; TiXmlNode::ToUnknown
PUBLIC	?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ	; TiXmlNode::ToUnknown
PUBLIC	?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ		; TiXmlNode::ToText
PUBLIC	?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ		; TiXmlNode::ToText
PUBLIC	?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ ; TiXmlNode::ToDeclaration
PUBLIC	?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ ; TiXmlNode::ToDeclaration
PUBLIC	?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ ; TiXmlNode::ToStylesheetReference
PUBLIC	?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ ; TiXmlNode::ToStylesheetReference
EXTRN	??1TiXmlNode@@UAE@XZ:PROC			; TiXmlNode::~TiXmlNode
EXTRN	??0TiXmlNode@@IAE@W4NodeType@0@@Z:PROC		; TiXmlNode::TiXmlNode
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETiXmlComment@@UAEPAXI@Z:PROC		; TiXmlComment::`vector deleting destructor'
EXTRN	?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z:PROC	; TiXmlComment::Print
EXTRN	?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlComment::Parse
EXTRN	?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ:PROC	; TiXmlComment::Clone
EXTRN	?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlComment::Accept
;	COMDAT ??_R2TiXmlBase@@8
rdata$r	SEGMENT
??_R2TiXmlBase@@8 DD FLAT:??_R1A@?0A@EA@TiXmlBase@@8	; TiXmlBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TiXmlBase@@8
rdata$r	SEGMENT
??_R3TiXmlBase@@8 DD 00H				; TiXmlBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlBase@@@8
_DATA	SEGMENT
??_R0?AVTiXmlBase@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlBase@@8 DD FLAT:??_R0?AVTiXmlBase@@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlNode@@8
rdata$r	SEGMENT
??_R2TiXmlNode@@8 DD FLAT:??_R1A@?0A@EA@TiXmlNode@@8	; TiXmlNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlNode@@8
rdata$r	SEGMENT
??_R3TiXmlNode@@8 DD 00H				; TiXmlNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlNode@@@8
_DATA	SEGMENT
??_R0?AVTiXmlNode@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlNode@@8 DD FLAT:??_R0?AVTiXmlNode@@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlComment@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlComment@@8 DD FLAT:??_R0?AVTiXmlComment@@@8 ; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlComment@@8
rdata$r	SEGMENT
??_R2TiXmlComment@@8 DD FLAT:??_R1A@?0A@EA@TiXmlComment@@8 ; TiXmlComment::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlComment@@8
rdata$r	SEGMENT
??_R3TiXmlComment@@8 DD 00H				; TiXmlComment::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlComment@@@8
_DATA	SEGMENT
??_R0?AVTiXmlComment@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlComment `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlComment@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlComment@@6B@
rdata$r	SEGMENT
??_R4TiXmlComment@@6B@ DD 00H				; TiXmlComment::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlComment@@@8
	DD	FLAT:??_R3TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlComment@@6B@
CONST	SEGMENT
??_7TiXmlComment@@6B@ DD FLAT:??_R4TiXmlComment@@6B@	; TiXmlComment::`vftable'
	DD	FLAT:??_ETiXmlComment@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlComment@@UAEPAV1@XZ
	DD	FLAT:?ToComment@TiXmlComment@@UBEPBV1@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlComment@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlComment@@QAE@PBD@Z$0
__ehfuncinfo$??0TiXmlComment@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlComment@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TiXmlComment@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__value$ = 8						; size = 4
??0TiXmlComment@@QAE@PBD@Z PROC				; TiXmlComment::TiXmlComment, COMDAT
; _this$ = ecx

; 1177 : 	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::COMMENT ) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlComment@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@

; 1178 : 		SetValue( _value );

	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@TiXmlNode@@QAEXPBD@Z		; TiXmlNode::SetValue

; 1179 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlComment@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlComment@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlComment@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlComment@@QAE@PBD@Z ENDP				; TiXmlComment::TiXmlComment
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ PROC	; TiXmlNode::ToDocument, COMDAT
; _this$ = ecx

; 713  : 	virtual const TiXmlDocument*    ToDocument()    const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ ENDP	; TiXmlNode::ToDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ PROC	; TiXmlNode::ToElement, COMDAT
; _this$ = ecx

; 714  : 	virtual const TiXmlElement*     ToElement()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ ENDP	; TiXmlNode::ToElement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ PROC	; TiXmlNode::ToUnknown, COMDAT
; _this$ = ecx

; 716  : 	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ ENDP	; TiXmlNode::ToUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ PROC		; TiXmlNode::ToText, COMDAT
; _this$ = ecx

; 717  : 	virtual const TiXmlText*        ToText()        const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ ENDP		; TiXmlNode::ToText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ PROC ; TiXmlNode::ToDeclaration, COMDAT
; _this$ = ecx

; 718  : 	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ ENDP ; TiXmlNode::ToDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ PROC ; TiXmlNode::ToStylesheetReference, COMDAT
; _this$ = ecx

; 719  : 	virtual const TiXmlStylesheetReference* ToStylesheetReference() const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ ENDP ; TiXmlNode::ToStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ PROC	; TiXmlNode::ToDocument, COMDAT
; _this$ = ecx

; 721  : 	virtual TiXmlDocument*          ToDocument()    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ ENDP	; TiXmlNode::ToDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ PROC	; TiXmlNode::ToElement, COMDAT
; _this$ = ecx

; 722  : 	virtual TiXmlElement*           ToElement()	    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ ENDP	; TiXmlNode::ToElement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ PROC	; TiXmlNode::ToUnknown, COMDAT
; _this$ = ecx

; 724  : 	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ ENDP	; TiXmlNode::ToUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ PROC		; TiXmlNode::ToText, COMDAT
; _this$ = ecx

; 725  : 	virtual TiXmlText*	            ToText()        { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ ENDP		; TiXmlNode::ToText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ PROC ; TiXmlNode::ToDeclaration, COMDAT
; _this$ = ecx

; 726  : 	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ ENDP ; TiXmlNode::ToDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ PROC ; TiXmlNode::ToStylesheetReference, COMDAT
; _this$ = ecx

; 727  : 	virtual TiXmlStylesheetReference*       ToStylesheetReference() { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ ENDP ; TiXmlNode::ToStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlComment@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlComment@@UBEPBV1@XZ PROC		; TiXmlComment::ToComment, COMDAT
; _this$ = ecx

; 1195 : 	virtual const TiXmlComment*  ToComment() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlComment@@UBEPBV1@XZ ENDP		; TiXmlComment::ToComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlComment@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlComment@@UAEPAV1@XZ PROC		; TiXmlComment::ToComment, COMDAT
; _this$ = ecx

; 1196 : 	virtual TiXmlComment*  ToComment() { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlComment@@UAEPAV1@XZ ENDP		; TiXmlComment::ToComment
_TEXT	ENDS
PUBLIC	??1TiXmlComment@@UAE@XZ				; TiXmlComment::~TiXmlComment
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlComment@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlComment@@UAEPAXI@Z PROC			; TiXmlComment::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlComment@@UAE@XZ			; TiXmlComment::~TiXmlComment
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlComment@@UAEPAXI@Z ENDP			; TiXmlComment::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1TiXmlComment@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlComment@@UAE@XZ PROC				; TiXmlComment::~TiXmlComment, COMDAT
; _this$ = ecx

; 1183 : 	virtual ~TiXmlComment()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlComment@@UAE@XZ ENDP				; TiXmlComment::~TiXmlComment
_TEXT	ENDS
PUBLIC	??_7TiXmlText@@6B@				; TiXmlText::`vftable'
PUBLIC	??_R4TiXmlText@@6B@				; TiXmlText::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlText@@@8				; TiXmlText `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlText@@8				; TiXmlText::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlText@@8				; TiXmlText::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlText@@8			; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ	; TiXmlNode::ToComment
PUBLIC	?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ	; TiXmlNode::ToComment
PUBLIC	?ToText@TiXmlText@@UAEPAV1@XZ			; TiXmlText::ToText
PUBLIC	?ToText@TiXmlText@@UBEPBV1@XZ			; TiXmlText::ToText
EXTRN	??_ETiXmlText@@UAEPAXI@Z:PROC			; TiXmlText::`vector deleting destructor'
EXTRN	?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z:PROC	; TiXmlText::Print
EXTRN	?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlText::Parse
EXTRN	?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ:PROC	; TiXmlText::Clone
EXTRN	?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlText::Accept
;	COMDAT ??_R1A@?0A@EA@TiXmlText@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlText@@8 DD FLAT:??_R0?AVTiXmlText@@@8 ; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlText@@8
rdata$r	SEGMENT
??_R2TiXmlText@@8 DD FLAT:??_R1A@?0A@EA@TiXmlText@@8	; TiXmlText::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlText@@8
rdata$r	SEGMENT
??_R3TiXmlText@@8 DD 00H				; TiXmlText::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlText@@@8
_DATA	SEGMENT
??_R0?AVTiXmlText@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlText `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlText@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlText@@6B@
rdata$r	SEGMENT
??_R4TiXmlText@@6B@ DD 00H				; TiXmlText::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlText@@@8
	DD	FLAT:??_R3TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlText@@6B@
CONST	SEGMENT
??_7TiXmlText@@6B@ DD FLAT:??_R4TiXmlText@@6B@		; TiXmlText::`vftable'
	DD	FLAT:??_ETiXmlText@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlText@@UAEPAV1@XZ
	DD	FLAT:?ToText@TiXmlText@@UBEPBV1@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlText@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlText@@QAE@PBD@Z$0
__ehfuncinfo$??0TiXmlText@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlText@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TiXmlText@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_initValue$ = 8						; size = 4
??0TiXmlText@@QAE@PBD@Z PROC				; TiXmlText::TiXmlText, COMDAT
; _this$ = ecx

; 1230 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlText@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlText@@6B@

; 1231 : 		SetValue( initValue );

	mov	eax, DWORD PTR _initValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@TiXmlNode@@QAEXPBD@Z		; TiXmlNode::SetValue

; 1232 : 		cdata = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 1233 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlText@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlText@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlText@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlText@@QAE@PBD@Z ENDP				; TiXmlText::TiXmlText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ PROC	; TiXmlNode::ToComment, COMDAT
; _this$ = ecx

; 715  : 	virtual const TiXmlComment*     ToComment()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ ENDP	; TiXmlNode::ToComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ PROC	; TiXmlNode::ToComment, COMDAT
; _this$ = ecx

; 723  : 	virtual TiXmlComment*           ToComment()     { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ ENDP	; TiXmlNode::ToComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlText@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlText@@UBEPBV1@XZ PROC			; TiXmlText::ToText, COMDAT
; _this$ = ecx

; 1258 : 	virtual const TiXmlText* ToText() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlText@@UBEPBV1@XZ ENDP			; TiXmlText::ToText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlText@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlText@@UAEPAV1@XZ PROC			; TiXmlText::ToText, COMDAT
; _this$ = ecx

; 1259 : 	virtual TiXmlText*       ToText()       { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlText@@UAEPAV1@XZ ENDP			; TiXmlText::ToText
_TEXT	ENDS
PUBLIC	??1TiXmlText@@UAE@XZ				; TiXmlText::~TiXmlText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlText@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlText@@UAEPAXI@Z PROC				; TiXmlText::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlText@@UAE@XZ			; TiXmlText::~TiXmlText
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlText@@UAEPAXI@Z ENDP				; TiXmlText::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1TiXmlText@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlText@@UAE@XZ PROC				; TiXmlText::~TiXmlText, COMDAT
; _this$ = ecx

; 1234 : 	virtual ~TiXmlText() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlText@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlText@@UAE@XZ ENDP				; TiXmlText::~TiXmlText
_TEXT	ENDS
PUBLIC	??1TiXmlString@@QAE@XZ				; TiXmlString::~TiXmlString
PUBLIC	??_7TiXmlDocument@@6B@				; TiXmlDocument::`vftable'
PUBLIC	??_R4TiXmlDocument@@6B@				; TiXmlDocument::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlDocument@@@8			; TiXmlDocument `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlDocument@@8				; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlDocument@@8				; TiXmlDocument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlDocument@@8			; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ToDocument@TiXmlDocument@@UAEPAV1@XZ		; TiXmlDocument::ToDocument
PUBLIC	?ToDocument@TiXmlDocument@@UBEPBV1@XZ		; TiXmlDocument::ToDocument
EXTRN	??_ETiXmlDocument@@UAEPAXI@Z:PROC		; TiXmlDocument::`vector deleting destructor'
EXTRN	?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z:PROC	; TiXmlDocument::Print
EXTRN	?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:PROC ; TiXmlDocument::Parse
EXTRN	?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ:PROC	; TiXmlDocument::Clone
EXTRN	?Accept@TiXmlDocument@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlDocument::Accept
;	COMDAT ??_R1A@?0A@EA@TiXmlDocument@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlDocument@@8 DD FLAT:??_R0?AVTiXmlDocument@@@8 ; TiXmlDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlDocument@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlDocument@@8
rdata$r	SEGMENT
??_R2TiXmlDocument@@8 DD FLAT:??_R1A@?0A@EA@TiXmlDocument@@8 ; TiXmlDocument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlDocument@@8
rdata$r	SEGMENT
??_R3TiXmlDocument@@8 DD 00H				; TiXmlDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlDocument@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlDocument@@@8
_DATA	SEGMENT
??_R0?AVTiXmlDocument@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlDocument@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlDocument@@6B@
rdata$r	SEGMENT
??_R4TiXmlDocument@@6B@ DD 00H				; TiXmlDocument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlDocument@@@8
	DD	FLAT:??_R3TiXmlDocument@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlDocument@@6B@
CONST	SEGMENT
??_7TiXmlDocument@@6B@ DD FLAT:??_R4TiXmlDocument@@6B@	; TiXmlDocument::`vftable'
	DD	FLAT:??_ETiXmlDocument@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlDocument@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlDocument@@UAEPAV1@XZ
	DD	FLAT:?ToDocument@TiXmlDocument@@UBEPBV1@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlDocument@@MBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlDocument@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlDocument@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlDocument@@UAE@XZ$0
__ehfuncinfo$??1TiXmlDocument@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1TiXmlDocument@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1TiXmlDocument@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlDocument@@UAE@XZ PROC				; TiXmlDocument::~TiXmlDocument, COMDAT
; _this$ = ecx

; 1482 : 	virtual ~TiXmlDocument() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlDocument@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDocument@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlDocument@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??1TiXmlDocument@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlDocument@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlDocument@@UAE@XZ ENDP				; TiXmlDocument::~TiXmlDocument
PUBLIC	?quit@TiXmlString@@AAEXXZ			; TiXmlString::quit
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinystr.h
;	COMDAT ??1TiXmlString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlString@@QAE@XZ PROC				; TiXmlString::~TiXmlString, COMDAT
; _this$ = ecx

; 105  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 		quit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?quit@TiXmlString@@AAEXXZ		; TiXmlString::quit

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlString@@QAE@XZ ENDP				; TiXmlString::~TiXmlString
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	?nullrep_@TiXmlString@@0URep@1@A:BYTE		; TiXmlString::nullrep_
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?quit@TiXmlString@@AAEXXZ
_TEXT	SEGMENT
$T209699 = -212						; size = 4
_this$ = -8						; size = 4
?quit@TiXmlString@@AAEXXZ PROC				; TiXmlString::quit, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		if (rep_ != &nullrep_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_
	je	SHORT $LN2@quit

; 256  : 		{
; 257  : 			// The rep_ is really an array of ints. (see the allocator, above).
; 258  : 			// Cast it back before delete, so the compiler won't incorrectly call destructors.
; 259  : 			delete [] ( reinterpret_cast<int*>( rep_ ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T209699[ebp], ecx
	mov	edx, DWORD PTR $T209699[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@quit:

; 260  : 		}
; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?quit@TiXmlString@@AAEXXZ ENDP				; TiXmlString::quit
_TEXT	ENDS
PUBLIC	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinyxml.h
;	COMDAT ?RootElement@TiXmlDocument@@QAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?RootElement@TiXmlDocument@@QAEPAVTiXmlElement@@XZ PROC	; TiXmlDocument::RootElement, COMDAT
; _this$ = ecx

; 1530 : 	TiXmlElement* RootElement()					{ return FirstChildElement(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RootElement@TiXmlDocument@@QAEPAVTiXmlElement@@XZ ENDP	; TiXmlDocument::RootElement
_TEXT	ENDS
EXTRN	?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ:PROC ; TiXmlNode::FirstChildElement
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ PROC ; TiXmlNode::FirstChildElement, COMDAT
; _this$ = ecx

; 681  : 	TiXmlElement* FirstChildElement() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 682  : 		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FirstChildElement@TiXmlNode@@QBEPBVTiXmlElement@@XZ ; TiXmlNode::FirstChildElement

; 683  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FirstChildElement@TiXmlNode@@QAEPAVTiXmlElement@@XZ ENDP ; TiXmlNode::FirstChildElement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Error@TiXmlDocument@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Error@TiXmlDocument@@QBE_NXZ PROC			; TiXmlDocument::Error, COMDAT
; _this$ = ecx

; 1537 : 	bool Error() const						{ return error; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+44]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Error@TiXmlDocument@@QBE_NXZ ENDP			; TiXmlDocument::Error
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ErrorDesc@TiXmlDocument@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ErrorDesc@TiXmlDocument@@QBEPBDXZ PROC			; TiXmlDocument::ErrorDesc, COMDAT
; _this$ = ecx

; 1540 : 	const char * ErrorDesc() const	{ return errorDesc.c_str (); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorDesc@TiXmlDocument@@QBEPBDXZ ENDP			; TiXmlDocument::ErrorDesc
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ErrorRow@TiXmlDocument@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ErrorRow@TiXmlDocument@@QBEHXZ PROC			; TiXmlDocument::ErrorRow, COMDAT
; _this$ = ecx

; 1554 : 	int ErrorRow() const	{ return errorLocation.row+1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	add	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorRow@TiXmlDocument@@QBEHXZ ENDP			; TiXmlDocument::ErrorRow
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ErrorCol@TiXmlDocument@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ErrorCol@TiXmlDocument@@QBEHXZ PROC			; TiXmlDocument::ErrorCol, COMDAT
; _this$ = ecx

; 1555 : 	int ErrorCol() const	{ return errorLocation.col+1; }	///< The column where the error occured. See ErrorRow()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+64]
	add	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ErrorCol@TiXmlDocument@@QBEHXZ ENDP			; TiXmlDocument::ErrorCol
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetTabSize@TiXmlDocument@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__tabsize$ = 8						; size = 4
?SetTabSize@TiXmlDocument@@QAEXH@Z PROC			; TiXmlDocument::SetTabSize, COMDAT
; _this$ = ecx

; 1581 : 	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __tabsize$[ebp]
	mov	DWORD PTR [eax+56], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTabSize@TiXmlDocument@@QAEXH@Z ENDP			; TiXmlDocument::SetTabSize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlDocument@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@TiXmlDocument@@UBEPBV1@XZ PROC		; TiXmlDocument::ToDocument, COMDAT
; _this$ = ecx

; 1609 : 	virtual const TiXmlDocument*    ToDocument()    const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlDocument@@UBEPBV1@XZ ENDP		; TiXmlDocument::ToDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlDocument@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@TiXmlDocument@@UAEPAV1@XZ PROC		; TiXmlDocument::ToDocument, COMDAT
; _this$ = ecx

; 1610 : 	virtual TiXmlDocument*          ToDocument()          { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlDocument@@UAEPAV1@XZ ENDP		; TiXmlDocument::ToDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_GTiXmlDocument@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlDocument@@UAEPAXI@Z PROC			; TiXmlDocument::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlDocument@@UAE@XZ		; TiXmlDocument::~TiXmlDocument
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlDocument@@UAEPAXI@Z ENDP			; TiXmlDocument::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
xdata$x	SEGMENT
__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 905  : 		{	// destroy the string

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 906  : 		_Tidy(true);

	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 907  : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1650 : 		{	// return pointer to null-terminated nonmutable array

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1651 : 		return (_Myptr());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr

; 1652 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
PUBLIC	??1_String_base@std@@QAE@XZ			; std::_String_base::~_String_base
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_String_base@std@@QAE@XZ
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_String_val<char,std::allocator<char> >::~_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1_Container_base_secure@std@@QAE@XZ		; std::_Container_base_secure::~_Container_base_secure
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1_String_base@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_String_base@std@@QAE@XZ PROC			; std::_String_base::~_String_base, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Container_base_secure@std@@QAE@XZ	; std::_Container_base_secure::~_Container_base_secure
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_String_base@std@@QAE@XZ ENDP			; std::_String_base::~_String_base
_TEXT	ENDS
PUBLIC	?_Orphan_all@_Container_base_secure@std@@QBEXXZ	; std::_Container_base_secure::_Orphan_all
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xutility
;	COMDAT ??1_Container_base_secure@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Container_base_secure@std@@QAE@XZ PROC		; std::_Container_base_secure::~_Container_base_secure, COMDAT
; _this$ = ecx

; 113  : 		{	// destroy the container

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 114  : 		_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base_secure@std@@QBEXXZ ; std::_Container_base_secure::_Orphan_all

; 115  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Container_base_secure@std@@QAE@XZ ENDP		; std::_Container_base_secure::~_Container_base_secure
_TEXT	ENDS
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Orphan_all@_Container_base_secure@std@@QBEXXZ
_TEXT	SEGMENT
__Pnext$9026 = -32					; size = 4
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_all@_Container_base_secure@std@@QBEXXZ PROC	; std::_Container_base_secure::_Orphan_all, COMDAT
; _this$ = ecx

; 217  : 	{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 218  : 	_Lockit _Lock(_LOCK_DEBUG);

	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??0_Lockit@std@@QAE@H@Z			; std::_Lockit::_Lockit

; 219  : 	if (_Myfirstiter != _IGNORE_MYITERLIST)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -3			; fffffffdH
	je	SHORT $LN4@Orphan_all

; 220  : 		{
; 221  : 		for (_Iterator_base **_Pnext = (_Iterator_base **)&_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Pnext$9026[ebp], eax
	jmp	SHORT $LN3@Orphan_all
$LN2@Orphan_all:

; 222  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)

	mov	eax, DWORD PTR __Pnext$9026[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$9026[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN3@Orphan_all:
	mov	eax, DWORD PTR __Pnext$9026[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Orphan_all

; 223  : 			(*_Pnext)->_Mycont = 0;

	mov	eax, DWORD PTR __Pnext$9026[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN2@Orphan_all
$LN1@Orphan_all:

; 224  : 		*(_Iterator_base **)&_Myfirstiter = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@Orphan_all:

; 225  : 		}
; 226  : 	}

	lea	ecx, DWORD PTR __Lock$[ebp]
	call	??1_Lockit@std@@QAE@XZ			; std::_Lockit::~_Lockit
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Orphan_all:
	DD	1
	DD	$LN9@Orphan_all
$LN9@Orphan_all:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN8@Orphan_all
$LN8@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all@_Container_base_secure@std@@QBEXXZ ENDP	; std::_Container_base_secure::_Orphan_all
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Ptr$196307 = -20					; size = 4
_this$ = -8						; size = 4
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 2148 : 		{	// initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2149 : 		if (!_Built)

	movzx	eax, BYTE PTR __Built$[ebp]
	test	eax, eax
	jne	SHORT $LN4@Tidy
	jmp	SHORT $LN3@Tidy
$LN4@Tidy:

; 2150 : 			;
; 2151 : 		else if (_BUF_SIZE <= _Myres)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Tidy

; 2152 : 			{	// copy any leftovers to small buffer and deallocate
; 2153 : 			_Elem *_Ptr = _Bx._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Ptr$196307[ebp], ecx

; 2154 : 			if (0 < _Newsize)

	cmp	DWORD PTR __Newsize$[ebp], 0
	jbe	SHORT $LN1@Tidy

; 2155 : 				_Traits_helper::copy_s<_Traits>(_Bx._Buf, _BUF_SIZE, _Ptr, _Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$196307[ebp]
	push	ecx
	push	16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 16					; 00000010H
$LN1@Tidy:

; 2156 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Ptr$196307[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate
$LN3@Tidy:

; 2157 : 			}
; 2158 : 		_Myres = _BUF_SIZE - 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 15			; 0000000fH

; 2159 : 		_Eos(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2160 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2174 : 		{	// determine current pointer to buffer for nonmutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2175 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Myptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr
$LN3@Myptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr:
	mov	eax, DWORD PTR tv70[ebp]

; 2176 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xmemory
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 139  : 		{	// deallocate object at _Ptr, ignore size

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		::operator delete(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
$T209755 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 2113 : 		{	// set new length and null terminator

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2114 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

	mov	BYTE PTR $T209755[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [eax+24], ecx
	lea	edx, DWORD PTR $T209755[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
	add	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	call	?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign
	add	esp, 8

; 2115 : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 424  : 		{	// assign an element

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 425  : 		_Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 426  : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\xstring
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2169 : 		{	// determine current pointer to buffer for mutable string

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2170 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 16			; 00000010H
	jb	SHORT $LN3@Myptr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN4@Myptr@2
$LN3@Myptr@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv70[ebp], eax
$LN4@Myptr@2:
	mov	eax, DWORD PTR tv70[ebp]

; 2171 : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
PUBLIC	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\iosfwd
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z
_TEXT	SEGMENT
$T209764 = -197						; size = 1
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 588  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 589  : 		return copy_s<_Traits>(_First1, _Size, _First2, _Count, _Char_traits_cat<_Traits>());

	call	??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ; std::_Char_traits_cat<std::char_traits<char> >
	mov	BYTE PTR $T209764[ebp], al
	movzx	eax, BYTE PTR $T209764[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First2$[ebp]
	push	edx
	mov	eax, DWORD PTR __Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First1$[ebp]
	push	ecx
	call	??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ; std::_Traits_helper::copy_s<std::char_traits<char> >
	add	esp, 20					; 00000014H

; 590  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ
_TEXT	SEGMENT
__Secure$ = -5						; size = 1
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ PROC ; std::_Char_traits_cat<std::char_traits<char> >, COMDAT

; 575  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 576  : 		typename _Char_traits_category<_Traits>::_Secure_char_traits _Secure;
; 577  : 		return (_Secure);

	mov	al, BYTE PTR __Secure$[ebp]

; 578  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Char_trait
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@Char_trait:
	DD	1
	DD	$LN4@Char_trait
$LN4@Char_trait:
	DD	-5					; fffffffbH
	DD	1
	DD	$LN3@Char_trait
$LN3@Char_trait:
	DB	95					; 0000005fH
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ ENDP ; std::_Char_traits_cat<std::char_traits<char> >
_TEXT	ENDS
PUBLIC	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z	; std::char_traits<char>::_Copy_s
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size$ = 12						; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
___formal$ = 24						; size = 1
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z PROC ; std::_Traits_helper::copy_s<std::char_traits<char> >, COMDAT

; 596  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 597  : 		return _Traits::_Copy_s(_First1, _Size, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ; std::char_traits<char>::_Copy_s
	add	esp, 16					; 00000010H

; 598  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z ENDP ; std::_Traits_helper::copy_s<std::char_traits<char> >
_TEXT	ENDS
EXTRN	_memcpy_s:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__Size_in_bytes$ = 12					; size = 4
__First2$ = 16						; size = 4
__Count$ = 20						; size = 4
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z PROC	; std::char_traits<char>::_Copy_s, COMDAT

; 462  : 		{	// copy [_First1, _First1 + _Count) to [_First2, ...)

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 463  : //		_DEBUG_POINTER(_First1);
; 464  : //		_DEBUG_POINTER(_First2);
; 465  : 		_CRT_SECURE_MEMCPY(_First1, _Size_in_bytes, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Size_in_bytes$[ebp]
	push	edx
	mov	eax, DWORD PTR __First1$[ebp]
	push	eax
	call	_memcpy_s
	add	esp, 16					; 00000010H

; 466  : 		return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 467  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z ENDP	; std::char_traits<char>::_Copy_s
_TEXT	ENDS
END
