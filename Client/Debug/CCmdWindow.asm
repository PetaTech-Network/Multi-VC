; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\CCmdWindow.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	__real@403e000000000000
PUBLIC	__real@401c000000000000
PUBLIC	__real@40400000
PUBLIC	__real@41c80000
PUBLIC	??_C@_01ELNMCGJD@W?$AA@				; `string'
PUBLIC	__real@00000000
PUBLIC	??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@		; `string'
PUBLIC	??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z	; CCmdWindow::CCmdWindow
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z:PROC ; CD3DFont::GetTextExtent
EXTRN	?RestoreDeviceObjects@CD3DFont@@QAEJXZ:PROC	; CD3DFont::RestoreDeviceObjects
EXTRN	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z:PROC ; CD3DFont::InitDeviceObjects
EXTRN	??0CD3DFont@@QAE@PADKK@Z:PROC			; CD3DFont::CD3DFont
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@403e000000000000
; File d:\vice-players-master\client\ccmdwindow.cpp
CONST	SEGMENT
__real@403e000000000000 DQ 0403e000000000000r	; 30
CONST	ENDS
;	COMDAT __real@401c000000000000
CONST	SEGMENT
__real@401c000000000000 DQ 0401c000000000000r	; 7
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@41c80000
CONST	SEGMENT
__real@41c80000 DD 041c80000r			; 25
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W?$AA@
CONST	SEGMENT
??_C@_01ELNMCGJD@W?$AA@ DB 'W', 00H			; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@
CONST	SEGMENT
??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@ DB 'Arial BOLD', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z$0
__ehfuncinfo$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
tv79 = -260						; size = 4
$T209415 = -252						; size = 4
$T209416 = -240						; size = 4
_size$ = -36						; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pD3DDevice$ = 8					; size = 4
??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z PROC		; CCmdWindow::CCmdWindow, COMDAT
; _this$ = ecx

; 20   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-260]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 21   : 	SIZE size;
; 22   : 
; 23   : 	m_bEnabled			= FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 24   : 	m_pD3DFont			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0

; 25   : 	m_iCmdCount			= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4840], 0

; 26   : 
; 27   : 	if(pD3DDevice) {

	cmp	DWORD PTR _pD3DDevice$[ebp], 0
	je	$LN1@CCmdWindow

; 28   : 		m_pD3DFont = new CD3DFont(CHAT_FONT,CHAT_FONT_SIZE+4,0);

	push	1664					; 00000680H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209416[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209416[ebp], 0
	je	SHORT $LN4@CCmdWindow
	push	0
	push	16					; 00000010H
	push	OFFSET ??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@
	mov	ecx, DWORD PTR $T209416[ebp]
	call	??0CD3DFont@@QAE@PADKK@Z		; CD3DFont::CD3DFont
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN5@CCmdWindow
$LN4@CCmdWindow:
	mov	DWORD PTR tv79[ebp], 0
$LN5@CCmdWindow:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR $T209415[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T209415[ebp]
	mov	DWORD PTR [ecx+92], edx

; 29   : 		m_pD3DFont->InitDeviceObjects(pD3DDevice);

	mov	eax, DWORD PTR _pD3DDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z ; CD3DFont::InitDeviceObjects

; 30   : 		m_pD3DFont->RestoreDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	?RestoreDeviceObjects@CD3DFont@@QAEJXZ	; CD3DFont::RestoreDeviceObjects
$LN1@CCmdWindow:

; 31   : 	}
; 32   : 
; 33   : 	m_pD3DFont->GetTextExtent("W",&size);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	OFFSET ??_C@_01ELNMCGJD@W?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z ; CD3DFont::GetTextExtent

; 34   : 
; 35   : 	m_fDrawStartX		= 25.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@41c80000
	fstp	DWORD PTR [eax+72]

; 36   : 	m_fDrawPadding		= 3.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@40400000
	fstp	DWORD PTR [eax+80]

; 37   : 	m_fDrawStartY		= 30.0f + ((size.cy+m_fDrawPadding) * MAX_DISP_MESSAGES);

	fild	DWORD PTR _size$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	fadd	DWORD PTR [eax+80]
	fmul	QWORD PTR __real@401c000000000000
	fadd	QWORD PTR __real@403e000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+76]

; 38   : 
; 39   : 	m_szInputBuffer[0] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0

; 40   : 	m_dwDrawColor = D3DCOLOR_ARGB(255,255,255,255);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], -1

; 41   : 	m_dwBackgroundColor = D3DCOLOR_ARGB(255,0,0,0);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], -16777216		; ff000000H

; 42   : 
; 43   : 	m_pD3DDevice = pD3DDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pD3DDevice$[ebp]
	mov	DWORD PTR [eax+96], ecx

; 44   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CCmdWindow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN10@CCmdWindow:
	DD	1
	DD	$LN9@CCmdWindow
$LN9@CCmdWindow:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN7@CCmdWindow
$LN7@CCmdWindow:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z$0:
	mov	eax, DWORD PTR $T209416[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z ENDP		; CCmdWindow::CCmdWindow
PUBLIC	??_GCD3DFont@@QAEPAXI@Z				; CD3DFont::`scalar deleting destructor'
PUBLIC	??1CCmdWindow@@QAE@XZ				; CCmdWindow::~CCmdWindow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CCmdWindow@@QAE@XZ
_TEXT	SEGMENT
tv71 = -232						; size = 4
$T209457 = -224						; size = 4
$T209458 = -212						; size = 4
_this$ = -8						; size = 4
??1CCmdWindow@@QAE@XZ PROC				; CCmdWindow::~CCmdWindow, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	if(m_pD3DFont) delete m_pD3DFont;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN2@CCmdWindow@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR $T209458[ebp], ecx
	mov	edx, DWORD PTR $T209458[ebp]
	mov	DWORD PTR $T209457[ebp], edx
	cmp	DWORD PTR $T209457[ebp], 0
	je	SHORT $LN4@CCmdWindow@2
	push	1
	mov	ecx, DWORD PTR $T209457[ebp]
	call	??_GCD3DFont@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN2@CCmdWindow@2
$LN4@CCmdWindow@2:
	mov	DWORD PTR tv71[ebp], 0
$LN2@CCmdWindow@2:

; 51   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCmdWindow@@QAE@XZ ENDP				; CCmdWindow::~CCmdWindow
_TEXT	ENDS
EXTRN	??1CD3DFont@@QAE@XZ:PROC			; CD3DFont::~CD3DFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCD3DFont@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCD3DFont@@QAEPAXI@Z PROC				; CD3DFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CD3DFont@@QAE@XZ			; CD3DFont::~CD3DFont
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCD3DFont@@QAEPAXI@Z ENDP				; CD3DFont::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Enable@CCmdWindow@@QAEXXZ			; CCmdWindow::Enable
EXTRN	?ToggleKeyInputsDisabled@CGame@@QAEXH@Z:PROC	; CGame::ToggleKeyInputsDisabled
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Enable@CCmdWindow@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Enable@CCmdWindow@@QAEXXZ PROC				; CCmdWindow::Enable, COMDAT
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   : 	m_bEnabled = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 1

; 58   : 	pGame->ToggleKeyInputsDisabled(TRUE);

	push	1
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleKeyInputsDisabled@CGame@@QAEXH@Z	; CGame::ToggleKeyInputsDisabled

; 59   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Enable@CCmdWindow@@QAEXXZ ENDP				; CCmdWindow::Enable
_TEXT	ENDS
PUBLIC	?Disable@CCmdWindow@@QAEXXZ			; CCmdWindow::Disable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Disable@CCmdWindow@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Disable@CCmdWindow@@QAEXXZ PROC			; CCmdWindow::Disable, COMDAT
; _this$ = ecx

; 64   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 65   : 	m_bEnabled = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0

; 66   : 	pGame->ToggleKeyInputsDisabled(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleKeyInputsDisabled@CGame@@QAEXH@Z	; CGame::ToggleKeyInputsDisabled

; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Disable@CCmdWindow@@QAEXXZ ENDP			; CCmdWindow::Disable
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	??_C@_05ENPENPBL@?$DO?5?$CFs_?$AA@		; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?Draw@CCmdWindow@@QAEXXZ			; CCmdWindow::Draw
EXTRN	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z:PROC	; CD3DFont::DrawTextA
EXTRN	_sprintf:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_05ENPENPBL@?$DO?5?$CFs_?$AA@
CONST	SEGMENT
??_C@_05ENPENPBL@?$DO?5?$CFs_?$AA@ DB '> %s_', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Draw@CCmdWindow@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@CCmdWindow@@QAEXXZ$0
__ehfuncinfo$?Draw@CCmdWindow@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@CCmdWindow@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Draw@CCmdWindow@@QAEXXZ
_TEXT	SEGMENT
tv161 = -328						; size = 4
tv159 = -324						; size = 4
tv146 = -324						; size = 4
$T209470 = -316						; size = 4
$T209471 = -304						; size = 4
_tmp_buf$ = -100					; size = 67
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?Draw@CCmdWindow@@QAEXXZ PROC				; CCmdWindow::Draw, COMDAT
; _this$ = ecx

; 71   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Draw@CCmdWindow@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-328]
	mov	ecx, 79					; 0000004fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 72   : 	char tmp_buf[MAX_CMD_INPUT+3];
; 73   : 
; 74   : 	if(m_pD3DFont && m_bEnabled) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	$LN3@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	$LN3@Draw

; 75   : 		sprintf(tmp_buf,"> %s_",m_szInputBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	OFFSET ??_C@_05ENPENPBL@?$DO?5?$CFs_?$AA@
	lea	ecx, DWORD PTR _tmp_buf$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 76   : 		m_pD3DFont->DrawText(m_fDrawStartX+1.0f,m_fDrawStartY+1.0f,m_dwBackgroundColor,
; 77   : 			tmp_buf);

	push	0
	push	0
	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+76]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv159[ebp]
	fld	DWORD PTR tv159[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+72]
	fadd	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv161[ebp]
	fld	DWORD PTR tv161[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z	; CD3DFont::DrawTextA

; 78   : 		m_pD3DFont->DrawText(m_fDrawStartX,m_fDrawStartY,m_dwDrawColor,
; 79   : 			tmp_buf);

	push	0
	push	0
	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+76]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+72]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z	; CD3DFont::DrawTextA

; 80   : 	} else {

	jmp	$LN1@Draw
$LN3@Draw:

; 81   : 		if((NULL == m_pD3DFont) && m_pD3DDevice) { // Create/recreate it.

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	jne	$LN1@Draw
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	$LN1@Draw

; 82   : 			m_pD3DFont = new CD3DFont(CHAT_FONT,CHAT_FONT_SIZE+4,0);

	push	1664					; 00000680H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209471[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209471[ebp], 0
	je	SHORT $LN6@Draw
	push	0
	push	16					; 00000010H
	push	OFFSET ??_C@_0L@NKOINEAD@Arial?5BOLD?$AA@
	mov	ecx, DWORD PTR $T209471[ebp]
	call	??0CD3DFont@@QAE@PADKK@Z		; CD3DFont::CD3DFont
	mov	DWORD PTR tv146[ebp], eax
	jmp	SHORT $LN7@Draw
$LN6@Draw:
	mov	DWORD PTR tv146[ebp], 0
$LN7@Draw:
	mov	eax, DWORD PTR tv146[ebp]
	mov	DWORD PTR $T209470[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T209470[ebp]
	mov	DWORD PTR [ecx+92], edx

; 83   : 			m_pD3DFont->InitDeviceObjects(m_pD3DDevice);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z ; CD3DFont::InitDeviceObjects

; 84   : 			m_pD3DFont->RestoreDeviceObjects();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	?RestoreDeviceObjects@CD3DFont@@QAEJXZ	; CD3DFont::RestoreDeviceObjects
$LN1@Draw:

; 85   : 		}
; 86   : 	}
; 87   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@Draw:
	DD	1
	DD	$LN11@Draw
$LN11@Draw:
	DD	-100					; ffffff9cH
	DD	67					; 00000043H
	DD	$LN9@Draw
$LN9@Draw:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@CCmdWindow@@QAEXXZ$0:
	mov	eax, DWORD PTR $T209471[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Draw@CCmdWindow@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Draw@CCmdWindow@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Draw@CCmdWindow@@QAEXXZ ENDP				; CCmdWindow::Draw
PUBLIC	?AddChar@CCmdWindow@@QAEXD@Z			; CCmdWindow::AddChar
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddChar@CCmdWindow@@QAEXD@Z
_TEXT	SEGMENT
_iCurBufferLen$ = -20					; size = 4
_this$ = -8						; size = 4
_Char$ = 8						; size = 1
?AddChar@CCmdWindow@@QAEXD@Z PROC			; CCmdWindow::AddChar, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   : 	if(FALSE == m_bEnabled) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN3@AddChar
	jmp	SHORT $LN4@AddChar
$LN3@AddChar:

; 94   : 
; 95   : 	if(Char < ' ') return;

	movsx	eax, BYTE PTR _Char$[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN2@AddChar
	jmp	SHORT $LN4@AddChar
$LN2@AddChar:

; 96   : 
; 97   : 	int iCurBufferLen = strlen(m_szInputBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _iCurBufferLen$[ebp], eax

; 98   : 	if(iCurBufferLen < MAX_CMD_INPUT) { 

	cmp	DWORD PTR _iCurBufferLen$[ebp], 64	; 00000040H
	jge	SHORT $LN4@AddChar

; 99   : 		m_szInputBuffer[iCurBufferLen] = Char;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _iCurBufferLen$[ebp]
	mov	cl, BYTE PTR _Char$[ebp]
	mov	BYTE PTR [eax], cl

; 100  : 		m_szInputBuffer[iCurBufferLen+1] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _iCurBufferLen$[ebp]
	mov	BYTE PTR [eax+1], 0
$LN4@AddChar:

; 101  : 	}
; 102  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddChar@CCmdWindow@@QAEXD@Z ENDP			; CCmdWindow::AddChar
_TEXT	ENDS
PUBLIC	?BackSpace@CCmdWindow@@QAEXXZ			; CCmdWindow::BackSpace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BackSpace@CCmdWindow@@QAEXXZ
_TEXT	SEGMENT
_iCurBufferLen$ = -20					; size = 4
_this$ = -8						; size = 4
?BackSpace@CCmdWindow@@QAEXXZ PROC			; CCmdWindow::BackSpace, COMDAT
; _this$ = ecx

; 107  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 108  : 	if(!m_bEnabled) return;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN2@BackSpace
	jmp	SHORT $LN3@BackSpace
$LN2@BackSpace:

; 109  : 	int iCurBufferLen = strlen(m_szInputBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _iCurBufferLen$[ebp], eax

; 110  : 	if(iCurBufferLen > 0) {

	cmp	DWORD PTR _iCurBufferLen$[ebp], 0
	jle	SHORT $LN3@BackSpace

; 111  : 		m_szInputBuffer[iCurBufferLen - 1] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _iCurBufferLen$[ebp]
	mov	BYTE PTR [eax-1], 0
$LN3@BackSpace:

; 112  : 	}
; 113  : }		

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?BackSpace@CCmdWindow@@QAEXXZ ENDP			; CCmdWindow::BackSpace
_TEXT	ENDS
PUBLIC	??_C@_0O@KGKMGJJO@Not?5connected?$AA@		; `string'
PUBLIC	?GetRPC4@CNetworkManager@@QAEPAVRPC4@RakNet@@XZ	; CNetworkManager::GetRPC4
PUBLIC	??_C@_0M@HFMMFIOP@ChatCommand?$AA@		; `string'
PUBLIC	??0AddressOrGUID@RakNet@@QAE@ABUSystemAddress@1@@Z ; RakNet::AddressOrGUID::AddressOrGUID
PUBLIC	??$Write@E@BitStream@RakNet@@QAEXABE@Z		; RakNet::BitStream::Write<unsigned char>
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?GetCmdHandler@CCmdWindow@@QAEP6AXPAD@Z0@Z	; CCmdWindow::GetCmdHandler
PUBLIC	__$ArrayPad$
PUBLIC	?ProcessInput@CCmdWindow@@QAEXXZ		; CCmdWindow::ProcessInput
EXTRN	?AddInfoMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddInfoMessage
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	??1BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::~BitStream
EXTRN	?Call@RPC4@RakNet@@QAEXPBDPAVBitStream@2@W4PacketPriority@@W4PacketReliability@@DUAddressOrGUID@2@_N@Z:PROC ; RakNet::RPC4::Call
EXTRN	?Write@BitStream@RakNet@@QAEXPBDI@Z:PROC	; RakNet::BitStream::Write
EXTRN	??0BitStream@RakNet@@QAE@XZ:PROC		; RakNet::BitStream::BitStream
EXTRN	?IsConnected@CNetworkManager@@QAE_NXZ:PROC	; CNetworkManager::IsConnected
EXTRN	?pNetowkManager@@3PAVCNetworkManager@@A:DWORD	; pNetowkManager
EXTRN	_strcpy:PROC
;	COMDAT ??_C@_0O@KGKMGJJO@Not?5connected?$AA@
CONST	SEGMENT
??_C@_0O@KGKMGJJO@Not?5connected?$AA@ DB 'Not connected', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HFMMFIOP@ChatCommand?$AA@
CONST	SEGMENT
??_C@_0M@HFMMFIOP@ChatCommand?$AA@ DB 'ChatCommand', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ProcessInput@CCmdWindow@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessInput@CCmdWindow@@QAEXXZ$0
__ehfuncinfo$?ProcessInput@CCmdWindow@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessInput@CCmdWindow@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?ProcessInput@CCmdWindow@@QAEXXZ
_TEXT	SEGMENT
$T209493 = -2616					; size = 4
_byteTextLen$209328 = -2409				; size = 1
_bsSend$209327 = -2400					; size = 276
_bSendToServer$209315 = -2113				; size = 1
_command$ = -2104					; size = 2048
_cmdHandler$ = -48					; size = 4
_szCmdEndPos$ = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ProcessInput@CCmdWindow@@QAEXXZ PROC			; CCmdWindow::ProcessInput, COMDAT
; _this$ = ecx

; 118  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ProcessInput@CCmdWindow@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2608				; 00000a30H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2620]
	mov	ecx, 652				; 0000028cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 119  : 	PCHAR szCmdEndPos;
; 120  : 	CMDPROC cmdHandler;
; 121  : 	char command[2048];
; 122  : 
; 123  : 	if(m_bEnabled) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	$LN15@ProcessInp

; 124  : 		if(m_szInputBuffer[0] != '\0')

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN13@ProcessInp

; 125  : 		{
; 126  : 			if(m_szInputBuffer[0] != CMD_CHARACTER) { 

	mov	eax, DWORD PTR _this$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN12@ProcessInp

; 127  : 				// chat type message	
; 128  : 				if(m_pDefaultCmd) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN11@ProcessInp

; 129  : 					m_pDefaultCmd(m_szInputBuffer);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@ProcessInp:

; 130  : 				}
; 131  : 			}
; 132  : 			else 

	jmp	$LN13@ProcessInp
$LN12@ProcessInp:

; 133  : 			{// possible valid command
; 134  : 				bool bSendToServer = true;

	mov	BYTE PTR _bSendToServer$209315[ebp], 1

; 135  : 
; 136  : 				// find the end of the command
; 137  : 				szCmdEndPos = &m_szInputBuffer[1];

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdEndPos$[ebp], eax

; 138  : 				strcpy((char*)&command, (char*)&m_szInputBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _command$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
$LN9@ProcessInp:

; 139  : 				while(*szCmdEndPos && *szCmdEndPos != ' ') szCmdEndPos++;

	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN8@ProcessInp
	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN8@ProcessInp
	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdEndPos$[ebp], eax
	jmp	SHORT $LN9@ProcessInp
$LN8@ProcessInp:

; 140  : 				if(*szCmdEndPos == '\0') {

	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@ProcessInp

; 141  : 					// Possible command with no params.
; 142  : 					cmdHandler = GetCmdHandler(&m_szInputBuffer[1]);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCmdHandler@CCmdWindow@@QAEP6AXPAD@Z0@Z ; CCmdWindow::GetCmdHandler
	mov	DWORD PTR _cmdHandler$[ebp], eax

; 143  : 					// If valid then call it.
; 144  : 					if(cmdHandler) {

	cmp	DWORD PTR _cmdHandler$[ebp], 0
	je	SHORT $LN6@ProcessInp

; 145  : 						cmdHandler("");

	mov	esi, esp
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	call	DWORD PTR _cmdHandler$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 146  : 						bSendToServer = false;

	mov	BYTE PTR _bSendToServer$209315[ebp], 0
$LN6@ProcessInp:

; 147  : 					}
; 148  : 				}
; 149  : 				else {

	jmp	SHORT $LN5@ProcessInp
$LN7@ProcessInp:

; 150  : 					*szCmdEndPos='\0'; // null terminate it

	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	mov	BYTE PTR [eax], 0

; 151  : 					szCmdEndPos++; // rest is the parameters.

	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdEndPos$[ebp], eax

; 152  : 					cmdHandler = GetCmdHandler(&m_szInputBuffer[1]);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCmdHandler@CCmdWindow@@QAEP6AXPAD@Z0@Z ; CCmdWindow::GetCmdHandler
	mov	DWORD PTR _cmdHandler$[ebp], eax

; 153  : 					// If valid then call it with the param string.
; 154  : 					if(cmdHandler) {

	cmp	DWORD PTR _cmdHandler$[ebp], 0
	je	SHORT $LN5@ProcessInp

; 155  : 						cmdHandler(szCmdEndPos);

	mov	esi, esp
	mov	eax, DWORD PTR _szCmdEndPos$[ebp]
	push	eax
	call	DWORD PTR _cmdHandler$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 156  : 						bSendToServer = false;

	mov	BYTE PTR _bSendToServer$209315[ebp], 0
$LN5@ProcessInp:

; 157  : 					}
; 158  : 				}
; 159  : 				if(bSendToServer) {

	movzx	eax, BYTE PTR _bSendToServer$209315[ebp]
	test	eax, eax
	je	$LN13@ProcessInp

; 160  : 					if(pNetowkManager->IsConnected()) {

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?IsConnected@CNetworkManager@@QAE_NXZ	; CNetworkManager::IsConnected
	movzx	eax, al
	test	eax, eax
	je	$LN2@ProcessInp

; 161  : 											RakNet::BitStream bsSend;

	lea	ecx, DWORD PTR _bsSend$209327[ebp]
	call	??0BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::BitStream
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 162  : 											BYTE byteTextLen = strlen(command);

	lea	eax, DWORD PTR _command$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	BYTE PTR _byteTextLen$209328[ebp], al

; 163  : 											bsSend.Write(byteTextLen);

	lea	eax, DWORD PTR _byteTextLen$209328[ebp]
	push	eax
	lea	ecx, DWORD PTR _bsSend$209327[ebp]
	call	??$Write@E@BitStream@RakNet@@QAEXABE@Z	; RakNet::BitStream::Write<unsigned char>

; 164  : 											bsSend.Write(command,byteTextLen);

	movzx	eax, BYTE PTR _byteTextLen$209328[ebp]
	push	eax
	lea	ecx, DWORD PTR _command$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bsSend$209327[ebp]
	call	?Write@BitStream@RakNet@@QAEXPBDI@Z	; RakNet::BitStream::Write

; 165  : 											pNetowkManager->GetRPC4()->Call("ChatCommand",&bsSend,HIGH_PRIORITY,RELIABLE,0,UNASSIGNED_SYSTEM_ADDRESS,TRUE);

	push	1
	sub	esp, 24					; 00000018H
	mov	ecx, esp
	mov	DWORD PTR $T209493[ebp], esp
	push	OFFSET _UNASSIGNED_SYSTEM_ADDRESS
	call	??0AddressOrGUID@RakNet@@QAE@ABUSystemAddress@1@@Z ; RakNet::AddressOrGUID::AddressOrGUID
	push	0
	push	2
	push	1
	lea	eax, DWORD PTR _bsSend$209327[ebp]
	push	eax
	push	OFFSET ??_C@_0M@HFMMFIOP@ChatCommand?$AA@
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetRPC4@CNetworkManager@@QAEPAVRPC4@RakNet@@XZ ; CNetworkManager::GetRPC4
	mov	ecx, eax
	call	?Call@RPC4@RakNet@@QAEXPBDPAVBitStream@2@W4PacketPriority@@W4PacketReliability@@DUAddressOrGUID@2@_N@Z ; RakNet::RPC4::Call

; 166  : 									} else {

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _bsSend$209327[ebp]
	call	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
	jmp	SHORT $LN13@ProcessInp
$LN2@ProcessInp:

; 167  : 											pChatWindow->AddInfoMessage("Not connected");

	push	OFFSET ??_C@_0O@KGKMGJJO@Not?5connected?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 8
$LN13@ProcessInp:

; 168  : 									}
; 169  : 				}
; 170  : 			}
; 171  : 		}
; 172  : 
; 173  : 		m_szInputBuffer[0] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0

; 174  : 
; 175  : 		Disable();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Disable@CCmdWindow@@QAEXXZ		; CCmdWindow::Disable
$LN15@ProcessInp:

; 176  : 	}
; 177  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@ProcessInp
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2620				; 00000a3cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN23@ProcessInp:
	DD	3
	DD	$LN22@ProcessInp
$LN22@ProcessInp:
	DD	-2104					; fffff7c8H
	DD	2048					; 00000800H
	DD	$LN18@ProcessInp
	DD	-2400					; fffff6a0H
	DD	276					; 00000114H
	DD	$LN19@ProcessInp
	DD	-2409					; fffff697H
	DD	1
	DD	$LN20@ProcessInp
$LN20@ProcessInp:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN19@ProcessInp:
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	83					; 00000053H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
$LN18@ProcessInp:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ProcessInput@CCmdWindow@@QAEXXZ$0:
	lea	ecx, DWORD PTR _bsSend$209327[ebp]
	jmp	??1BitStream@RakNet@@QAE@XZ		; RakNet::BitStream::~BitStream
__ehhandler$?ProcessInput@CCmdWindow@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2624]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ProcessInput@CCmdWindow@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ProcessInput@CCmdWindow@@QAEXXZ ENDP			; CCmdWindow::ProcessInput
EXTRN	_stricmp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCmdHandler@CCmdWindow@@QAEP6AXPAD@Z0@Z
_TEXT	SEGMENT
_x$ = -20						; size = 4
_this$ = -8						; size = 4
_szCmdName$ = 8						; size = 4
?GetCmdHandler@CCmdWindow@@QAEP6AXPAD@Z0@Z PROC		; CCmdWindow::GetCmdHandler, COMDAT
; _this$ = ecx

; 182  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 183  : 	int x=0;

	mov	DWORD PTR _x$[ebp], 0
$LN3@GetCmdHand:

; 184  : 	while(x!=m_iCmdCount) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax+4840]
	je	SHORT $LN2@GetCmdHand

; 185  : 		if(!stricmp(szCmdName,m_szCmdNames[x])) {

	mov	eax, DWORD PTR _x$[ebp]
	imul	eax, 33					; 00000021H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax+616]
	push	edx
	mov	eax, DWORD PTR _szCmdName$[ebp]
	push	eax
	call	_stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@GetCmdHand

; 186  : 			return m_pCmds[x];

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+104]
	jmp	SHORT $LN4@GetCmdHand
$LN1@GetCmdHand:

; 187  : 		}
; 188  : 		x++;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax

; 189  : 	}

	jmp	SHORT $LN3@GetCmdHand
$LN2@GetCmdHand:

; 190  : 	return NULL;

	xor	eax, eax
$LN4@GetCmdHand:

; 191  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetCmdHandler@CCmdWindow@@QAEP6AXPAD@Z0@Z ENDP		; CCmdWindow::GetCmdHandler
_TEXT	ENDS
PUBLIC	?AddDefaultCmdProc@CCmdWindow@@QAEXP6AXPAD@Z@Z	; CCmdWindow::AddDefaultCmdProc
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddDefaultCmdProc@CCmdWindow@@QAEXP6AXPAD@Z@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cmdDefault$ = 8					; size = 4
?AddDefaultCmdProc@CCmdWindow@@QAEXP6AXPAD@Z@Z PROC	; CCmdWindow::AddDefaultCmdProc, COMDAT
; _this$ = ecx

; 196  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  : 	m_pDefaultCmd = cmdDefault;	

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cmdDefault$[ebp]
	mov	DWORD PTR [eax+100], ecx

; 198  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?AddDefaultCmdProc@CCmdWindow@@QAEXP6AXPAD@Z@Z ENDP	; CCmdWindow::AddDefaultCmdProc
_TEXT	ENDS
PUBLIC	?AddCmdProc@CCmdWindow@@QAEXPADP6AX0@Z@Z	; CCmdWindow::AddCmdProc
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddCmdProc@CCmdWindow@@QAEXPADP6AX0@Z@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szCmdName$ = 8						; size = 4
_cmdHandler$ = 12					; size = 4
?AddCmdProc@CCmdWindow@@QAEXPADP6AX0@Z@Z PROC		; CCmdWindow::AddCmdProc, COMDAT
; _this$ = ecx

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 204  : 	if(m_iCmdCount < MAX_CMDS && (strlen(szCmdName) < MAX_CMD_STRLEN)) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4840], 128		; 00000080H
	jge	SHORT $LN2@AddCmdProc
	mov	eax, DWORD PTR _szCmdName$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	cmp	eax, 32					; 00000020H
	jae	SHORT $LN2@AddCmdProc

; 205  : 		m_pCmds[m_iCmdCount] = cmdHandler;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4840]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cmdHandler$[ebp]
	mov	DWORD PTR [edx+ecx*4+104], eax

; 206  : 		strcpy(m_szCmdNames[m_iCmdCount],szCmdName);

	mov	eax, DWORD PTR _szCmdName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4840]
	imul	edx, 33					; 00000021H
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+616]
	push	ecx
	call	_strcpy
	add	esp, 8

; 207  : 		m_iCmdCount++;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4840]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4840], ecx
$LN2@AddCmdProc:

; 208  : 	}
; 209  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddCmdProc@CCmdWindow@@QAEXPADP6AX0@Z@Z ENDP		; CCmdWindow::AddCmdProc
_TEXT	ENDS
PUBLIC	?DeleteDeviceObjects@CCmdWindow@@QAEXXZ		; CCmdWindow::DeleteDeviceObjects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DeleteDeviceObjects@CCmdWindow@@QAEXXZ
_TEXT	SEGMENT
tv71 = -232						; size = 4
$T209514 = -224						; size = 4
$T209515 = -212						; size = 4
_this$ = -8						; size = 4
?DeleteDeviceObjects@CCmdWindow@@QAEXXZ PROC		; CCmdWindow::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 214  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 215  : 	SAFE_DELETE(m_pD3DFont);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN2@DeleteDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	DWORD PTR $T209515[ebp], ecx
	mov	edx, DWORD PTR $T209515[ebp]
	mov	DWORD PTR $T209514[ebp], edx
	cmp	DWORD PTR $T209514[ebp], 0
	je	SHORT $LN4@DeleteDevi
	push	1
	mov	ecx, DWORD PTR $T209514[ebp]
	call	??_GCD3DFont@@QAEPAXI@Z
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@DeleteDevi
$LN4@DeleteDevi:
	mov	DWORD PTR tv71[ebp], 0
$LN5@DeleteDevi:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
$LN2@DeleteDevi:

; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CCmdWindow@@QAEXXZ ENDP		; CCmdWindow::DeleteDeviceObjects
_TEXT	ENDS
PUBLIC	?DoEndianSwap@BitStream@RakNet@@SA_NXZ		; RakNet::BitStream::DoEndianSwap
EXTRN	?ReverseBytes@BitStream@RakNet@@SAXPAE0I@Z:PROC	; RakNet::BitStream::ReverseBytes
EXTRN	?WriteBits@BitStream@RakNet@@QAEXPBEI_N@Z:PROC	; RakNet::BitStream::WriteBits
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\raknet\bitstream.h
;	COMDAT ??$Write@E@BitStream@RakNet@@QAEXABE@Z
_TEXT	SEGMENT
_output$209369 = -17					; size = 1
_this$ = -8						; size = 4
_inTemplateVar$ = 8					; size = 4
??$Write@E@BitStream@RakNet@@QAEXABE@Z PROC		; RakNet::BitStream::Write<unsigned char>, COMDAT
; _this$ = ecx

; 1055 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1056 : #ifdef _MSC_VER
; 1057 : #pragma warning(disable:4127)   // conditional expression is constant
; 1058 : #endif
; 1059 : 		if (sizeof(inTemplateVar)==1)

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN4@Write

; 1060 : 			WriteBits( ( unsigned char* ) & inTemplateVar, sizeof( templateType ) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _inTemplateVar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEI_N@Z ; RakNet::BitStream::WriteBits

; 1061 : 		else

	jmp	SHORT $LN5@Write
$LN4@Write:

; 1062 : 		{
; 1063 : #ifndef __BITSTREAM_NATIVE_END
; 1064 : 			if (DoEndianSwap())

	call	?DoEndianSwap@BitStream@RakNet@@SA_NXZ	; RakNet::BitStream::DoEndianSwap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Write

; 1065 : 			{
; 1066 : 				unsigned char output[sizeof(templateType)];
; 1067 : 				ReverseBytes((unsigned char*)&inTemplateVar, output, sizeof(templateType));

	push	1
	lea	eax, DWORD PTR _output$209369[ebp]
	push	eax
	mov	ecx, DWORD PTR _inTemplateVar$[ebp]
	push	ecx
	call	?ReverseBytes@BitStream@RakNet@@SAXPAE0I@Z ; RakNet::BitStream::ReverseBytes
	add	esp, 12					; 0000000cH

; 1068 : 				WriteBits( ( unsigned char* ) output, sizeof(templateType) * 8, true );

	push	1
	push	8
	lea	eax, DWORD PTR _output$209369[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEI_N@Z ; RakNet::BitStream::WriteBits

; 1069 : 			}
; 1070 : 			else

	jmp	SHORT $LN5@Write
$LN2@Write:

; 1071 : #endif
; 1072 : 				WriteBits( ( unsigned char* ) & inTemplateVar, sizeof(templateType) * 8, true );

	push	1
	push	8
	mov	eax, DWORD PTR _inTemplateVar$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBits@BitStream@RakNet@@QAEXPBEI_N@Z ; RakNet::BitStream::WriteBits
$LN5@Write:

; 1073 : 		}
; 1074 : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Write
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN9@Write:
	DD	1
	DD	$LN8@Write
$LN8@Write:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN7@Write
$LN7@Write:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
??$Write@E@BitStream@RakNet@@QAEXABE@Z ENDP		; RakNet::BitStream::Write<unsigned char>
_TEXT	ENDS
PUBLIC	??4SystemAddress@RakNet@@QAEAAU01@ABU01@@Z	; RakNet::SystemAddress::operator=
PUBLIC	??4RakNetGUID@RakNet@@QAEAAU01@ABU01@@Z		; RakNet::RakNetGUID::operator=
PUBLIC	??0RakNetGUID@RakNet@@QAE@XZ			; RakNet::RakNetGUID::RakNetGUID
EXTRN	??0SystemAddress@RakNet@@QAE@XZ:PROC		; RakNet::SystemAddress::SystemAddress
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\raknet\raknettypes.h
;	COMDAT ??0AddressOrGUID@RakNet@@QAE@ABUSystemAddress@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??0AddressOrGUID@RakNet@@QAE@ABUSystemAddress@1@@Z PROC	; RakNet::AddressOrGUID::AddressOrGUID, COMDAT
; _this$ = ecx

; 220  : 	AddressOrGUID( const SystemAddress& input )

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RakNetGUID@RakNet@@QAE@XZ		; RakNet::RakNetGUID::RakNetGUID
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0SystemAddress@RakNet@@QAE@XZ		; RakNet::SystemAddress::SystemAddress

; 221  : 	{
; 222  : 		rakNetGuid=UNASSIGNED_RAKNET_GUID;

	push	OFFSET _UNASSIGNED_RAKNET_GUID
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4RakNetGUID@RakNet@@QAEAAU01@ABU01@@Z	; RakNet::RakNetGUID::operator=

; 223  : 		systemAddress=input;

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??4SystemAddress@RakNet@@QAEAAU01@ABU01@@Z ; RakNet::SystemAddress::operator=

; 224  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0AddressOrGUID@RakNet@@QAE@ABUSystemAddress@1@@Z ENDP	; RakNet::AddressOrGUID::AddressOrGUID
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4SystemAddress@RakNet@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4SystemAddress@RakNet@@QAEAAU01@ABU01@@Z PROC		; RakNet::SystemAddress::operator=, COMDAT
; _this$ = ecx

; 139  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  : 		binaryAddress = input.binaryAddress;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 141  : 		port = input.port;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx

; 142  : 		systemIndex = input.systemIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx

; 143  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 144  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4SystemAddress@RakNet@@QAEAAU01@ABU01@@Z ENDP		; RakNet::SystemAddress::operator=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0RakNetGUID@RakNet@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0RakNetGUID@RakNet@@QAE@XZ PROC			; RakNet::RakNetGUID::RakNetGUID, COMDAT
; _this$ = ecx

; 156  : 	RakNetGUID() {systemIndex=(SystemIndex)-1;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+8], ax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0RakNetGUID@RakNet@@QAE@XZ ENDP			; RakNet::RakNetGUID::RakNetGUID
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4RakNetGUID@RakNet@@QAEAAU01@ABU01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_input$ = 8						; size = 4
??4RakNetGUID@RakNet@@QAEAAU01@ABU01@@Z PROC		; RakNet::RakNetGUID::operator=, COMDAT
; _this$ = ecx

; 174  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 		g=input.g;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], ecx

; 176  : 		systemIndex=input.systemIndex;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _input$[ebp]
	mov	dx, WORD PTR [ecx+8]
	mov	WORD PTR [eax+8], dx

; 177  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 178  : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??4RakNetGUID@RakNet@@QAEAAU01@ABU01@@Z ENDP		; RakNet::RakNetGUID::operator=
_TEXT	ENDS
PUBLIC	?IsNetworkOrder@BitStream@RakNet@@SA_NXZ	; RakNet::BitStream::IsNetworkOrder
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\raknet\bitstream.h
;	COMDAT ?DoEndianSwap@BitStream@RakNet@@SA_NXZ
_TEXT	SEGMENT
?DoEndianSwap@BitStream@RakNet@@SA_NXZ PROC		; RakNet::BitStream::DoEndianSwap, COMDAT

; 863  : 		inline static bool DoEndianSwap(void) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 864  : #ifndef __BITSTREAM_NATIVE_END
; 865  : 			return IsNetworkOrder()==false;

	call	?IsNetworkOrder@BitStream@RakNet@@SA_NXZ ; RakNet::BitStream::IsNetworkOrder
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1

; 866  : #else
; 867  : 			return false;
; 868  : #endif
; 869  : 		}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DoEndianSwap@BitStream@RakNet@@SA_NXZ ENDP		; RakNet::BitStream::DoEndianSwap
_TEXT	ENDS
PUBLIC	?r@?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@4_NB ; `RakNet::BitStream::IsNetworkOrder'::`2'::r
PUBLIC	??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51 ; `RakNet::BitStream::IsNetworkOrder'::`2'::`local static guard'
EXTRN	?IsNetworkOrderInternal@BitStream@RakNet@@SA_NXZ:PROC ; RakNet::BitStream::IsNetworkOrderInternal
;	COMDAT ?r@?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@4_NB
_BSS	SEGMENT
?r@?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@4_NB DB 01H DUP (?) ; `RakNet::BitStream::IsNetworkOrder'::`2'::r
_BSS	ENDS
;	COMDAT ??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51
_BSS	SEGMENT
??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51 DD 01H DUP (?) ; `RakNet::BitStream::IsNetworkOrder'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ$0
__ehfuncinfo$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?IsNetworkOrder@BitStream@RakNet@@SA_NXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?IsNetworkOrder@BitStream@RakNet@@SA_NXZ PROC		; RakNet::BitStream::IsNetworkOrder, COMDAT

; 874  : 		inline static bool IsNetworkOrder(void) {static const bool r = IsNetworkOrderInternal(); return r;}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	eax, DWORD PTR ??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51
	and	eax, 1
	jne	SHORT $LN1@IsNetworkO
	mov	eax, DWORD PTR ??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51
	or	eax, 1
	mov	DWORD PTR ??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51, eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?IsNetworkOrderInternal@BitStream@RakNet@@SA_NXZ ; RakNet::BitStream::IsNetworkOrderInternal
	mov	BYTE PTR ?r@?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@4_NB, al ; `RakNet::BitStream::IsNetworkOrder'::`2'::r
	mov	DWORD PTR __$EHRec$[ebp+8], -1
$LN1@IsNetworkO:
	mov	al, BYTE PTR ?r@?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@4_NB ; `RakNet::BitStream::IsNetworkOrder'::`2'::r
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ$0:
	mov	eax, DWORD PTR ??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ??_B?1??IsNetworkOrder@BitStream@RakNet@@SA_NXZ@51, eax
	ret	0
__ehhandler$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?IsNetworkOrder@BitStream@RakNet@@SA_NXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?IsNetworkOrder@BitStream@RakNet@@SA_NXZ ENDP		; RakNet::BitStream::IsNetworkOrder
EXTRN	?m_pRPC4@CNetworkManager@@0PAVRPC4@RakNet@@A:DWORD ; CNetworkManager::m_pRPC4
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cnetworkmanager.h
;	COMDAT ?GetRPC4@CNetworkManager@@QAEPAVRPC4@RakNet@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetRPC4@CNetworkManager@@QAEPAVRPC4@RakNet@@XZ PROC	; CNetworkManager::GetRPC4, COMDAT
; _this$ = ecx

; 86   : 	RPC4 * GetRPC4() { return m_pRPC4; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ?m_pRPC4@CNetworkManager@@0PAVRPC4@RakNet@@A ; CNetworkManager::m_pRPC4
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRPC4@CNetworkManager@@QAEPAVRPC4@RakNet@@XZ ENDP	; CNetworkManager::GetRPC4
_TEXT	ENDS
EXTRN	??0SystemAddress@RakNet@@QAE@IG@Z:PROC		; RakNet::SystemAddress::SystemAddress
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\raknet\raknettypes.h
;	COMDAT ??__EUNASSIGNED_SYSTEM_ADDRESS@RakNet@@YAXXZ
text$yc	SEGMENT
??__EUNASSIGNED_SYSTEM_ADDRESS@RakNet@@YAXXZ PROC	; RakNet::`dynamic initializer for 'UNASSIGNED_SYSTEM_ADDRESS'', COMDAT

; 196  : const SystemAddress UNASSIGNED_SYSTEM_ADDRESS(0xFFFFFFFF, 0xFFFF);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	65535					; 0000ffffH
	push	-1
	mov	ecx, OFFSET _UNASSIGNED_SYSTEM_ADDRESS
	call	??0SystemAddress@RakNet@@QAE@IG@Z	; RakNet::SystemAddress::SystemAddress
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EUNASSIGNED_SYSTEM_ADDRESS@RakNet@@YAXXZ ENDP	; RakNet::`dynamic initializer for 'UNASSIGNED_SYSTEM_ADDRESS''
text$yc	ENDS
PUBLIC	??0RakNetGUID@RakNet@@QAE@_K@Z			; RakNet::RakNetGUID::RakNetGUID
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EUNASSIGNED_RAKNET_GUID@RakNet@@YAXXZ
text$yc	SEGMENT
??__EUNASSIGNED_RAKNET_GUID@RakNet@@YAXXZ PROC		; RakNet::`dynamic initializer for 'UNASSIGNED_RAKNET_GUID'', COMDAT

; 197  : const RakNetGUID UNASSIGNED_RAKNET_GUID((uint64_t)-1);

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	-1
	push	-1
	mov	ecx, OFFSET _UNASSIGNED_RAKNET_GUID
	call	??0RakNetGUID@RakNet@@QAE@_K@Z		; RakNet::RakNetGUID::RakNetGUID
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__EUNASSIGNED_RAKNET_GUID@RakNet@@YAXXZ ENDP		; RakNet::`dynamic initializer for 'UNASSIGNED_RAKNET_GUID''
; Function compile flags: /Odtp /RTCsu /ZI
text$yc	ENDS
;	COMDAT ??0RakNetGUID@RakNet@@QAE@_K@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__g$ = 8						; size = 8
??0RakNetGUID@RakNet@@QAE@_K@Z PROC			; RakNet::RakNetGUID::RakNetGUID, COMDAT
; _this$ = ecx

; 157  : 	explicit RakNetGUID(uint64_t _g) {g=_g; systemIndex=(SystemIndex)-1;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __g$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __g$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+8], ax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0RakNetGUID@RakNet@@QAE@_K@Z ENDP			; RakNet::RakNetGUID::RakNetGUID
_TEXT	ENDS
_BSS	SEGMENT
_UNASSIGNED_SYSTEM_ADDRESS DQ 01H DUP (?)
_UNASSIGNED_RAKNET_GUID DB 010H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_UNASSIGNED_SYSTEM_ADDRESS$initializer$ DD FLAT:??__EUNASSIGNED_SYSTEM_ADDRESS@RakNet@@YAXXZ
_UNASSIGNED_RAKNET_GUID$initializer$ DD FLAT:??__EUNASSIGNED_RAKNET_GUID@RakNet@@YAXXZ
CRT$XCU	ENDS
END
