; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\CPools.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z	; CPools::GetPedFromIndex
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\game\cpools.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?GetPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_pPed$ = -8						; size = 4
_iIndex$ = 8						; size = 4
?GetPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z PROC	; CPools::GetPedFromIndex, COMDAT

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 15   : 	PED_TYPE * pPed;
; 16   : 
; 17   : 	DWORD dwFunc = FUNC_CPool_CPed_AtHandle;

	mov	DWORD PTR _dwFunc$[ebp], 4529328	; 00451cb0H

; 18   : 	_asm
; 19   : 	{
; 20   : 		mov ebx, VAR_PedPool

	mov	ebx, 9958060				; 0097f2acH

; 21   : 		mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 22   : 		push iIndex

	push	DWORD PTR _iIndex$[ebp]

; 23   : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 24   : 		mov pPed, eax

	mov	DWORD PTR _pPed$[ebp], eax

; 25   : 	}
; 26   : 
; 27   : 	return pPed;	

	mov	eax, DWORD PTR _pPed$[ebp]

; 28   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z ENDP	; CPools::GetPedFromIndex
_TEXT	ENDS
PUBLIC	?GetIndexFromPed@CPools@@SGHPAU_PED_TYPE@@@Z	; CPools::GetIndexFromPed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetIndexFromPed@CPools@@SGHPAU_PED_TYPE@@@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_iIndex$ = -8						; size = 4
_pPed$ = 8						; size = 4
?GetIndexFromPed@CPools@@SGHPAU_PED_TYPE@@@Z PROC	; CPools::GetIndexFromPed, COMDAT

; 31   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 32   : 	int iIndex;
; 33   : 
; 34   : 	DWORD dwFunc = FUNC_CPool_CPed__HandleOf;

	mov	DWORD PTR _dwFunc$[ebp], 4529392	; 00451cf0H

; 35   : 	_asm
; 36   : 	{
; 37   : 		mov ebx, VAR_PedPool

	mov	ebx, 9958060				; 0097f2acH

; 38   : 		mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 39   : 		push pPed

	push	DWORD PTR _pPed$[ebp]

; 40   : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 41   : 		mov iIndex, eax

	mov	DWORD PTR _iIndex$[ebp], eax

; 42   : 	}
; 43   : 
; 44   : 	return iIndex;

	mov	eax, DWORD PTR _iIndex$[ebp]

; 45   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexFromPed@CPools@@SGHPAU_PED_TYPE@@@Z ENDP	; CPools::GetIndexFromPed
_TEXT	ENDS
PUBLIC	?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z ; CPools::GetVehicleFromIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_pVehicle$ = -8						; size = 4
_iIndex$ = 8						; size = 4
?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z PROC ; CPools::GetVehicleFromIndex, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 49   : 	VEHICLE_TYPE * pVehicle;
; 50   : 
; 51   : 	DWORD dwFunc = FUNC_CPool_CVehicle_AtHandle;

	mov	DWORD PTR _dwFunc$[ebp], 4529264	; 00451c70H

; 52   : 	_asm
; 53   : 	{
; 54   : 		mov ebx, VAR_VehicleManager

	mov	ebx, 10550756				; 00a0fde4H

; 55   : 		mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 56   : 		push iIndex

	push	DWORD PTR _iIndex$[ebp]

; 57   : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 58   : 		mov pVehicle, eax

	mov	DWORD PTR _pVehicle$[ebp], eax

; 59   : 	}
; 60   : 
; 61   : 	return pVehicle;

	mov	eax, DWORD PTR _pVehicle$[ebp]

; 62   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z ENDP ; CPools::GetVehicleFromIndex
_TEXT	ENDS
PUBLIC	?GetIndexFromVehicle@CPools@@SGHPAU_VEHICLE_TYPE@@@Z ; CPools::GetIndexFromVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetIndexFromVehicle@CPools@@SGHPAU_VEHICLE_TYPE@@@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_iIndex$ = -8						; size = 4
_pVehicle$ = 8						; size = 4
?GetIndexFromVehicle@CPools@@SGHPAU_VEHICLE_TYPE@@@Z PROC ; CPools::GetIndexFromVehicle, COMDAT

; 65   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 66   : 	int iIndex;
; 67   : 
; 68   : 	DWORD dwFunc = FUNC_CPool_CVehicle__HandleOf;

	mov	DWORD PTR _dwFunc$[ebp], 4375728	; 0042c4b0H

; 69   : 	_asm
; 70   : 	{
; 71   : 		mov ebx, VAR_VehicleManager

	mov	ebx, 10550756				; 00a0fde4H

; 72   : 		mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 73   : 		push pVehicle

	push	DWORD PTR _pVehicle$[ebp]

; 74   : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 75   : 		mov iIndex, eax

	mov	DWORD PTR _iIndex$[ebp], eax

; 76   : 	}
; 77   : 
; 78   : 	return iIndex;	

	mov	eax, DWORD PTR _iIndex$[ebp]

; 79   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetIndexFromVehicle@CPools@@SGHPAU_VEHICLE_TYPE@@@Z ENDP ; CPools::GetIndexFromVehicle
_TEXT	ENDS
PUBLIC	?GetObjectFromIndex@CPools@@SGPAU_ENTITY_TYPE@@H@Z ; CPools::GetObjectFromIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetObjectFromIndex@CPools@@SGPAU_ENTITY_TYPE@@H@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_pObject$ = -8						; size = 4
_iIndex$ = 8						; size = 4
?GetObjectFromIndex@CPools@@SGPAU_ENTITY_TYPE@@H@Z PROC	; CPools::GetObjectFromIndex, COMDAT

; 82   : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 83   : 	ENTITY_TYPE *pObject;
; 84   : 
; 85   : 	DWORD dwFunc = FUNC_CPool_CObject__AtHandle;

	mov	DWORD PTR _dwFunc$[ebp], 4529200	; 00451c30H

; 86   : 
; 87   : 	_asm
; 88   : 	{
; 89   : 		mov ebx, VAR_ObjectManager

	mov	ebx, 9755616				; 0094dbe0H

; 90   : 		mov ecx, [ebx]

	mov	ecx, DWORD PTR [ebx]

; 91   : 		push iIndex

	push	DWORD PTR _iIndex$[ebp]

; 92   : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 93   : 		mov pObject, eax

	mov	DWORD PTR _pObject$[ebp], eax

; 94   : 	}
; 95   : 
; 96   : 	return pObject;

	mov	eax, DWORD PTR _pObject$[ebp]

; 97   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetObjectFromIndex@CPools@@SGPAU_ENTITY_TYPE@@H@Z ENDP	; CPools::GetObjectFromIndex
_TEXT	ENDS
PUBLIC	?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z ; CPools::GetPlayerPedFromIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z
_TEXT	SEGMENT
_pPlayer$ = -8						; size = 4
_iIndex$ = 8						; size = 4
?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z PROC	; CPools::GetPlayerPedFromIndex, COMDAT

; 106  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 107  : 	PLAYER_TYPE * pPlayer = (PLAYER_TYPE *)(VAR_Players + (iIndex * sizeof(PLAYER_TYPE)));

	mov	eax, DWORD PTR _iIndex$[ebp]
	imul	eax, 368				; 00000170H
	add	eax, 9743656				; 0094ad28H
	mov	DWORD PTR _pPlayer$[ebp], eax

; 108  : 	
; 109  : 	if(pPlayer)

	je	SHORT $LN1@GetPlayerP

; 110  : 	{
; 111  : 		return pPlayer->pPed;

	mov	eax, DWORD PTR _pPlayer$[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN2@GetPlayerP
$LN1@GetPlayerP:

; 112  : 	}
; 113  : 
; 114  : 	return NULL;

	xor	eax, eax
$LN2@GetPlayerP:

; 115  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z ENDP	; CPools::GetPlayerPedFromIndex
_TEXT	ENDS
END
