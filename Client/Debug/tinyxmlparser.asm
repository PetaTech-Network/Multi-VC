; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Shared\TinyXML\tinyxmlparser.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06PNMEMOHD@?$CGapos?$DL?$AA@		; `string'
PUBLIC	??_C@_06DDLNFFBN@?$CGquot?$DL?$AA@		; `string'
PUBLIC	??_C@_04LOOHDCEI@?$CGgt?$DL?$AA@		; `string'
PUBLIC	??_C@_04GJOGLFEJ@?$CGlt?$DL?$AA@		; `string'
PUBLIC	??_C@_05JKJFEODM@?$CGamp?$DL?$AA@		; `string'
PUBLIC	?entity@TiXmlBase@@0PAUEntity@1@A		; TiXmlBase::entity
PUBLIC	?utf8ByteTable@TiXmlBase@@2QBHB			; TiXmlBase::utf8ByteTable
CONST	SEGMENT
?utf8ByteTable@TiXmlBase@@2QBHB DD 01H			; TiXmlBase::utf8ByteTable
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
CONST	ENDS
_DATA	SEGMENT
?entity@TiXmlBase@@0PAUEntity@1@A DD FLAT:??_C@_05JKJFEODM@?$CGamp?$DL?$AA@ ; TiXmlBase::entity
	DD	05H
	DB	026H
	ORG $+3
	DD	FLAT:??_C@_04GJOGLFEJ@?$CGlt?$DL?$AA@
	DD	04H
	DB	03cH
	ORG $+3
	DD	FLAT:??_C@_04LOOHDCEI@?$CGgt?$DL?$AA@
	DD	04H
	DB	03eH
	ORG $+3
	DD	FLAT:??_C@_06DDLNFFBN@?$CGquot?$DL?$AA@
	DD	06H
	DB	022H
	ORG $+3
	DD	FLAT:??_C@_06PNMEMOHD@?$CGapos?$DL?$AA@
	DD	06H
	DB	027H
	ORG $+3
_DATA	ENDS
;	COMDAT ??_C@_06PNMEMOHD@?$CGapos?$DL?$AA@
CONST	SEGMENT
??_C@_06PNMEMOHD@?$CGapos?$DL?$AA@ DB '&apos;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DDLNFFBN@?$CGquot?$DL?$AA@
CONST	SEGMENT
??_C@_06DDLNFFBN@?$CGquot?$DL?$AA@ DB '&quot;', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOOHDCEI@?$CGgt?$DL?$AA@
CONST	SEGMENT
??_C@_04LOOHDCEI@?$CGgt?$DL?$AA@ DB '&gt;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJOGLFEJ@?$CGlt?$DL?$AA@
CONST	SEGMENT
??_C@_04GJOGLFEJ@?$CGlt?$DL?$AA@ DB '&lt;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JKJFEODM@?$CGamp?$DL?$AA@
CONST	SEGMENT
??_C@_05JKJFEODM@?$CGamp?$DL?$AA@ DB '&amp;', 00H	; `string'
CONST	ENDS
PUBLIC	?ConvertUTF32ToUTF8@TiXmlBase@@KAXKPADPAH@Z	; TiXmlBase::ConvertUTF32ToUTF8
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\shared\tinyxml\tinyxmlparser.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?ConvertUTF32ToUTF8@TiXmlBase@@KAXKPADPAH@Z
_TEXT	SEGMENT
tv69 = -256						; size = 4
_FIRST_BYTE_MARK$ = -56					; size = 28
_BYTE_MARK$ = -20					; size = 4
_BYTE_MASK$ = -8					; size = 4
_input$ = 8						; size = 4
_output$ = 12						; size = 4
_length$ = 16						; size = 4
?ConvertUTF32ToUTF8@TiXmlBase@@KAXKPADPAH@Z PROC	; TiXmlBase::ConvertUTF32ToUTF8, COMDAT

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 91   : 	const unsigned long BYTE_MASK = 0xBF;

	mov	DWORD PTR _BYTE_MASK$[ebp], 191		; 000000bfH

; 92   : 	const unsigned long BYTE_MARK = 0x80;

	mov	DWORD PTR _BYTE_MARK$[ebp], 128		; 00000080H

; 93   : 	const unsigned long FIRST_BYTE_MARK[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp], 0
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+4], 0
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+8], 192	; 000000c0H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+12], 224 ; 000000e0H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+16], 240 ; 000000f0H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+20], 248 ; 000000f8H
	mov	DWORD PTR _FIRST_BYTE_MARK$[ebp+24], 252 ; 000000fcH

; 94   : 
; 95   : 	if (input < 0x80)

	cmp	DWORD PTR _input$[ebp], 128		; 00000080H
	jae	SHORT $LN14@ConvertUTF

; 96   : 		*length = 1;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 1
	jmp	SHORT $LN13@ConvertUTF
$LN14@ConvertUTF:

; 97   : 	else if ( input < 0x800 )

	cmp	DWORD PTR _input$[ebp], 2048		; 00000800H
	jae	SHORT $LN12@ConvertUTF

; 98   : 		*length = 2;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 2
	jmp	SHORT $LN13@ConvertUTF
$LN12@ConvertUTF:

; 99   : 	else if ( input < 0x10000 )

	cmp	DWORD PTR _input$[ebp], 65536		; 00010000H
	jae	SHORT $LN10@ConvertUTF

; 100  : 		*length = 3;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 3
	jmp	SHORT $LN13@ConvertUTF
$LN10@ConvertUTF:

; 101  : 	else if ( input < 0x200000 )

	cmp	DWORD PTR _input$[ebp], 2097152		; 00200000H
	jae	SHORT $LN8@ConvertUTF

; 102  : 		*length = 4;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 4

; 103  : 	else

	jmp	SHORT $LN13@ConvertUTF
$LN8@ConvertUTF:

; 104  : 		{ *length = 0; return; }	// This code won't covert this correctly anyway.

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 0
	jmp	$LN15@ConvertUTF
$LN13@ConvertUTF:

; 105  : 
; 106  : 	output += *length;

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _output$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _output$[ebp], ecx

; 107  : 
; 108  : 	// Scary scary fall throughs.
; 109  : 	switch (*length)

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 1
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 3
	ja	$LN15@ConvertUTF
	mov	eax, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN20@ConvertUTF[eax*4]
$LN4@ConvertUTF:

; 110  : 	{
; 111  : 		case 4:
; 112  : 			--output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 113  : 			*output = (char)((input | BYTE_MARK) & BYTE_MASK);

	mov	eax, DWORD PTR _input$[ebp]
	or	eax, 128				; 00000080H
	and	eax, 191				; 000000bfH
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], al

; 114  : 			input >>= 6;

	mov	eax, DWORD PTR _input$[ebp]
	shr	eax, 6
	mov	DWORD PTR _input$[ebp], eax
$LN3@ConvertUTF:

; 115  : 		case 3:
; 116  : 			--output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 117  : 			*output = (char)((input | BYTE_MARK) & BYTE_MASK);

	mov	eax, DWORD PTR _input$[ebp]
	or	eax, 128				; 00000080H
	and	eax, 191				; 000000bfH
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], al

; 118  : 			input >>= 6;

	mov	eax, DWORD PTR _input$[ebp]
	shr	eax, 6
	mov	DWORD PTR _input$[ebp], eax
$LN2@ConvertUTF:

; 119  : 		case 2:
; 120  : 			--output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 121  : 			*output = (char)((input | BYTE_MARK) & BYTE_MASK);

	mov	eax, DWORD PTR _input$[ebp]
	or	eax, 128				; 00000080H
	and	eax, 191				; 000000bfH
	mov	ecx, DWORD PTR _output$[ebp]
	mov	BYTE PTR [ecx], al

; 122  : 			input >>= 6;

	mov	eax, DWORD PTR _input$[ebp]
	shr	eax, 6
	mov	DWORD PTR _input$[ebp], eax
$LN1@ConvertUTF:

; 123  : 		case 1:
; 124  : 			--output;

	mov	eax, DWORD PTR _output$[ebp]
	sub	eax, 1
	mov	DWORD PTR _output$[ebp], eax

; 125  : 			*output = (char)(input | FIRST_BYTE_MARK[*length]);

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _input$[ebp]
	or	edx, DWORD PTR _FIRST_BYTE_MARK$[ebp+ecx*4]
	mov	eax, DWORD PTR _output$[ebp]
	mov	BYTE PTR [eax], dl
$LN15@ConvertUTF:

; 126  : 	}
; 127  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@ConvertUTF
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@ConvertUTF:
	DD	1
	DD	$LN18@ConvertUTF
$LN18@ConvertUTF:
	DD	-56					; ffffffc8H
	DD	28					; 0000001cH
	DD	$LN17@ConvertUTF
$LN17@ConvertUTF:
	DB	70					; 00000046H
	DB	73					; 00000049H
	DB	82					; 00000052H
	DB	83					; 00000053H
	DB	84					; 00000054H
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	89					; 00000059H
	DB	84					; 00000054H
	DB	69					; 00000045H
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	65					; 00000041H
	DB	82					; 00000052H
	DB	75					; 0000004bH
	DB	0
$LN20@ConvertUTF:
	DD	$LN1@ConvertUTF
	DD	$LN2@ConvertUTF
	DD	$LN3@ConvertUTF
	DD	$LN4@ConvertUTF
?ConvertUTF32ToUTF8@TiXmlBase@@KAXKPADPAH@Z ENDP	; TiXmlBase::ConvertUTF32ToUTF8
_TEXT	ENDS
PUBLIC	?IsAlpha@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z	; TiXmlBase::IsAlpha
EXTRN	_isalpha:PROC
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsAlpha@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_anyByte$ = 8						; size = 1
___formal$ = 12						; size = 4
?IsAlpha@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z PROC	; TiXmlBase::IsAlpha, COMDAT

; 131  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 132  : 	// This will only work for low-ascii, everything else is assumed to be a valid
; 133  : 	// letter. I'm not sure this is the best approach, but it is quite tricky trying
; 134  : 	// to figure out alhabetical vs. not across encoding. So take a very
; 135  : 	// conservative approach.
; 136  : 
; 137  : //	if ( encoding == TIXML_ENCODING_UTF8 )
; 138  : //	{
; 139  : 		if ( anyByte < 127 )

	movzx	eax, BYTE PTR _anyByte$[ebp]
	cmp	eax, 127				; 0000007fH
	jge	SHORT $LN2@IsAlpha

; 140  : 			return isalpha( anyByte );

	movzx	eax, BYTE PTR _anyByte$[ebp]
	push	eax
	call	_isalpha
	add	esp, 4
	jmp	SHORT $LN3@IsAlpha

; 141  : 		else

	jmp	SHORT $LN3@IsAlpha
$LN2@IsAlpha:

; 142  : 			return 1;	// What else to do? The unicode set is huge...get the english ones right.

	mov	eax, 1
$LN3@IsAlpha:

; 143  : //	}
; 144  : //	else
; 145  : //	{
; 146  : //		return isalpha( anyByte );
; 147  : //	}
; 148  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlpha@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z ENDP	; TiXmlBase::IsAlpha
_TEXT	ENDS
PUBLIC	?IsAlphaNum@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z	; TiXmlBase::IsAlphaNum
EXTRN	_isalnum:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsAlphaNum@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_anyByte$ = 8						; size = 1
___formal$ = 12						; size = 4
?IsAlphaNum@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z PROC	; TiXmlBase::IsAlphaNum, COMDAT

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 153  : 	// This will only work for low-ascii, everything else is assumed to be a valid
; 154  : 	// letter. I'm not sure this is the best approach, but it is quite tricky trying
; 155  : 	// to figure out alhabetical vs. not across encoding. So take a very
; 156  : 	// conservative approach.
; 157  : 
; 158  : //	if ( encoding == TIXML_ENCODING_UTF8 )
; 159  : //	{
; 160  : 		if ( anyByte < 127 )

	movzx	eax, BYTE PTR _anyByte$[ebp]
	cmp	eax, 127				; 0000007fH
	jge	SHORT $LN2@IsAlphaNum

; 161  : 			return isalnum( anyByte );

	movzx	eax, BYTE PTR _anyByte$[ebp]
	push	eax
	call	_isalnum
	add	esp, 4
	jmp	SHORT $LN3@IsAlphaNum

; 162  : 		else

	jmp	SHORT $LN3@IsAlphaNum
$LN2@IsAlphaNum:

; 163  : 			return 1;	// What else to do? The unicode set is huge...get the english ones right.

	mov	eax, 1
$LN3@IsAlphaNum:

; 164  : //	}
; 165  : //	else
; 166  : //	{
; 167  : //		return isalnum( anyByte );
; 168  : //	}
; 169  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAlphaNum@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z ENDP	; TiXmlBase::IsAlphaNum
_TEXT	ENDS
PUBLIC	??_C@_1M@OLEIFDEL@?$AAs?$AAt?$AAa?$AAm?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@DMFNEMDE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAc?$AAo?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@FAAMJHE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAr?$AAo?$AAw?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_13LFIEIAHP@?$AAp?$AA?$AA@			; `string'
PUBLIC	??_C@_17FAPGLHLF@?$AAn?$AAo?$AAw?$AA?$AA@	; `string'
PUBLIC	??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA ; `TiXmlParsingData::Stamp'::`2'::__LINE__Var
PUBLIC	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp
EXTRN	__wassert:PROC
;	COMDAT ??_C@_1M@OLEIFDEL@?$AAs?$AAt?$AAa?$AAm?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1M@OLEIFDEL@?$AAs?$AAt?$AAa?$AAm?$AAp?$AA?$AA@ DB 's', 00H, 't', 00H
	DB	'a', 00H, 'm', 00H, 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DMFNEMDE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAc?$AAo?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DMFNEMDE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAc?$AAo?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, '.', 00H
	DB	'c', 00H, 'o', 00H, 'l', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '-', 00H, '1', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@FAAMJHE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAr?$AAo?$AAw?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@FAAMJHE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAr?$AAo?$AAw?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, '.', 00H
	DB	'r', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '-', 00H, '1', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_13LFIEIAHP@?$AAp?$AA?$AA@ DB 'p', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17FAPGLHLF@?$AAn?$AAo?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_17FAPGLHLF@?$AAn?$AAo?$AAw?$AA?$AA@ DB 'n', 00H, 'o', 00H, 'w', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
CONST	SEGMENT
??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'-', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, '-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, 'd', 00H, '\', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'y', 00H, 'x', 00H, 'm', 00H, 'l', 00H, '\', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'y', 00H, 'x', 00H, 'm', 00H, 'l', 00H, 'p', 00H
	DB	'a', 00H, 'r', 00H, 's', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA DD 0c6H ; `TiXmlParsingData::Stamp'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
tv82 = -268						; size = 4
_step$209357 = -68					; size = 4
_pU$209333 = -56					; size = 4
_p$ = -44						; size = 4
_col$ = -32						; size = 4
_row$ = -20						; size = 4
_this$ = -8						; size = 4
_now$ = 8						; size = 4
_encoding$ = 12						; size = 4
?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z PROC ; TiXmlParsingData::Stamp, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	assert( now );

	cmp	DWORD PTR _now$[ebp], 0
	jne	SHORT $LN28@Stamp
	mov	eax, DWORD PTR ?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_17FAPGLHLF@?$AAn?$AAo?$AAw?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN28@Stamp:

; 200  : 
; 201  : 	// Do nothing if the tabsize is 0.
; 202  : 	if ( tabsize < 1 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jge	SHORT $LN25@Stamp

; 203  : 	{
; 204  : 		return;

	jmp	$LN26@Stamp
$LN25@Stamp:

; 205  : 	}
; 206  : 
; 207  : 	// Get the current row, column.
; 208  : 	int row = cursor.row;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _row$[ebp], ecx

; 209  : 	int col = cursor.col;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _col$[ebp], ecx

; 210  : 	const char* p = stamp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _p$[ebp], ecx

; 211  : 	assert( p );

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN24@Stamp
	mov	eax, DWORD PTR ?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA
	add	eax, 13					; 0000000dH
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN24@Stamp:

; 212  : 
; 213  : 	while ( p < now )

	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _now$[ebp]
	jae	$LN23@Stamp

; 214  : 	{
; 215  : 		// Treat p as unsigned, so we have a happy compiler.
; 216  : 		const unsigned char* pU = (const unsigned char*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pU$209333[ebp], eax

; 217  : 
; 218  : 		// Code contributed by Fletcher Dunn: (modified by lee)
; 219  : 		switch (*pU) {

	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv82[ebp], ecx
	cmp	DWORD PTR tv82[ebp], 239		; 000000efH
	ja	$LN4@Stamp
	mov	edx, DWORD PTR tv82[ebp]
	movzx	eax, BYTE PTR $LN33@Stamp[edx]
	jmp	DWORD PTR $LN34@Stamp[eax*4]
$LN20@Stamp:

; 220  : 			case 0:
; 221  : 				// We *should* never get here, but in case we do, don't
; 222  : 				// advance past the terminating null character, ever
; 223  : 				return;

	jmp	$LN26@Stamp
$LN19@Stamp:

; 224  : 
; 225  : 			case '\r':
; 226  : 				// bump down to the next line
; 227  : 				++row;

	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax

; 228  : 				col = 0;

	mov	DWORD PTR _col$[ebp], 0

; 229  : 				// Eat the character
; 230  : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 231  : 
; 232  : 				// Check for \r\n sequence, and treat this as a single character
; 233  : 				if (*p == '\n') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN18@Stamp

; 234  : 					++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN18@Stamp:

; 235  : 				}
; 236  : 				break;

	jmp	$LN21@Stamp
$LN17@Stamp:

; 237  : 
; 238  : 			case '\n':
; 239  : 				// bump down to the next line
; 240  : 				++row;

	mov	eax, DWORD PTR _row$[ebp]
	add	eax, 1
	mov	DWORD PTR _row$[ebp], eax

; 241  : 				col = 0;

	mov	DWORD PTR _col$[ebp], 0

; 242  : 
; 243  : 				// Eat the character
; 244  : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 245  : 
; 246  : 				// Check for \n\r sequence, and treat this as a single
; 247  : 				// character.  (Yes, this bizarre thing does occur still
; 248  : 				// on some arcane platforms...)
; 249  : 				if (*p == '\r') {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN16@Stamp

; 250  : 					++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN16@Stamp:

; 251  : 				}
; 252  : 				break;

	jmp	$LN21@Stamp
$LN15@Stamp:

; 253  : 
; 254  : 			case '\t':
; 255  : 				// Eat the character
; 256  : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 257  : 
; 258  : 				// Skip to next tab stop
; 259  : 				col = (col / tabsize + 1) * tabsize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _col$[ebp]
	cdq
	idiv	DWORD PTR [ecx+12]
	add	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _col$[ebp], eax

; 260  : 				break;

	jmp	$LN21@Stamp
$LN14@Stamp:

; 261  : 
; 262  : 			case TIXML_UTF_LEAD_0:
; 263  : 				if ( encoding == TIXML_ENCODING_UTF8 )

	cmp	DWORD PTR _encoding$[ebp], 1
	jne	$LN13@Stamp

; 264  : 				{
; 265  : 					if ( *(p+1) && *(p+2) )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	$LN12@Stamp
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN12@Stamp

; 266  : 					{
; 267  : 						// In these cases, don't advance the column. These are
; 268  : 						// 0-width spaces.
; 269  : 						if ( *(pU+1)==TIXML_UTF_LEAD_1 && *(pU+2)==TIXML_UTF_LEAD_2 )

	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 187				; 000000bbH
	jne	SHORT $LN11@Stamp
	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN11@Stamp

; 270  : 							p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN12@Stamp
$LN11@Stamp:

; 271  : 						else if ( *(pU+1)==0xbfU && *(pU+2)==0xbeU )

	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN9@Stamp
	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 190				; 000000beH
	jne	SHORT $LN9@Stamp

; 272  : 							p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN12@Stamp
$LN9@Stamp:

; 273  : 						else if ( *(pU+1)==0xbfU && *(pU+2)==0xbfU )

	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN7@Stamp
	mov	eax, DWORD PTR _pU$209333[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN7@Stamp

; 274  : 							p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax

; 275  : 						else

	jmp	SHORT $LN12@Stamp
$LN7@Stamp:

; 276  : 							{ p +=3; ++col; }	// A normal character.

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax
	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN12@Stamp:

; 277  : 					}
; 278  : 				}
; 279  : 				else

	jmp	SHORT $LN5@Stamp
$LN13@Stamp:

; 280  : 				{
; 281  : 					++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 282  : 					++col;

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN5@Stamp:

; 283  : 				}
; 284  : 				break;

	jmp	SHORT $LN21@Stamp
$LN4@Stamp:

; 285  : 
; 286  : 			default:
; 287  : 				if ( encoding == TIXML_ENCODING_UTF8 )

	cmp	DWORD PTR _encoding$[ebp], 1
	jne	SHORT $LN3@Stamp

; 288  : 				{
; 289  : 					// Eat the 1 to 4 byte utf8 character.
; 290  : 					int step = TiXmlBase::utf8ByteTable[*((const unsigned char*)p)];

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR ?utf8ByteTable@TiXmlBase@@2QBHB[ecx*4]
	mov	DWORD PTR _step$209357[ebp], edx

; 291  : 					if ( step == 0 )

	cmp	DWORD PTR _step$209357[ebp], 0
	jne	SHORT $LN2@Stamp

; 292  : 						step = 1;		// Error case from bad encoding, but handle gracefully.

	mov	DWORD PTR _step$209357[ebp], 1
$LN2@Stamp:

; 293  : 					p += step;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _step$209357[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 294  : 
; 295  : 					// Just advance one column, of course.
; 296  : 					++col;

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax

; 297  : 				}
; 298  : 				else

	jmp	SHORT $LN21@Stamp
$LN3@Stamp:

; 299  : 				{
; 300  : 					++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 301  : 					++col;

	mov	eax, DWORD PTR _col$[ebp]
	add	eax, 1
	mov	DWORD PTR _col$[ebp], eax
$LN21@Stamp:

; 302  : 				}
; 303  : 				break;
; 304  : 		}
; 305  : 	}

	jmp	$LN24@Stamp
$LN23@Stamp:

; 306  : 	cursor.row = row;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	mov	DWORD PTR [eax], ecx

; 307  : 	cursor.col = col;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 308  : 	assert( cursor.row >= -1 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], -1
	jge	SHORT $LN30@Stamp
	mov	ecx, DWORD PTR ?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA
	add	ecx, 110				; 0000006eH
	push	ecx
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1CC@FAAMJHE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAr?$AAo?$AAw?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@Stamp:

; 309  : 	assert( cursor.col >= -1 );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], -1
	jge	SHORT $LN31@Stamp
	mov	ecx, DWORD PTR ?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA
	add	ecx, 111				; 0000006fH
	push	ecx
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1CC@DMFNEMDE@?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?4?$AAc?$AAo?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN31@Stamp:

; 310  : 	stamp = p;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 311  : 	assert( stamp );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN26@Stamp
	mov	ecx, DWORD PTR ?__LINE__Var@?1??Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z@4JA
	add	ecx, 113				; 00000071H
	push	ecx
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1M@OLEIFDEL@?$AAs?$AAt?$AAa?$AAm?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN26@Stamp:

; 312  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN34@Stamp:
	DD	$LN20@Stamp
	DD	$LN15@Stamp
	DD	$LN17@Stamp
	DD	$LN19@Stamp
	DD	$LN14@Stamp
	DD	$LN4@Stamp
$LN33@Stamp:
	DB	0
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	1
	DB	2
	DB	5
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ENDP ; TiXmlParsingData::Stamp
_TEXT	ENDS
PUBLIC	?IsWhiteSpace@TiXmlBase@@KA_ND@Z		; TiXmlBase::IsWhiteSpace
PUBLIC	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_pU$209377 = -8						; size = 4
_p$ = 8							; size = 4
_encoding$ = 12						; size = 4
?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z PROC ; TiXmlBase::SkipWhiteSpace, COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 317  : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN17@SkipWhiteS
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@SkipWhiteS
$LN17@SkipWhiteS:

; 318  : 	{
; 319  : 		return 0;

	xor	eax, eax
	jmp	$LN19@SkipWhiteS
$LN18@SkipWhiteS:

; 320  : 	}
; 321  : 	if ( encoding == TIXML_ENCODING_UTF8 )

	cmp	DWORD PTR _encoding$[ebp], 1
	jne	$LN4@SkipWhiteS
$LN15@SkipWhiteS:

; 322  : 	{
; 323  : 		while ( *p )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN14@SkipWhiteS

; 324  : 		{
; 325  : 			const unsigned char* pU = (const unsigned char*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pU$209377[ebp], eax

; 326  : 
; 327  : 			// Skip the stupid Microsoft UTF-8 Byte order marks
; 328  : 			if (	*(pU+0)==TIXML_UTF_LEAD_0
; 329  : 				 && *(pU+1)==TIXML_UTF_LEAD_1
; 330  : 				 && *(pU+2)==TIXML_UTF_LEAD_2 )

	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 239				; 000000efH
	jne	SHORT $LN13@SkipWhiteS
	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 187				; 000000bbH
	jne	SHORT $LN13@SkipWhiteS
	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN13@SkipWhiteS

; 331  : 			{
; 332  : 				p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax

; 333  : 				continue;

	jmp	SHORT $LN15@SkipWhiteS

; 334  : 			}
; 335  : 			else if(*(pU+0)==TIXML_UTF_LEAD_0

	jmp	SHORT $LN12@SkipWhiteS
$LN13@SkipWhiteS:

; 336  : 				 && *(pU+1)==0xbfU
; 337  : 				 && *(pU+2)==0xbeU )

	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 239				; 000000efH
	jne	SHORT $LN11@SkipWhiteS
	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN11@SkipWhiteS
	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 190				; 000000beH
	jne	SHORT $LN11@SkipWhiteS

; 338  : 			{
; 339  : 				p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax

; 340  : 				continue;

	jmp	$LN15@SkipWhiteS

; 341  : 			}
; 342  : 			else if(*(pU+0)==TIXML_UTF_LEAD_0

	jmp	SHORT $LN12@SkipWhiteS
$LN11@SkipWhiteS:

; 343  : 				 && *(pU+1)==0xbfU
; 344  : 				 && *(pU+2)==0xbfU )

	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 239				; 000000efH
	jne	SHORT $LN12@SkipWhiteS
	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN12@SkipWhiteS
	mov	eax, DWORD PTR _pU$209377[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN12@SkipWhiteS

; 345  : 			{
; 346  : 				p += 3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _p$[ebp], eax

; 347  : 				continue;

	jmp	$LN15@SkipWhiteS
$LN12@SkipWhiteS:

; 348  : 			}
; 349  : 
; 350  : 			if ( IsWhiteSpace( *p ) || *p == '\n' || *p =='\r' )		// Still using old rules for white space.

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@SkipWhiteS
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN7@SkipWhiteS
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN8@SkipWhiteS
$LN7@SkipWhiteS:

; 351  : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 352  : 			else

	jmp	SHORT $LN6@SkipWhiteS
$LN8@SkipWhiteS:

; 353  : 				break;

	jmp	SHORT $LN14@SkipWhiteS
$LN6@SkipWhiteS:

; 354  : 		}

	jmp	$LN15@SkipWhiteS
$LN14@SkipWhiteS:

; 355  : 	}
; 356  : 	else

	jmp	SHORT $LN5@SkipWhiteS
$LN4@SkipWhiteS:

; 357  : 	{
; 358  : 		while ( ( *p && IsWhiteSpace( *p ) ) || *p == '\n' || *p =='\r' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@SkipWhiteS
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@SkipWhiteS
$LN1@SkipWhiteS:
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN2@SkipWhiteS
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN5@SkipWhiteS
$LN2@SkipWhiteS:

; 359  : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN4@SkipWhiteS
$LN5@SkipWhiteS:

; 360  : 	}
; 361  : 
; 362  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN19@SkipWhiteS:

; 363  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ENDP ; TiXmlBase::SkipWhiteSpace
_TEXT	ENDS
PUBLIC	?__LINE__Var@?1??ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z@4JA@7dccd581 ; `TiXmlBase::ReadName'::`2'::__LINE__Var
PUBLIC	??4TiXmlString@@QAEAAV0@PBD@Z			; TiXmlString::operator=
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z ; TiXmlBase::ReadName
EXTRN	?assign@TiXmlString@@QAEAAV1@PBDI@Z:PROC	; TiXmlString::assign
;	COMDAT ?__LINE__Var@?1??ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z@4JA@7dccd581
_DATA	SEGMENT
?__LINE__Var@?1??ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z@4JA@7dccd581 DD 0193H ; `TiXmlBase::ReadName'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_start$209403 = -8					; size = 4
_p$ = 8							; size = 4
_name$ = 12						; size = 4
_encoding$ = 16						; size = 4
?ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z PROC ; TiXmlBase::ReadName, COMDAT

; 403  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 404  : 	// Oddly, not supported on some comilers,
; 405  : 	//name->clear();
; 406  : 	// So use this:
; 407  : 	*name = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _name$[ebp]
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 408  : 	assert( p );

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN9@ReadName
	mov	eax, DWORD PTR ?__LINE__Var@?1??ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z@4JA@7dccd581
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN9@ReadName:

; 409  : 
; 410  : 	// Names start with letters or underscores.
; 411  : 	// Of course, in unicode, tinyxml has no idea what a letter *is*. The
; 412  : 	// algorithm is generous.
; 413  : 	//
; 414  : 	// After that, they can be letters, underscores, numbers,
; 415  : 	// hyphens, or colons. (Colons are valid ony for namespaces,
; 416  : 	// but tinyxml can't tell namespaces from names.)
; 417  : 	if (    p && *p
; 418  : 		 && ( IsAlpha( (unsigned char) *p, encoding ) || *p == '_' ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN6@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN6@ReadName
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	?IsAlpha@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z ; TiXmlBase::IsAlpha
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 95					; 0000005fH
	jne	$LN6@ReadName
$LN5@ReadName:

; 419  : 	{
; 420  : 		const char* start = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _start$209403[ebp], eax
$LN4@ReadName:

; 421  : 		while(		p && *p
; 422  : 				&&	(		IsAlphaNum( (unsigned char ) *p, encoding )
; 423  : 						 || *p == '_'
; 424  : 						 || *p == '-'
; 425  : 						 || *p == '.'
; 426  : 						 || *p == ':' ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@ReadName
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	call	?IsAlphaNum@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z ; TiXmlBase::IsAlphaNum
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN2@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 95					; 0000005fH
	je	SHORT $LN2@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN2@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	SHORT $LN2@ReadName
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN3@ReadName
$LN2@ReadName:

; 427  : 		{
; 428  : 			//(*name) += *p; // expensive
; 429  : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 430  : 		}

	jmp	SHORT $LN4@ReadName
$LN3@ReadName:

; 431  : 		if ( p-start > 0 ) {

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _start$209403[ebp]
	test	eax, eax
	jle	SHORT $LN1@ReadName

; 432  : 			name->assign( start, p-start );

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR _start$209403[ebp]
	push	eax
	mov	ecx, DWORD PTR _start$209403[ebp]
	push	ecx
	mov	ecx, DWORD PTR _name$[ebp]
	call	?assign@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::assign
$LN1@ReadName:

; 433  : 		}
; 434  : 		return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	SHORT $LN7@ReadName
$LN6@ReadName:

; 435  : 	}
; 436  : 	return 0;

	xor	eax, eax
$LN7@ReadName:

; 437  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z ENDP ; TiXmlBase::ReadName
_TEXT	ENDS
PUBLIC	??_C@_1FO@HPPHIJHG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt?$AAy?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAs?$AAt?$AAr?$AA?5?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt@ ; `string'
PUBLIC	?__LINE__Var@?1??GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z@4JA@7dccd581 ; `TiXmlBase::GetEntity'::`2'::__LINE__Var
PUBLIC	??1TiXmlString@@QAE@XZ				; TiXmlString::~TiXmlString
PUBLIC	??0TiXmlString@@QAE@XZ				; TiXmlString::TiXmlString
PUBLIC	?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ; TiXmlBase::GetEntity
EXTRN	_strlen:PROC
EXTRN	_strncmp:PROC
EXTRN	_strchr:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT ??_C@_1FO@HPPHIJHG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt?$AAy?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAs?$AAt?$AAr?$AA?5?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt@
CONST	SEGMENT
??_C@_1FO@HPPHIJHG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt?$AAy?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAs?$AAt?$AAr?$AA?5?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '(', 00H
	DB	' ', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, ' ', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	'[', 00H, 'i', 00H, ']', 00H, '.', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, 'L', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z@4JA@7dccd581
_DATA	SEGMENT
?__LINE__Var@?1??GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z@4JA@7dccd581 DD 01b8H ; `TiXmlBase::GetEntity'::`2'::__LINE__Var
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z$0
__ehfuncinfo$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
$T210126 = -392						; size = 4
$T210127 = -380						; size = 4
$T210128 = -368						; size = 4
$T210129 = -356						; size = 4
$T210130 = -344						; size = 4
$T210131 = -332						; size = 4
$T210132 = -320						; size = 4
$T210134 = -308						; size = 4
$T210135 = -296						; size = 4
_q$209442 = -92						; size = 4
_q$209425 = -80						; size = 4
_mult$209421 = -68					; size = 4
_delta$209420 = -56					; size = 4
_ucs$209419 = -44					; size = 4
_i$ = -32						; size = 4
_ent$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_value$ = 12						; size = 4
_length$ = 16						; size = 4
_encoding$ = 20						; size = 4
?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z PROC ; TiXmlBase::GetEntity, COMDAT

; 440  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-396]
	mov	ecx, 96					; 00000060H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 441  : 	// Presume an entity, and pull it out.
; 442  :     TIXML_STRING ent;

	lea	ecx, DWORD PTR _ent$[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 443  : 	int i;
; 444  : 	*length = 0;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 0

; 445  : 
; 446  : 	if ( *(p+1) && *(p+1) == '#' && *(p+2) )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	$LN27@GetEntity
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 35					; 00000023H
	jne	$LN27@GetEntity
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	$LN27@GetEntity

; 447  : 	{
; 448  : 		unsigned long ucs = 0;

	mov	DWORD PTR _ucs$209419[ebp], 0

; 449  : 		ptrdiff_t delta = 0;

	mov	DWORD PTR _delta$209420[ebp], 0

; 450  : 		unsigned mult = 1;

	mov	DWORD PTR _mult$209421[ebp], 1

; 451  : 
; 452  : 		if ( *(p+2) == 'x' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 120				; 00000078H
	jne	$LN26@GetEntity

; 453  : 		{
; 454  : 			// Hexadecimal.
; 455  : 			if ( !*(p+3) ) return 0;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+3]
	test	ecx, ecx
	jne	SHORT $LN25@GetEntity
	mov	DWORD PTR $T210126[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210126[ebp]
	jmp	$LN28@GetEntity
$LN25@GetEntity:

; 456  : 
; 457  : 			const char* q = p+3;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 3
	mov	DWORD PTR _q$209425[ebp], eax

; 458  : 			q = strchr( q, ';' );

	push	59					; 0000003bH
	mov	eax, DWORD PTR _q$209425[ebp]
	push	eax
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _q$209425[ebp], eax

; 459  : 
; 460  : 			if ( !q || !*q ) return 0;

	cmp	DWORD PTR _q$209425[ebp], 0
	je	SHORT $LN23@GetEntity
	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN24@GetEntity
$LN23@GetEntity:
	mov	DWORD PTR $T210127[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210127[ebp]
	jmp	$LN28@GetEntity
$LN24@GetEntity:

; 461  : 
; 462  : 			delta = q-p;

	mov	eax, DWORD PTR _q$209425[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _delta$209420[ebp], eax

; 463  : 			--q;

	mov	eax, DWORD PTR _q$209425[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$209425[ebp], eax
$LN22@GetEntity:

; 464  : 
; 465  : 			while ( *q != 'x' )

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 120				; 00000078H
	je	$LN21@GetEntity

; 466  : 			{
; 467  : 				if ( *q >= '0' && *q <= '9' )

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN20@GetEntity
	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN20@GetEntity

; 468  : 					ucs += mult * (*q - '0');

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	imul	ecx, DWORD PTR _mult$209421[ebp]
	add	ecx, DWORD PTR _ucs$209419[ebp]
	mov	DWORD PTR _ucs$209419[ebp], ecx
	jmp	SHORT $LN19@GetEntity
$LN20@GetEntity:

; 469  : 				else if ( *q >= 'a' && *q <= 'f' )

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN18@GetEntity
	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 102				; 00000066H
	jg	SHORT $LN18@GetEntity

; 470  : 					ucs += mult * (*q - 'a' + 10);

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 87					; 00000057H
	imul	ecx, DWORD PTR _mult$209421[ebp]
	add	ecx, DWORD PTR _ucs$209419[ebp]
	mov	DWORD PTR _ucs$209419[ebp], ecx
	jmp	SHORT $LN19@GetEntity
$LN18@GetEntity:

; 471  : 				else if ( *q >= 'A' && *q <= 'F' )

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN16@GetEntity
	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 70					; 00000046H
	jg	SHORT $LN16@GetEntity

; 472  : 					ucs += mult * (*q - 'A' + 10 );

	mov	eax, DWORD PTR _q$209425[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 55					; 00000037H
	imul	ecx, DWORD PTR _mult$209421[ebp]
	add	ecx, DWORD PTR _ucs$209419[ebp]
	mov	DWORD PTR _ucs$209419[ebp], ecx

; 473  : 				else

	jmp	SHORT $LN19@GetEntity
$LN16@GetEntity:

; 474  : 					return 0;

	mov	DWORD PTR $T210128[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210128[ebp]
	jmp	$LN28@GetEntity
$LN19@GetEntity:

; 475  : 				mult *= 16;

	mov	eax, DWORD PTR _mult$209421[ebp]
	shl	eax, 4
	mov	DWORD PTR _mult$209421[ebp], eax

; 476  : 				--q;

	mov	eax, DWORD PTR _q$209425[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$209425[ebp], eax

; 477  : 			}

	jmp	$LN22@GetEntity
$LN21@GetEntity:

; 478  : 		}
; 479  : 		else

	jmp	$LN14@GetEntity
$LN26@GetEntity:

; 480  : 		{
; 481  : 			// Decimal.
; 482  : 			if ( !*(p+2) ) return 0;

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	jne	SHORT $LN13@GetEntity
	mov	DWORD PTR $T210129[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210129[ebp]
	jmp	$LN28@GetEntity
$LN13@GetEntity:

; 483  : 
; 484  : 			const char* q = p+2;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 2
	mov	DWORD PTR _q$209442[ebp], eax

; 485  : 			q = strchr( q, ';' );

	push	59					; 0000003bH
	mov	eax, DWORD PTR _q$209442[ebp]
	push	eax
	call	_strchr
	add	esp, 8
	mov	DWORD PTR _q$209442[ebp], eax

; 486  : 
; 487  : 			if ( !q || !*q ) return 0;

	cmp	DWORD PTR _q$209442[ebp], 0
	je	SHORT $LN11@GetEntity
	mov	eax, DWORD PTR _q$209442[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN12@GetEntity
$LN11@GetEntity:
	mov	DWORD PTR $T210130[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210130[ebp]
	jmp	$LN28@GetEntity
$LN12@GetEntity:

; 488  : 
; 489  : 			delta = q-p;

	mov	eax, DWORD PTR _q$209442[ebp]
	sub	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _delta$209420[ebp], eax

; 490  : 			--q;

	mov	eax, DWORD PTR _q$209442[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$209442[ebp], eax
$LN10@GetEntity:

; 491  : 
; 492  : 			while ( *q != '#' )

	mov	eax, DWORD PTR _q$209442[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 35					; 00000023H
	je	SHORT $LN14@GetEntity

; 493  : 			{
; 494  : 				if ( *q >= '0' && *q <= '9' )

	mov	eax, DWORD PTR _q$209442[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN8@GetEntity
	mov	eax, DWORD PTR _q$209442[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN8@GetEntity

; 495  : 					ucs += mult * (*q - '0');

	mov	eax, DWORD PTR _q$209442[ebp]
	movsx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	imul	ecx, DWORD PTR _mult$209421[ebp]
	add	ecx, DWORD PTR _ucs$209419[ebp]
	mov	DWORD PTR _ucs$209419[ebp], ecx

; 496  : 				else

	jmp	SHORT $LN7@GetEntity
$LN8@GetEntity:

; 497  : 					return 0;

	mov	DWORD PTR $T210131[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210131[ebp]
	jmp	$LN28@GetEntity
$LN7@GetEntity:

; 498  : 				mult *= 10;

	mov	eax, DWORD PTR _mult$209421[ebp]
	imul	eax, 10					; 0000000aH
	mov	DWORD PTR _mult$209421[ebp], eax

; 499  : 				--q;

	mov	eax, DWORD PTR _q$209442[ebp]
	sub	eax, 1
	mov	DWORD PTR _q$209442[ebp], eax

; 500  : 			}

	jmp	SHORT $LN10@GetEntity
$LN14@GetEntity:

; 501  : 		}
; 502  : 		if ( encoding == TIXML_ENCODING_UTF8 )

	cmp	DWORD PTR _encoding$[ebp], 1
	jne	SHORT $LN6@GetEntity

; 503  : 		{
; 504  : 			// convert the UCS to UTF-8
; 505  : 			ConvertUTF32ToUTF8( ucs, value, length );

	mov	eax, DWORD PTR _length$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ucs$209419[ebp]
	push	edx
	call	?ConvertUTF32ToUTF8@TiXmlBase@@KAXKPADPAH@Z ; TiXmlBase::ConvertUTF32ToUTF8
	add	esp, 12					; 0000000cH

; 506  : 		}
; 507  : 		else

	jmp	SHORT $LN5@GetEntity
$LN6@GetEntity:

; 508  : 		{
; 509  : 			*value = (char)ucs;

	mov	eax, DWORD PTR _value$[ebp]
	mov	cl, BYTE PTR _ucs$209419[ebp]
	mov	BYTE PTR [eax], cl

; 510  : 			*length = 1;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 1
$LN5@GetEntity:

; 511  : 		}
; 512  : 		return p + delta + 1;

	mov	eax, DWORD PTR _delta$209420[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR $T210132[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210132[ebp]
	jmp	$LN28@GetEntity
$LN27@GetEntity:

; 513  : 	}
; 514  : 
; 515  : 	// Now try to match it.
; 516  : 	for( i=0; i<NUM_ENTITY; ++i )

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@GetEntity
$LN3@GetEntity:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetEntity:
	cmp	DWORD PTR _i$[ebp], 5
	jge	$LN2@GetEntity

; 517  : 	{
; 518  : 		if ( strncmp( entity[i].str, p, entity[i].strLength ) == 0 )

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A[eax+4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A[eax]
	push	ecx
	call	_strncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN1@GetEntity

; 519  : 		{
; 520  : 			assert( strlen( entity[i].str ) == entity[i].strLength );

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A[eax]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _i$[ebp]
	imul	edx, 12					; 0000000cH
	cmp	eax, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A[edx+4]
	je	SHORT $LN30@GetEntity
	mov	eax, DWORD PTR ?__LINE__Var@?1??GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z@4JA@7dccd581
	add	eax, 80					; 00000050H
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1FO@HPPHIJHG@?$AAs?$AAt?$AAr?$AAl?$AAe?$AAn?$AA?$CI?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt?$AAy?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAs?$AAt?$AAr?$AA?5?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAn?$AAt?$AAi?$AAt@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN30@GetEntity:

; 521  : 			*value = entity[i].chr;

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _value$[ebp]
	mov	dl, BYTE PTR ?entity@TiXmlBase@@0PAUEntity@1@A[eax+8]
	mov	BYTE PTR [ecx], dl

; 522  : 			*length = 1;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 1

; 523  : 			return ( p + entity[i].strLength );

	mov	eax, DWORD PTR _i$[ebp]
	imul	eax, 12					; 0000000cH
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR ?entity@TiXmlBase@@0PAUEntity@1@A[eax+4]
	mov	DWORD PTR $T210134[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210134[ebp]
	jmp	SHORT $LN28@GetEntity
$LN1@GetEntity:

; 524  : 		}
; 525  : 	}

	jmp	$LN3@GetEntity
$LN2@GetEntity:

; 526  : 
; 527  : 	// So it wasn't an entity, its unrecognized, or something like that.
; 528  : 	*value = *p;	// Don't put back the last one, since we return it!

	mov	eax, DWORD PTR _value$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 529  : 	//*length = 1;	// Leave unrecognized entities - this doesn't really work.
; 530  : 					// Just writes strange XML.
; 531  : 	return p+1;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR $T210135[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _ent$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210135[ebp]
$LN28@GetEntity:

; 532  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN35@GetEntity
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN35@GetEntity:
	DD	1
	DD	$LN34@GetEntity
$LN34@GetEntity:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN32@GetEntity
$LN32@GetEntity:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _ent$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-400]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ENDP ; TiXmlBase::GetEntity
PUBLIC	?ToLower@TiXmlBase@@KAHHW4TiXmlEncoding@@@Z	; TiXmlBase::ToLower
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_17NHJOKMLJ@?$AAt?$AAa?$AAg?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z@4JA@7dccd581 ; `TiXmlBase::StringEqual'::`2'::__LINE__Var
PUBLIC	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_17NHJOKMLJ@?$AAt?$AAa?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_17NHJOKMLJ@?$AAt?$AAa?$AAg?$AA?$AA@ DB 't', 00H, 'a', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z@4JA@7dccd581
_DATA	SEGMENT
?__LINE__Var@?1??StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z@4JA@7dccd581 DD 021bH ; `TiXmlBase::StringEqual'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_q$ = -8						; size = 4
_p$ = 8							; size = 4
_tag$ = 12						; size = 4
_ignoreCase$ = 16					; size = 1
_encoding$ = 20						; size = 4
?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z PROC ; TiXmlBase::StringEqual, COMDAT

; 539  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 540  : 	assert( p );

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN13@StringEqua
	mov	eax, DWORD PTR ?__LINE__Var@?1??StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z@4JA@7dccd581
	add	eax, 1
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@StringEqua:

; 541  : 	assert( tag );

	cmp	DWORD PTR _tag$[ebp], 0
	jne	SHORT $LN14@StringEqua
	mov	eax, DWORD PTR ?__LINE__Var@?1??StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z@4JA@7dccd581
	add	eax, 2
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_17NHJOKMLJ@?$AAt?$AAa?$AAg?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN14@StringEqua:

; 542  : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN9@StringEqua
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN10@StringEqua
$LN9@StringEqua:

; 543  : 	{
; 544  : 		assert( 0 );

	xor	eax, eax
	jne	SHORT $LN15@StringEqua
	mov	ecx, DWORD PTR ?__LINE__Var@?1??StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z@4JA@7dccd581
	add	ecx, 5
	push	ecx
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_13COJANIEC@?$AA0?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@StringEqua:

; 545  : 		return false;

	xor	al, al
	jmp	$LN11@StringEqua
$LN10@StringEqua:

; 546  : 	}
; 547  : 
; 548  : 	const char* q = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _q$[ebp], eax

; 549  : 
; 550  : 	if ( ignoreCase )

	movzx	eax, BYTE PTR _ignoreCase$[ebp]
	test	eax, eax
	je	SHORT $LN3@StringEqua
$LN7@StringEqua:

; 551  : 	{
; 552  : 		while ( *q && *tag && ToLower( *q, encoding ) == ToLower( *tag, encoding ) )

	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@StringEqua
	mov	eax, DWORD PTR _tag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@StringEqua
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	?ToLower@TiXmlBase@@KAHHW4TiXmlEncoding@@@Z ; TiXmlBase::ToLower
	add	esp, 8
	mov	esi, eax
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tag$[ebp]
	movsx	edx, BYTE PTR [ecx]
	push	edx
	call	?ToLower@TiXmlBase@@KAHHW4TiXmlEncoding@@@Z ; TiXmlBase::ToLower
	add	esp, 8
	cmp	esi, eax
	jne	SHORT $LN6@StringEqua

; 553  : 		{
; 554  : 			++q;

	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 1
	mov	DWORD PTR _q$[ebp], eax

; 555  : 			++tag;

	mov	eax, DWORD PTR _tag$[ebp]
	add	eax, 1
	mov	DWORD PTR _tag$[ebp], eax

; 556  : 		}

	jmp	SHORT $LN7@StringEqua
$LN6@StringEqua:

; 557  : 
; 558  : 		if ( *tag == 0 )

	mov	eax, DWORD PTR _tag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN5@StringEqua

; 559  : 			return true;

	mov	al, 1
	jmp	SHORT $LN11@StringEqua
$LN5@StringEqua:

; 560  : 	}
; 561  : 	else

	jmp	SHORT $LN4@StringEqua
$LN3@StringEqua:

; 562  : 	{
; 563  : 		while ( *q && *tag && *q == *tag )

	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@StringEqua
	mov	eax, DWORD PTR _tag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@StringEqua
	mov	eax, DWORD PTR _q$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _tag$[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	ecx, eax
	jne	SHORT $LN2@StringEqua

; 564  : 		{
; 565  : 			++q;

	mov	eax, DWORD PTR _q$[ebp]
	add	eax, 1
	mov	DWORD PTR _q$[ebp], eax

; 566  : 			++tag;

	mov	eax, DWORD PTR _tag$[ebp]
	add	eax, 1
	mov	DWORD PTR _tag$[ebp], eax

; 567  : 		}

	jmp	SHORT $LN3@StringEqua
$LN2@StringEqua:

; 568  : 
; 569  : 		if ( *tag == 0 )		// Have we found the end of the tag, and everything equal?

	mov	eax, DWORD PTR _tag$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN4@StringEqua

; 570  : 			return true;

	mov	al, 1
	jmp	SHORT $LN11@StringEqua
$LN4@StringEqua:

; 571  : 	}
; 572  : 	return false;

	xor	al, al
$LN11@StringEqua:

; 573  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ENDP ; TiXmlBase::StringEqual
_TEXT	ENDS
PUBLIC	??YTiXmlString@@QAEAAV0@D@Z			; TiXmlString::operator+=
PUBLIC	?GetChar@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ; TiXmlBase::GetChar
PUBLIC	?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z ; TiXmlBase::ReadText
EXTRN	?append@TiXmlString@@QAEAAV1@PBDI@Z:PROC	; TiXmlString::append
EXTRN	?condenseWhiteSpace@TiXmlBase@@0_NA:BYTE	; TiXmlBase::condenseWhiteSpace
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_cArr$209516 = -56					; size = 4
_len$209515 = -44					; size = 4
_whitespace$209505 = -29				; size = 1
_cArr$209503 = -20					; size = 4
_len$209502 = -8					; size = 4
_p$ = 8							; size = 4
_text$ = 12						; size = 4
_trimWhiteSpace$ = 16					; size = 1
_endTag$ = 20						; size = 4
_caseInsensitive$ = 24					; size = 1
_encoding$ = 28						; size = 4
?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z PROC ; TiXmlBase::ReadText, COMDAT

; 581  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 582  :     *text = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _text$[ebp]
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 583  : 	if (    !trimWhiteSpace			// certain tags always keep whitespace
; 584  : 		 || !condenseWhiteSpace )	// if true, whitespace is always kept

	movzx	eax, BYTE PTR _trimWhiteSpace$[ebp]
	test	eax, eax
	je	SHORT $LN14@ReadText
	movzx	eax, BYTE PTR ?condenseWhiteSpace@TiXmlBase@@0_NA ; TiXmlBase::condenseWhiteSpace
	test	eax, eax
	jne	SHORT $LN16@ReadText
$LN14@ReadText:

; 585  : 	{
; 586  : 		// Keep all the white space.
; 587  : 		while (	   p && *p
; 588  : 				&& !StringEqual( p, endTag, caseInsensitive, encoding )
; 589  : 			  )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN13@ReadText
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN13@ReadText
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _caseInsensitive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _endTag$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN13@ReadText

; 590  : 		{
; 591  : 			int len;
; 592  : 			char cArr[4] = { 0, 0, 0, 0 };

	mov	BYTE PTR _cArr$209503[ebp], 0
	mov	BYTE PTR _cArr$209503[ebp+1], 0
	mov	BYTE PTR _cArr$209503[ebp+2], 0
	mov	BYTE PTR _cArr$209503[ebp+3], 0

; 593  : 			p = GetChar( p, cArr, &len, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$209502[ebp]
	push	ecx
	lea	edx, DWORD PTR _cArr$209503[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?GetChar@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ; TiXmlBase::GetChar
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax

; 594  : 			text->append( cArr, len );

	mov	eax, DWORD PTR _len$209502[ebp]
	push	eax
	lea	ecx, DWORD PTR _cArr$209503[ebp]
	push	ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 595  : 		}

	jmp	SHORT $LN14@ReadText
$LN13@ReadText:

; 596  : 	}
; 597  : 	else

	jmp	$LN12@ReadText
$LN16@ReadText:

; 598  : 	{
; 599  : 		bool whitespace = false;

	mov	BYTE PTR _whitespace$209505[ebp], 0

; 600  : 
; 601  : 		// Remove leading white space:
; 602  : 		p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
$LN11@ReadText:

; 603  : 		while (	   p && *p
; 604  : 				&& !StringEqual( p, endTag, caseInsensitive, encoding ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN12@ReadText
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN12@ReadText
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _caseInsensitive$[ebp]
	push	ecx
	mov	edx, DWORD PTR _endTag$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN12@ReadText

; 605  : 		{
; 606  : 			if ( *p == '\r' || *p == '\n' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN8@ReadText
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jne	SHORT $LN9@ReadText
$LN8@ReadText:

; 607  : 			{
; 608  : 				whitespace = true;

	mov	BYTE PTR _whitespace$209505[ebp], 1

; 609  : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	$LN7@ReadText
$LN9@ReadText:

; 610  : 			}
; 611  : 			else if ( IsWhiteSpace( *p ) )

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@ReadText

; 612  : 			{
; 613  : 				whitespace = true;

	mov	BYTE PTR _whitespace$209505[ebp], 1

; 614  : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 615  : 			}
; 616  : 			else

	jmp	SHORT $LN7@ReadText
$LN6@ReadText:

; 617  : 			{
; 618  : 				// If we've found whitespace, add it before the
; 619  : 				// new character. Any whitespace just becomes a space.
; 620  : 				if ( whitespace )

	movzx	eax, BYTE PTR _whitespace$209505[ebp]
	test	eax, eax
	je	SHORT $LN4@ReadText

; 621  : 				{
; 622  : 					(*text) += ' ';

	push	32					; 00000020H
	mov	ecx, DWORD PTR _text$[ebp]
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 623  : 					whitespace = false;

	mov	BYTE PTR _whitespace$209505[ebp], 0
$LN4@ReadText:

; 624  : 				}
; 625  : 				int len;
; 626  : 				char cArr[4] = { 0, 0, 0, 0 };

	mov	BYTE PTR _cArr$209516[ebp], 0
	mov	BYTE PTR _cArr$209516[ebp+1], 0
	mov	BYTE PTR _cArr$209516[ebp+2], 0
	mov	BYTE PTR _cArr$209516[ebp+3], 0

; 627  : 				p = GetChar( p, cArr, &len, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	lea	ecx, DWORD PTR _len$209515[ebp]
	push	ecx
	lea	edx, DWORD PTR _cArr$209516[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?GetChar@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ; TiXmlBase::GetChar
	add	esp, 16					; 00000010H
	mov	DWORD PTR _p$[ebp], eax

; 628  : 				if ( len == 1 )

	cmp	DWORD PTR _len$209515[ebp], 1
	jne	SHORT $LN3@ReadText

; 629  : 					(*text) += cArr[0];	// more efficient

	movzx	eax, BYTE PTR _cArr$209516[ebp]
	push	eax
	mov	ecx, DWORD PTR _text$[ebp]
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 630  : 				else

	jmp	SHORT $LN7@ReadText
$LN3@ReadText:

; 631  : 					text->append( cArr, len );

	mov	eax, DWORD PTR _len$209515[ebp]
	push	eax
	lea	ecx, DWORD PTR _cArr$209516[ebp]
	push	ecx
	mov	ecx, DWORD PTR _text$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append
$LN7@ReadText:

; 632  : 			}
; 633  : 		}

	jmp	$LN11@ReadText
$LN12@ReadText:

; 634  : 	}
; 635  : 	if ( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@ReadText

; 636  : 		p += strlen( endTag );

	mov	eax, DWORD PTR _endTag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN1@ReadText:

; 637  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]

; 638  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@ReadText
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@ReadText:
	DD	4
	DD	$LN23@ReadText
$LN23@ReadText:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN19@ReadText
	DD	-20					; ffffffecH
	DD	4
	DD	$LN20@ReadText
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN21@ReadText
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN22@ReadText
$LN22@ReadText:
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN21@ReadText:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
$LN20@ReadText:
	DB	99					; 00000063H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN19@ReadText:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z ENDP ; TiXmlBase::ReadText
_TEXT	ENDS
PUBLIC	??_C@_04OOMJJNCF@UTF8?$AA@			; `string'
PUBLIC	??_C@_05EGJIMALK@UTF?98?$AA@			; `string'
PUBLIC	??_C@_17BJLLLIIO@?$AAe?$AAn?$AAc?$AA?$AA@	; `string'
PUBLIC	?__LINE__Var@?1??Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA ; `TiXmlDocument::Parse'::`2'::__LINE__Var
PUBLIC	?Encoding@TiXmlDeclaration@@QBEPBDXZ		; TiXmlDeclaration::Encoding
PUBLIC	?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z ; TiXmlNode::Identify
PUBLIC	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ	; TiXmlParsingData::Cursor
PUBLIC	??0TiXmlParsingData@@AAE@PBDHHH@Z		; TiXmlParsingData::TiXmlParsingData
PUBLIC	?TabSize@TiXmlDocument@@QBEHXZ			; TiXmlDocument::TabSize
PUBLIC	?Clear@TiXmlCursor@@QAEXXZ			; TiXmlCursor::Clear
PUBLIC	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
PUBLIC	?ClearError@TiXmlDocument@@QAEXXZ		; TiXmlDocument::ClearError
PUBLIC	?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::Parse
EXTRN	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z:PROC	; TiXmlNode::LinkEndChild
;	COMDAT ??_C@_04OOMJJNCF@UTF8?$AA@
CONST	SEGMENT
??_C@_04OOMJJNCF@UTF8?$AA@ DB 'UTF8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGJIMALK@UTF?98?$AA@
CONST	SEGMENT
??_C@_05EGJIMALK@UTF?98?$AA@ DB 'UTF-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_17BJLLLIIO@?$AAe?$AAn?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_17BJLLLIIO@?$AAe?$AAn?$AAc?$AA?$AA@ DB 'e', 00H, 'n', 00H, 'c', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA DD 02c2H ; `TiXmlDocument::Parse'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_enc$209544 = -80					; size = 4
_dec$209543 = -68					; size = 4
_node$209539 = -56					; size = 4
_pU$209532 = -44					; size = 4
_data$ = -32						; size = 16
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_prevData$ = 12						; size = 4
_encoding$ = 16						; size = 4
?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlDocument::Parse, COMDAT
; _this$ = ecx

; 706  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 707  : 	ClearError();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearError@TiXmlDocument@@QAEXXZ	; TiXmlDocument::ClearError

; 708  : 
; 709  : 	// Parse away, at the document level. Since a document
; 710  : 	// contains nothing but other tags, most of what happens
; 711  : 	// here is skipping white space.
; 712  : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN18@Parse
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN19@Parse
$LN18@Parse:

; 713  : 	{
; 714  : 		SetError( TIXML_ERROR_DOCUMENT_EMPTY, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 715  : 		return 0;

	xor	eax, eax
	jmp	$LN20@Parse
$LN19@Parse:

; 716  : 	}
; 717  : 
; 718  : 	// Note that, for a document, this needs to come
; 719  : 	// before the while space skip, so that parsing
; 720  : 	// starts from the pointer we are given.
; 721  : 	location.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Clear@TiXmlCursor@@QAEXXZ		; TiXmlCursor::Clear

; 722  : 	if ( prevData )

	cmp	DWORD PTR _prevData$[ebp], 0
	je	SHORT $LN17@Parse

; 723  : 	{
; 724  : 		location.row = prevData->cursor.row;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _prevData$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 725  : 		location.col = prevData->cursor.col;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _prevData$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx

; 726  : 	}
; 727  : 	else

	jmp	SHORT $LN16@Parse
$LN17@Parse:

; 728  : 	{
; 729  : 		location.row = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 730  : 		location.col = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN16@Parse:

; 731  : 	}
; 732  : 	TiXmlParsingData data( p, TabSize(), location.row, location.col );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TabSize@TiXmlDocument@@QBEHXZ		; TiXmlDocument::TabSize
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _data$[ebp]
	call	??0TiXmlParsingData@@AAE@PBDHHH@Z	; TiXmlParsingData::TiXmlParsingData

; 733  : 	location = data.Cursor();

	lea	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx

; 734  : 
; 735  : 	if ( encoding == TIXML_ENCODING_UNKNOWN )

	cmp	DWORD PTR _encoding$[ebp], 0
	jne	SHORT $LN15@Parse

; 736  : 	{
; 737  : 		// Check for the Microsoft UTF-8 lead bytes.
; 738  : 		const unsigned char* pU = (const unsigned char*)p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pU$209532[ebp], eax

; 739  : 		if (	*(pU+0) && *(pU+0) == TIXML_UTF_LEAD_0
; 740  : 			 && *(pU+1) && *(pU+1) == TIXML_UTF_LEAD_1
; 741  : 			 && *(pU+2) && *(pU+2) == TIXML_UTF_LEAD_2 )

	mov	eax, DWORD PTR _pU$209532[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN15@Parse
	mov	eax, DWORD PTR _pU$209532[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 239				; 000000efH
	jne	SHORT $LN15@Parse
	mov	eax, DWORD PTR _pU$209532[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	test	ecx, ecx
	je	SHORT $LN15@Parse
	mov	eax, DWORD PTR _pU$209532[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 187				; 000000bbH
	jne	SHORT $LN15@Parse
	mov	eax, DWORD PTR _pU$209532[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	test	ecx, ecx
	je	SHORT $LN15@Parse
	mov	eax, DWORD PTR _pU$209532[ebp]
	movzx	ecx, BYTE PTR [eax+2]
	cmp	ecx, 191				; 000000bfH
	jne	SHORT $LN15@Parse

; 742  : 		{
; 743  : 			encoding = TIXML_ENCODING_UTF8;

	mov	DWORD PTR _encoding$[ebp], 1

; 744  : 			useMicrosoftBOM = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 1
$LN15@Parse:

; 745  : 		}
; 746  : 	}
; 747  : 
; 748  :     p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 749  : 	if ( !p )

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN12@Parse

; 750  : 	{
; 751  : 		SetError( TIXML_ERROR_DOCUMENT_EMPTY, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 752  : 		return 0;

	xor	eax, eax
	jmp	$LN20@Parse
$LN12@Parse:

; 753  : 	}
; 754  : 
; 755  : 	while ( p && *p )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN11@Parse
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN11@Parse

; 756  : 	{
; 757  : 		TiXmlNode* node = Identify( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z ; TiXmlNode::Identify
	mov	DWORD PTR _node$209539[ebp], eax

; 758  : 		if ( node )

	cmp	DWORD PTR _node$209539[ebp], 0
	je	SHORT $LN10@Parse

; 759  : 		{
; 760  : 			p = node->Parse( p, &data, encoding );

	mov	esi, esp
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	lea	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$209539[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$209539[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 761  : 			LinkEndChild( node );

	mov	eax, DWORD PTR _node$209539[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild

; 762  : 		}
; 763  : 		else

	jmp	SHORT $LN9@Parse
$LN10@Parse:

; 764  : 		{
; 765  : 			break;

	jmp	$LN11@Parse
$LN9@Parse:

; 766  : 		}
; 767  : 
; 768  : 		// Did we get encoding info?
; 769  : 		if (    encoding == TIXML_ENCODING_UNKNOWN
; 770  : 			 && node->ToDeclaration() )

	cmp	DWORD PTR _encoding$[ebp], 0
	jne	$LN8@Parse
	mov	eax, DWORD PTR _node$209539[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$209539[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	$LN8@Parse

; 771  : 		{
; 772  : 			TiXmlDeclaration* dec = node->ToDeclaration();

	mov	eax, DWORD PTR _node$209539[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _node$209539[ebp]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dec$209543[ebp], eax

; 773  : 			const char* enc = dec->Encoding();

	mov	ecx, DWORD PTR _dec$209543[ebp]
	call	?Encoding@TiXmlDeclaration@@QBEPBDXZ	; TiXmlDeclaration::Encoding
	mov	DWORD PTR _enc$209544[ebp], eax

; 774  : 			assert( enc );

	cmp	DWORD PTR _enc$209544[ebp], 0
	jne	SHORT $LN22@Parse
	mov	eax, DWORD PTR ?__LINE__Var@?1??Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA
	add	eax, 68					; 00000044H
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_17BJLLLIIO@?$AAe?$AAn?$AAc?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN22@Parse:

; 775  : 
; 776  : 			if ( *enc == 0 )

	mov	eax, DWORD PTR _enc$209544[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN7@Parse

; 777  : 				encoding = TIXML_ENCODING_UTF8;

	mov	DWORD PTR _encoding$[ebp], 1
	jmp	SHORT $LN8@Parse
$LN7@Parse:

; 778  : 			else if ( StringEqual( enc, "UTF-8", true, TIXML_ENCODING_UNKNOWN ) )

	push	0
	push	1
	push	OFFSET ??_C@_05EGJIMALK@UTF?98?$AA@
	mov	eax, DWORD PTR _enc$209544[ebp]
	push	eax
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@Parse

; 779  : 				encoding = TIXML_ENCODING_UTF8;

	mov	DWORD PTR _encoding$[ebp], 1
	jmp	SHORT $LN8@Parse
$LN5@Parse:

; 780  : 			else if ( StringEqual( enc, "UTF8", true, TIXML_ENCODING_UNKNOWN ) )

	push	0
	push	1
	push	OFFSET ??_C@_04OOMJJNCF@UTF8?$AA@
	mov	eax, DWORD PTR _enc$209544[ebp]
	push	eax
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@Parse

; 781  : 				encoding = TIXML_ENCODING_UTF8;	// incorrect, but be nice

	mov	DWORD PTR _encoding$[ebp], 1

; 782  : 			else

	jmp	SHORT $LN8@Parse
$LN3@Parse:

; 783  : 				encoding = TIXML_ENCODING_LEGACY;

	mov	DWORD PTR _encoding$[ebp], 2
$LN8@Parse:

; 784  : 		}
; 785  : 
; 786  : 		p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 787  : 	}

	jmp	$LN12@Parse
$LN11@Parse:

; 788  : 
; 789  : 	// Was this empty?
; 790  : 	if ( !firstChild ) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN1@Parse

; 791  : 		SetError( TIXML_ERROR_DOCUMENT_EMPTY, 0, 0, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	push	0
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 792  : 		return 0;

	xor	eax, eax
	jmp	SHORT $LN20@Parse
$LN1@Parse:

; 793  : 	}
; 794  : 
; 795  : 	// All is well.
; 796  : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN20@Parse:

; 797  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@Parse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN25@Parse:
	DD	1
	DD	$LN24@Parse
$LN24@Parse:
	DD	-32					; ffffffe0H
	DD	16					; 00000010H
	DD	$LN23@Parse
$LN23@Parse:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
?Parse@TiXmlDocument@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlDocument::Parse
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ PROC	; TiXmlParsingData::Cursor, COMDAT
; _this$ = ecx

; 178  : 	const TiXmlCursor& Cursor()	{ return cursor; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ENDP	; TiXmlParsingData::Cursor
_TEXT	ENDS
PUBLIC	??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ ; `string'
PUBLIC	??0TiXmlCursor@@QAE@XZ				; TiXmlCursor::TiXmlCursor
;	COMDAT ??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@ DB 's', 00H, 't', 00H
	DB	'a', 00H, 'r', 00H, 't', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0TiXmlParsingData@@AAE@PBDHHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_start$ = 8						; size = 4
__tabsize$ = 12						; size = 4
_row$ = 16						; size = 4
_col$ = 20						; size = 4
??0TiXmlParsingData@@AAE@PBDHHH@Z PROC			; TiXmlParsingData::TiXmlParsingData, COMDAT
; _this$ = ecx

; 182  : 	TiXmlParsingData( const char* start, int _tabsize, int row, int col )

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlCursor@@QAE@XZ			; TiXmlCursor::TiXmlCursor

; 183  : 	{
; 184  : 		assert( start );

	cmp	DWORD PTR _start$[ebp], 0
	jne	SHORT $LN3@TiXmlParsi
	push	184					; 000000b8H
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1M@JGKKHEFC@?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@TiXmlParsi:

; 185  : 		stamp = start;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 186  : 		tabsize = _tabsize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __tabsize$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 187  : 		cursor.row = row;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _row$[ebp]
	mov	DWORD PTR [eax], ecx

; 188  : 		cursor.col = col;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _col$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 189  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0TiXmlParsingData@@AAE@PBDHHH@Z ENDP			; TiXmlParsingData::TiXmlParsingData
_TEXT	ENDS
PUBLIC	??_C@_1FE@EHOANJMC@?$AAe?$AAr?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAr?$AAr?$AA?5?$AA?$DM?$AA?5?$AAT?$AAI?$AAX?$AAM?$AAL?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAS?$AAT?$AAR@ ; `string'
PUBLIC	?__LINE__Var@?1??SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA ; `TiXmlDocument::SetError'::`2'::__LINE__Var
EXTRN	?errorString@TiXmlBase@@1PAPBDA:BYTE		; TiXmlBase::errorString
;	COMDAT ??_C@_1FE@EHOANJMC@?$AAe?$AAr?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAr?$AAr?$AA?5?$AA?$DM?$AA?5?$AAT?$AAI?$AAX?$AAM?$AAL?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAS?$AAT?$AAR@
CONST	SEGMENT
??_C@_1FE@EHOANJMC@?$AAe?$AAr?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAr?$AAr?$AA?5?$AA?$DM?$AA?5?$AAT?$AAI?$AAX?$AAM?$AAL?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAS?$AAT?$AAR@ DB 'e'
	DB	00H, 'r', 00H, 'r', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'T', 00H, 'I', 00H, 'X', 00H
	DB	'M', 00H, 'L', 00H, '_', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O'
	DB	00H, 'R', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'U', 00H, 'N'
	DB	00H, 'T', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?1??SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?1??SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA DD 0320H ; `TiXmlDocument::SetError'::`2'::__LINE__Var
; Function compile flags: /Odtp /RTCsu /ZI
_DATA	ENDS
;	COMDAT ?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_err$ = 8						; size = 4
_pError$ = 12						; size = 4
_data$ = 16						; size = 4
_encoding$ = 20						; size = 4
?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlDocument::SetError, COMDAT
; _this$ = ecx

; 800  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 801  : 	// The first error in a chain is more accurate - don't set again!
; 802  : 	if ( error )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN2@SetError

; 803  : 		return;

	jmp	$LN3@SetError
$LN2@SetError:

; 804  : 
; 805  : 	assert( err > 0 && err < TIXML_ERROR_STRING_COUNT );

	cmp	DWORD PTR _err$[ebp], 0
	jle	SHORT $LN5@SetError
	cmp	DWORD PTR _err$[ebp], 17		; 00000011H
	jl	SHORT $LN6@SetError
$LN5@SetError:
	mov	eax, DWORD PTR ?__LINE__Var@?1??SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z@4JA
	add	eax, 5
	push	eax
	push	OFFSET ??_C@_1HA@OEKBGCAM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1FE@EHOANJMC@?$AAe?$AAr?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAe?$AAr?$AAr?$AA?5?$AA?$DM?$AA?5?$AAT?$AAI?$AAX?$AAM?$AAL?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA_?$AAS?$AAT?$AAR@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN6@SetError:

; 806  : 	error   = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 1

; 807  : 	errorId = err;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _err$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 808  : 	errorDesc = errorString[ errorId ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	edx, DWORD PTR ?errorString@TiXmlBase@@1PAPBDA[ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 809  : 
; 810  : 	errorLocation.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Clear@TiXmlCursor@@QAEXXZ		; TiXmlCursor::Clear

; 811  : 	if ( pError && data )

	cmp	DWORD PTR _pError$[ebp], 0
	je	SHORT $LN3@SetError
	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN3@SetError

; 812  : 	{
; 813  : 		data->Stamp( pError, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pError$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 814  : 		errorLocation = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], ecx
	mov	DWORD PTR [eax+64], edx
$LN3@SetError:

; 815  : 	}
; 816  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlDocument::SetError
_TEXT	ENDS
PUBLIC	??0TiXmlUnknown@@QAE@XZ				; TiXmlUnknown::TiXmlUnknown
PUBLIC	?SetCDATA@TiXmlText@@QAEX_N@Z			; TiXmlText::SetCDATA
PUBLIC	??0TiXmlText@@QAE@PBD@Z				; TiXmlText::TiXmlText
PUBLIC	??0TiXmlComment@@QAE@XZ				; TiXmlComment::TiXmlComment
PUBLIC	??0TiXmlDeclaration@@QAE@XZ			; TiXmlDeclaration::TiXmlDeclaration
PUBLIC	??0TiXmlStylesheetReference@@QAE@XZ		; TiXmlStylesheetReference::TiXmlStylesheetReference
PUBLIC	??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@	; `string'
PUBLIC	??_C@_02KBFACPPK@?$DM?$CB?$AA@			; `string'
PUBLIC	??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@		; `string'
PUBLIC	??_C@_0BB@LCMGPMGE@?$DM?$DPxml?9stylesheet?$AA@	; `string'
PUBLIC	??_C@_05DJDIECHG@?$DM?$DPxml?$AA@		; `string'
PUBLIC	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ	; TiXmlNode::GetDocument
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0TiXmlElement@@QAE@PBD@Z:PROC			; TiXmlElement::TiXmlElement
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@
CONST	SEGMENT
??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@ DB '<![CDATA[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KBFACPPK@?$DM?$CB?$AA@
CONST	SEGMENT
??_C@_02KBFACPPK@?$DM?$CB?$AA@ DB '<!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@
CONST	SEGMENT
??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@ DB '<!--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LCMGPMGE@?$DM?$DPxml?9stylesheet?$AA@
CONST	SEGMENT
??_C@_0BB@LCMGPMGE@?$DM?$DPxml?9stylesheet?$AA@ DB '<?xml-stylesheet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DJDIECHG@?$DM?$DPxml?$AA@
CONST	SEGMENT
??_C@_05DJDIECHG@?$DM?$DPxml?$AA@ DB '<?xml', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$6
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
tv235 = -484						; size = 4
tv224 = -484						; size = 4
tv204 = -484						; size = 4
tv181 = -484						; size = 4
tv165 = -484						; size = 4
tv147 = -484						; size = 4
tv129 = -484						; size = 4
$T210181 = -476						; size = 4
$T210182 = -464						; size = 4
$T210185 = -452						; size = 4
$T210186 = -440						; size = 4
$T210189 = -428						; size = 4
$T210190 = -416						; size = 4
$T210193 = -404						; size = 4
$T210194 = -392						; size = 4
$T210197 = -380						; size = 4
$T210198 = -368						; size = 4
$T210201 = -356						; size = 4
$T210202 = -344						; size = 4
$T210205 = -332						; size = 4
$T210206 = -320						; size = 4
_text$209609 = -116					; size = 4
_cdataHeader$ = -104					; size = 4
_dtdHeader$ = -92					; size = 4
_commentHeader$ = -80					; size = 4
_xmlSSHeader$ = -68					; size = 4
_xmlHeader$ = -56					; size = 4
_doc$ = -44						; size = 4
_returnNode$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_encoding$ = 12						; size = 4
?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z PROC ; TiXmlNode::Identify, COMDAT
; _this$ = ecx

; 820  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 472				; 000001d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-484]
	mov	ecx, 118				; 00000076H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 821  : 	TiXmlNode* returnNode = 0;

	mov	DWORD PTR _returnNode$[ebp], 0

; 822  : 
; 823  : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 824  : 	if( !p || !*p || *p != '<' )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN19@Identify
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@Identify
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN20@Identify
$LN19@Identify:

; 825  : 	{
; 826  : 		return 0;

	xor	eax, eax
	jmp	$LN21@Identify
$LN20@Identify:

; 827  : 	}
; 828  : 
; 829  : 	TiXmlDocument* doc = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _doc$[ebp], eax

; 830  : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 831  : 
; 832  : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN17@Identify
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@Identify
$LN17@Identify:

; 833  : 	{
; 834  : 		return 0;

	xor	eax, eax
	jmp	$LN21@Identify
$LN18@Identify:

; 835  : 	}
; 836  : 
; 837  : 	// What is this thing?
; 838  : 	// - Elements start with a letter or underscore, but xml is reserved.
; 839  : 	// - Comments: <!--
; 840  : 	// - Decleration: <?xml
; 841  : 	// - StylesheetReference <?xml-stylesheet
; 842  : 	// - Everthing else is unknown to tinyxml.
; 843  : 	//
; 844  : 
; 845  : 	const char* xmlHeader = { "<?xml" };

	mov	DWORD PTR _xmlHeader$[ebp], OFFSET ??_C@_05DJDIECHG@?$DM?$DPxml?$AA@

; 846  : 	const char* xmlSSHeader = { "<?xml-stylesheet" };

	mov	DWORD PTR _xmlSSHeader$[ebp], OFFSET ??_C@_0BB@LCMGPMGE@?$DM?$DPxml?9stylesheet?$AA@

; 847  : 	const char* commentHeader = { "<!--" };

	mov	DWORD PTR _commentHeader$[ebp], OFFSET ??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@

; 848  : 	const char* dtdHeader = { "<!" };

	mov	DWORD PTR _dtdHeader$[ebp], OFFSET ??_C@_02KBFACPPK@?$DM?$CB?$AA@

; 849  : 	const char* cdataHeader = { "<![CDATA[" };

	mov	DWORD PTR _cdataHeader$[ebp], OFFSET ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@

; 850  : 
; 851  : 	if ( StringEqual( p, xmlSSHeader, true, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _xmlSSHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@Identify

; 852  : 	{
; 853  : 		#ifdef DEBUG_PARSER
; 854  : 			TIXML_LOG( "XML parsing Stylesheet Reference\n" );
; 855  : 		#endif
; 856  : 		returnNode = new TiXmlStylesheetReference();

	push	52					; 00000034H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210182[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T210182[ebp], 0
	je	SHORT $LN23@Identify
	mov	ecx, DWORD PTR $T210182[ebp]
	call	??0TiXmlStylesheetReference@@QAE@XZ	; TiXmlStylesheetReference::TiXmlStylesheetReference
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN24@Identify
$LN23@Identify:
	mov	DWORD PTR tv129[ebp], 0
$LN24@Identify:
	mov	eax, DWORD PTR tv129[ebp]
	mov	DWORD PTR $T210181[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210181[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx
	jmp	$LN15@Identify
$LN16@Identify:

; 857  : 	}
; 858  : 	else if ( StringEqual( p, xmlHeader, true, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _xmlHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@Identify

; 859  : 	{
; 860  : 		#ifdef DEBUG_PARSER
; 861  : 			TIXML_LOG( "XML parsing Declaration\n" );
; 862  : 		#endif
; 863  : 		returnNode = new TiXmlDeclaration();

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210186[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T210186[ebp], 0
	je	SHORT $LN25@Identify
	mov	ecx, DWORD PTR $T210186[ebp]
	call	??0TiXmlDeclaration@@QAE@XZ		; TiXmlDeclaration::TiXmlDeclaration
	mov	DWORD PTR tv147[ebp], eax
	jmp	SHORT $LN26@Identify
$LN25@Identify:
	mov	DWORD PTR tv147[ebp], 0
$LN26@Identify:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T210185[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210185[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx
	jmp	$LN15@Identify
$LN14@Identify:

; 864  : 	}
; 865  : 	else if ( StringEqual( p, commentHeader, false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _commentHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@Identify

; 866  : 	{
; 867  : 		#ifdef DEBUG_PARSER
; 868  : 			TIXML_LOG( "XML parsing Comment\n" );
; 869  : 		#endif
; 870  : 		returnNode = new TiXmlComment();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210190[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T210190[ebp], 0
	je	SHORT $LN27@Identify
	mov	ecx, DWORD PTR $T210190[ebp]
	call	??0TiXmlComment@@QAE@XZ			; TiXmlComment::TiXmlComment
	mov	DWORD PTR tv165[ebp], eax
	jmp	SHORT $LN28@Identify
$LN27@Identify:
	mov	DWORD PTR tv165[ebp], 0
$LN28@Identify:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR $T210189[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210189[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx
	jmp	$LN15@Identify
$LN12@Identify:

; 871  : 	}
; 872  : 	else if ( StringEqual( p, cdataHeader, false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _cdataHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@Identify

; 873  : 	{
; 874  : 		#ifdef DEBUG_PARSER
; 875  : 			TIXML_LOG( "XML parsing CDATA\n" );
; 876  : 		#endif
; 877  : 		TiXmlText* text = new TiXmlText( "" );

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210194[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T210194[ebp], 0
	je	SHORT $LN29@Identify
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T210194[ebp]
	call	??0TiXmlText@@QAE@PBD@Z			; TiXmlText::TiXmlText
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN30@Identify
$LN29@Identify:
	mov	DWORD PTR tv181[ebp], 0
$LN30@Identify:
	mov	eax, DWORD PTR tv181[ebp]
	mov	DWORD PTR $T210193[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210193[ebp]
	mov	DWORD PTR _text$209609[ebp], ecx

; 878  : 		text->SetCDATA( true );

	push	1
	mov	ecx, DWORD PTR _text$209609[ebp]
	call	?SetCDATA@TiXmlText@@QAEX_N@Z		; TiXmlText::SetCDATA

; 879  : 		returnNode = text;

	mov	eax, DWORD PTR _text$209609[ebp]
	mov	DWORD PTR _returnNode$[ebp], eax
	jmp	$LN15@Identify
$LN10@Identify:

; 880  : 	}
; 881  : 	else if ( StringEqual( p, dtdHeader, false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _dtdHeader$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@Identify

; 882  : 	{
; 883  : 		#ifdef DEBUG_PARSER
; 884  : 			TIXML_LOG( "XML parsing Unknown(1)\n" );
; 885  : 		#endif
; 886  : 		returnNode = new TiXmlUnknown();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210198[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T210198[ebp], 0
	je	SHORT $LN31@Identify
	mov	ecx, DWORD PTR $T210198[ebp]
	call	??0TiXmlUnknown@@QAE@XZ			; TiXmlUnknown::TiXmlUnknown
	mov	DWORD PTR tv204[ebp], eax
	jmp	SHORT $LN32@Identify
$LN31@Identify:
	mov	DWORD PTR tv204[ebp], 0
$LN32@Identify:
	mov	eax, DWORD PTR tv204[ebp]
	mov	DWORD PTR $T210197[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210197[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 887  : 	}
; 888  : 	else if (    IsAlpha( *(p+1), encoding )

	jmp	$LN15@Identify
$LN8@Identify:

; 889  : 			  || *(p+1) == '_' )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	push	edx
	call	?IsAlpha@TiXmlBase@@KAHEW4TiXmlEncoding@@@Z ; TiXmlBase::IsAlpha
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@Identify
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 95					; 0000005fH
	jne	SHORT $LN6@Identify
$LN5@Identify:

; 890  : 	{
; 891  : 		#ifdef DEBUG_PARSER
; 892  : 			TIXML_LOG( "XML parsing Element\n" );
; 893  : 		#endif
; 894  : 		returnNode = new TiXmlElement( "" );

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210202[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T210202[ebp], 0
	je	SHORT $LN33@Identify
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T210202[ebp]
	call	??0TiXmlElement@@QAE@PBD@Z		; TiXmlElement::TiXmlElement
	mov	DWORD PTR tv224[ebp], eax
	jmp	SHORT $LN34@Identify
$LN33@Identify:
	mov	DWORD PTR tv224[ebp], 0
$LN34@Identify:
	mov	eax, DWORD PTR tv224[ebp]
	mov	DWORD PTR $T210201[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210201[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx

; 895  : 	}
; 896  : 	else

	jmp	SHORT $LN15@Identify
$LN6@Identify:

; 897  : 	{
; 898  : 		#ifdef DEBUG_PARSER
; 899  : 			TIXML_LOG( "XML parsing Unknown(2)\n" );
; 900  : 		#endif
; 901  : 		returnNode = new TiXmlUnknown();

	push	44					; 0000002cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210206[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	cmp	DWORD PTR $T210206[ebp], 0
	je	SHORT $LN35@Identify
	mov	ecx, DWORD PTR $T210206[ebp]
	call	??0TiXmlUnknown@@QAE@XZ			; TiXmlUnknown::TiXmlUnknown
	mov	DWORD PTR tv235[ebp], eax
	jmp	SHORT $LN36@Identify
$LN35@Identify:
	mov	DWORD PTR tv235[ebp], 0
$LN36@Identify:
	mov	eax, DWORD PTR tv235[ebp]
	mov	DWORD PTR $T210205[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210205[ebp]
	mov	DWORD PTR _returnNode$[ebp], ecx
$LN15@Identify:

; 902  : 	}
; 903  : 
; 904  : 	if ( returnNode )

	cmp	DWORD PTR _returnNode$[ebp], 0
	je	SHORT $LN3@Identify

; 905  : 	{
; 906  : 		// Set the parent, so it can report errors
; 907  : 		returnNode->parent = this;

	mov	eax, DWORD PTR _returnNode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 908  : 	}
; 909  : 	else

	jmp	SHORT $LN2@Identify
$LN3@Identify:

; 910  : 	{
; 911  : 		if ( doc )

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN2@Identify

; 912  : 			doc->SetError( TIXML_ERROR_OUT_OF_MEMORY, 0, 0, TIXML_ENCODING_UNKNOWN );

	push	0
	push	0
	push	0
	push	3
	mov	ecx, DWORD PTR _doc$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN2@Identify:

; 913  : 	}
; 914  : 	return returnNode;

	mov	eax, DWORD PTR _returnNode$[ebp]
$LN21@Identify:

; 915  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 484				; 000001e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$0:
	mov	eax, DWORD PTR $T210182[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$1:
	mov	eax, DWORD PTR $T210186[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$2:
	mov	eax, DWORD PTR $T210190[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$3:
	mov	eax, DWORD PTR $T210194[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$4:
	mov	eax, DWORD PTR $T210198[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$5:
	mov	eax, DWORD PTR $T210202[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z$6:
	mov	eax, DWORD PTR $T210206[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-488]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z ENDP ; TiXmlNode::Identify
PUBLIC	?SetValue@TiXmlAttribute@@QAEXPBD@Z		; TiXmlAttribute::SetValue
PUBLIC	?Value@TiXmlAttribute@@QBEPBDXZ			; TiXmlAttribute::Value
PUBLIC	?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
PUBLIC	?Name@TiXmlAttribute@@QBEPBDXZ			; TiXmlAttribute::Name
PUBLIC	?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z ; TiXmlAttribute::SetDocument
PUBLIC	??0TiXmlAttribute@@QAE@XZ			; TiXmlAttribute::TiXmlAttribute
PUBLIC	?length@TiXmlString@@QBEIXZ			; TiXmlString::length
PUBLIC	?c_str@TiXmlString@@QBEPBDXZ			; TiXmlString::c_str
PUBLIC	?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlElement::ReadValue
PUBLIC	??YTiXmlString@@QAEAAV0@PBD@Z			; TiXmlString::operator+=
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??YTiXmlString@@QAEAAV0@ABV0@@Z			; TiXmlString::operator+=
PUBLIC	??0TiXmlString@@QAE@PBD@Z			; TiXmlString::TiXmlString
PUBLIC	??_C@_02DPNDACHE@?$DM?1?$AA@			; `string'
PUBLIC	?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlElement::Parse
EXTRN	?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z:PROC ; TiXmlAttributeSet::Add
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNDACHE@?$DM?1?$AA@
CONST	SEGMENT
??_C@_02DPNDACHE@?$DM?1?$AA@ DB '</', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$1
__ehfuncinfo$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
tv299 = -472						; size = 4
tv277 = -472						; size = 4
tv238 = -472						; size = 4
$T210224 = -464						; size = 4
$T210225 = -452						; size = 4
$T210226 = -440						; size = 4
$T210227 = -428						; size = 4
$T210228 = -416						; size = 4
$T210229 = -404						; size = 4
$T210230 = -392						; size = 4
$T210231 = -380						; size = 4
$T210234 = -368						; size = 4
$T210235 = -356						; size = 4
$T210236 = -344						; size = 4
$T210239 = -332						; size = 4
$T210240 = -320						; size = 4
$T210241 = -308						; size = 4
$T210244 = -296						; size = 4
$T210245 = -284						; size = 4
_node$209693 = -80					; size = 4
_attrib$209679 = -68					; size = 4
_endTag$ = -56						; size = 4
_pErr$ = -44						; size = 4
_document$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_encoding$ = 16						; size = 4
?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlElement::Parse, COMDAT
; _this$ = ecx

; 1060 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 460				; 000001ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-472]
	mov	ecx, 115				; 00000073H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1061 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1062 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1063 : 
; 1064 : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN31@Parse@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN32@Parse@2
$LN31@Parse@2:

; 1065 : 	{
; 1066 : 		if ( document ) document->SetError( TIXML_ERROR_PARSING_ELEMENT, 0, 0, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN30@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	push	0
	push	4
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN30@Parse@2:

; 1067 : 		return 0;

	xor	eax, eax
	jmp	$LN33@Parse@2
$LN32@Parse@2:

; 1068 : 	}
; 1069 : 
; 1070 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN29@Parse@2

; 1071 : 	{
; 1072 : 		data->Stamp( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1073 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN29@Parse@2:

; 1074 : 	}
; 1075 : 
; 1076 : 	if ( *p != '<' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN28@Parse@2

; 1077 : 	{
; 1078 : 		if ( document ) document->SetError( TIXML_ERROR_PARSING_ELEMENT, p, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN27@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	4
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN27@Parse@2:

; 1079 : 		return 0;

	xor	eax, eax
	jmp	$LN33@Parse@2
$LN28@Parse@2:

; 1080 : 	}
; 1081 : 
; 1082 : 	p = SkipWhiteSpace( p+1, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1083 : 
; 1084 : 	// Read the name.
; 1085 : 	const char* pErr = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pErr$[ebp], eax

; 1086 : 
; 1087 :     p = ReadName( p, &value, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z ; TiXmlBase::ReadName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax

; 1088 : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN25@Parse@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN26@Parse@2
$LN25@Parse@2:

; 1089 : 	{
; 1090 : 		if ( document )	document->SetError( TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME, pErr, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN24@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pErr$[ebp]
	push	edx
	push	5
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN24@Parse@2:

; 1091 : 		return 0;

	xor	eax, eax
	jmp	$LN33@Parse@2
$LN26@Parse@2:

; 1092 : 	}
; 1093 : 
; 1094 :     TIXML_STRING endTag ("</");

	push	OFFSET ??_C@_02DPNDACHE@?$DM?1?$AA@
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??0TiXmlString@@QAE@PBD@Z		; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1095 : 	endTag += value;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??YTiXmlString@@QAEAAV0@ABV0@@Z		; TiXmlString::operator+=

; 1096 : 	endTag += ">";

	push	OFFSET ??_C@_01PPODPGHN@?$DO?$AA@
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??YTiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator+=
$LN23@Parse@2:

; 1097 : 
; 1098 : 	// Check for and read attributes. Also look for an empty
; 1099 : 	// tag or an end tag.
; 1100 : 	while ( p && *p )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN22@Parse@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN22@Parse@2

; 1101 : 	{
; 1102 : 		pErr = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pErr$[ebp], eax

; 1103 : 		p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1104 : 		if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN20@Parse@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN21@Parse@2
$LN20@Parse@2:

; 1105 : 		{
; 1106 : 			if ( document ) document->SetError( TIXML_ERROR_READING_ATTRIBUTES, pErr, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN19@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pErr$[ebp]
	push	edx
	push	7
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN19@Parse@2:

; 1107 : 			return 0;

	mov	DWORD PTR $T210224[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210224[ebp]
	jmp	$LN33@Parse@2
$LN21@Parse@2:

; 1108 : 		}
; 1109 : 		if ( *p == '/' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	SHORT $LN18@Parse@2

; 1110 : 		{
; 1111 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1112 : 			// Empty tag.
; 1113 : 			if ( *p  != '>' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN17@Parse@2

; 1114 : 			{
; 1115 : 				if ( document ) document->SetError( TIXML_ERROR_PARSING_EMPTY, p, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN16@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	8
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN16@Parse@2:

; 1116 : 				return 0;

	mov	DWORD PTR $T210225[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210225[ebp]
	jmp	$LN33@Parse@2
$LN17@Parse@2:

; 1117 : 			}
; 1118 : 			return (p+1);

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR $T210226[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210226[ebp]
	jmp	$LN33@Parse@2
	jmp	$LN15@Parse@2
$LN18@Parse@2:

; 1119 : 		}
; 1120 : 		else if ( *p == '>' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	$LN14@Parse@2

; 1121 : 		{
; 1122 : 			// Done with attributes (if there were any.)
; 1123 : 			// Read the value -- which can include other
; 1124 : 			// elements -- read the end tag, and return.
; 1125 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1126 : 			p = ReadValue( p, data, encoding );		// Note this is an Element method, and will set the error if one happens.

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlElement::ReadValue
	mov	DWORD PTR _p$[ebp], eax

; 1127 : 			if ( !p || !*p ) {

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN12@Parse@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN13@Parse@2
$LN12@Parse@2:

; 1128 : 				// We were looking for the end tag, but found nothing.
; 1129 : 				// Fix for [ 1663758 ] Failure to report error on bad XML
; 1130 : 				if ( document ) document->SetError( TIXML_ERROR_READING_END_TAG, p, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN11@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	9
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN11@Parse@2:

; 1131 : 				return 0;

	mov	DWORD PTR $T210227[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210227[ebp]
	jmp	$LN33@Parse@2
$LN13@Parse@2:

; 1132 : 			}
; 1133 : 
; 1134 : 			// We should find the end tag now
; 1135 : 			if ( StringEqual( p, endTag.c_str(), false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@Parse@2

; 1136 : 			{
; 1137 : 				p += endTag.length();

	lea	ecx, DWORD PTR _endTag$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 1138 : 				return p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T210228[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210228[ebp]
	jmp	$LN33@Parse@2

; 1139 : 			}
; 1140 : 			else

	jmp	SHORT $LN9@Parse@2
$LN10@Parse@2:

; 1141 : 			{
; 1142 : 				if ( document ) document->SetError( TIXML_ERROR_READING_END_TAG, p, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN8@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	9
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN8@Parse@2:

; 1143 : 				return 0;

	mov	DWORD PTR $T210229[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210229[ebp]
	jmp	$LN33@Parse@2
$LN9@Parse@2:

; 1144 : 			}
; 1145 : 		}
; 1146 : 		else

	jmp	$LN15@Parse@2
$LN14@Parse@2:

; 1147 : 		{
; 1148 : 			// Try to read an attribute:
; 1149 : 			TiXmlAttribute* attrib = new TiXmlAttribute();

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210231[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T210231[ebp], 0
	je	SHORT $LN35@Parse@2
	mov	ecx, DWORD PTR $T210231[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR tv238[ebp], eax
	jmp	SHORT $LN36@Parse@2
$LN35@Parse@2:
	mov	DWORD PTR tv238[ebp], 0
$LN36@Parse@2:
	mov	eax, DWORD PTR tv238[ebp]
	mov	DWORD PTR $T210230[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T210230[ebp]
	mov	DWORD PTR _attrib$209679[ebp], ecx

; 1150 : 			if ( !attrib )

	cmp	DWORD PTR _attrib$209679[ebp], 0
	jne	SHORT $LN6@Parse@2

; 1151 : 			{
; 1152 : 				if ( document ) document->SetError( TIXML_ERROR_OUT_OF_MEMORY, pErr, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN5@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pErr$[ebp]
	push	edx
	push	3
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN5@Parse@2:

; 1153 : 				return 0;

	mov	DWORD PTR $T210234[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210234[ebp]
	jmp	$LN33@Parse@2
$LN6@Parse@2:

; 1154 : 			}
; 1155 : 
; 1156 : 			attrib->SetDocument( document );

	mov	eax, DWORD PTR _document$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrib$209679[ebp]
	call	?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z ; TiXmlAttribute::SetDocument

; 1157 : 			pErr = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pErr$[ebp], eax

; 1158 : 			p = attrib->Parse( p, data, encoding );

	mov	esi, esp
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _attrib$209679[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _attrib$209679[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 1159 : 
; 1160 : 			if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Parse@2
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	$LN4@Parse@2
$LN3@Parse@2:

; 1161 : 			{
; 1162 : 				if ( document ) document->SetError( TIXML_ERROR_PARSING_ELEMENT, pErr, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN2@Parse@2
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pErr$[ebp]
	push	edx
	push	4
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN2@Parse@2:

; 1163 : 				delete attrib;

	mov	eax, DWORD PTR _attrib$209679[ebp]
	mov	DWORD PTR $T210236[ebp], eax
	mov	ecx, DWORD PTR $T210236[ebp]
	mov	DWORD PTR $T210235[ebp], ecx
	cmp	DWORD PTR $T210235[ebp], 0
	je	SHORT $LN37@Parse@2
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T210235[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T210235[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv277[ebp], eax
	jmp	SHORT $LN38@Parse@2
$LN37@Parse@2:
	mov	DWORD PTR tv277[ebp], 0
$LN38@Parse@2:

; 1164 : 				return 0;

	mov	DWORD PTR $T210239[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210239[ebp]
	jmp	$LN33@Parse@2
$LN4@Parse@2:

; 1165 : 			}
; 1166 : 
; 1167 : 			// Handle the strange case of double attributes:
; 1168 : 			#ifdef TIXML_USE_STL
; 1169 : 			TiXmlAttribute* node = attributeSet.Find( attrib->NameTStr() );
; 1170 : 			#else
; 1171 : 			TiXmlAttribute* node = attributeSet.Find( attrib->Name() );

	mov	ecx, DWORD PTR _attrib$209679[ebp]
	call	?Name@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Name
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find
	mov	DWORD PTR _node$209693[ebp], eax

; 1172 : 			#endif
; 1173 : 			if ( node )

	cmp	DWORD PTR _node$209693[ebp], 0
	je	SHORT $LN1@Parse@2

; 1174 : 			{
; 1175 : 				node->SetValue( attrib->Value() );

	mov	ecx, DWORD PTR _attrib$209679[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _node$209693[ebp]
	call	?SetValue@TiXmlAttribute@@QAEXPBD@Z	; TiXmlAttribute::SetValue

; 1176 : 				delete attrib;

	mov	eax, DWORD PTR _attrib$209679[ebp]
	mov	DWORD PTR $T210241[ebp], eax
	mov	ecx, DWORD PTR $T210241[ebp]
	mov	DWORD PTR $T210240[ebp], ecx
	cmp	DWORD PTR $T210240[ebp], 0
	je	SHORT $LN39@Parse@2
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T210240[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T210240[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv299[ebp], eax
	jmp	SHORT $LN40@Parse@2
$LN39@Parse@2:
	mov	DWORD PTR tv299[ebp], 0
$LN40@Parse@2:

; 1177 : 				return 0;

	mov	DWORD PTR $T210244[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210244[ebp]
	jmp	SHORT $LN33@Parse@2
$LN1@Parse@2:

; 1178 : 			}
; 1179 : 
; 1180 : 			attributeSet.Add( attrib );

	mov	eax, DWORD PTR _attrib$209679[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Add@TiXmlAttributeSet@@QAEXPAVTiXmlAttribute@@@Z ; TiXmlAttributeSet::Add
$LN15@Parse@2:

; 1181 : 		}
; 1182 : 	}

	jmp	$LN23@Parse@2
$LN22@Parse@2:

; 1183 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T210245[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _endTag$[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210245[ebp]
$LN33@Parse@2:

; 1184 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@Parse@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 472				; 000001d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN46@Parse@2:
	DD	1
	DD	$LN45@Parse@2
$LN45@Parse@2:
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN43@Parse@2
$LN43@Parse@2:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _endTag$[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$1:
	mov	eax, DWORD PTR $T210231[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-476]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Parse@TiXmlElement@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlElement::Parse
PUBLIC	?Blank@TiXmlText@@IBE_NXZ			; TiXmlText::Blank
PUBLIC	?IsWhiteSpaceCondensed@TiXmlBase@@SA_NXZ	; TiXmlBase::IsWhiteSpaceCondensed
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0
__ehfuncinfo$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
tv174 = -316						; size = 4
tv86 = -316						; size = 4
$T210259 = -308						; size = 4
$T210260 = -296						; size = 4
$T210263 = -284						; size = 4
$T210264 = -272						; size = 4
_node$209727 = -68					; size = 4
_textNode$209711 = -56					; size = 4
_pWithWhiteSpace$ = -44					; size = 4
_document$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_encoding$ = 16						; size = 4
?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlElement::ReadValue, COMDAT
; _this$ = ecx

; 1188 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1189 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1190 : 
; 1191 : 	// Read in text and elements in any order.
; 1192 : 	const char* pWithWhiteSpace = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pWithWhiteSpace$[ebp], eax

; 1193 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax
$LN16@ReadValue:

; 1194 : 
; 1195 : 	while ( p && *p )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN15@ReadValue
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN15@ReadValue

; 1196 : 	{
; 1197 : 		if ( *p != '<' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	$LN14@ReadValue

; 1198 : 		{
; 1199 : 			// Take what we have, make a text element.
; 1200 : 			TiXmlText* textNode = new TiXmlText( "" );

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T210260[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T210260[ebp], 0
	je	SHORT $LN19@ReadValue
	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR $T210260[ebp]
	call	??0TiXmlText@@QAE@PBD@Z			; TiXmlText::TiXmlText
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN20@ReadValue
$LN19@ReadValue:
	mov	DWORD PTR tv86[ebp], 0
$LN20@ReadValue:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T210259[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T210259[ebp]
	mov	DWORD PTR _textNode$209711[ebp], ecx

; 1201 : 
; 1202 : 			if ( !textNode )

	cmp	DWORD PTR _textNode$209711[ebp], 0
	jne	SHORT $LN13@ReadValue

; 1203 : 			{
; 1204 : 				if ( document ) document->SetError( TIXML_ERROR_OUT_OF_MEMORY, 0, 0, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN12@ReadValue
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	push	0
	push	3
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN12@ReadValue:

; 1205 : 				    return 0;

	xor	eax, eax
	jmp	$LN17@ReadValue
$LN13@ReadValue:

; 1206 : 			}
; 1207 : 
; 1208 : 			if ( TiXmlBase::IsWhiteSpaceCondensed() )

	call	?IsWhiteSpaceCondensed@TiXmlBase@@SA_NXZ ; TiXmlBase::IsWhiteSpaceCondensed
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@ReadValue

; 1209 : 			{
; 1210 : 				p = textNode->Parse( p, data, encoding );

	mov	esi, esp
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _textNode$209711[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _textNode$209711[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 1211 : 			}
; 1212 : 			else

	jmp	SHORT $LN10@ReadValue
$LN11@ReadValue:

; 1213 : 			{
; 1214 : 				// Special case: we want to keep the white space
; 1215 : 				// so that leading spaces aren't removed.
; 1216 : 				p = textNode->Parse( pWithWhiteSpace, data, encoding );

	mov	esi, esp
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pWithWhiteSpace$[ebp]
	push	edx
	mov	eax, DWORD PTR _textNode$209711[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _textNode$209711[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax
$LN10@ReadValue:

; 1217 : 			}
; 1218 : 
; 1219 : 			if ( !textNode->Blank() )

	mov	ecx, DWORD PTR _textNode$209711[ebp]
	call	?Blank@TiXmlText@@IBE_NXZ		; TiXmlText::Blank
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@ReadValue

; 1220 : 				LinkEndChild( textNode );

	mov	eax, DWORD PTR _textNode$209711[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild

; 1221 : 			else

	jmp	SHORT $LN8@ReadValue
$LN9@ReadValue:

; 1222 : 				delete textNode;

	mov	eax, DWORD PTR _textNode$209711[ebp]
	mov	DWORD PTR $T210264[ebp], eax
	mov	ecx, DWORD PTR $T210264[ebp]
	mov	DWORD PTR $T210263[ebp], ecx
	cmp	DWORD PTR $T210263[ebp], 0
	je	SHORT $LN21@ReadValue
	mov	esi, esp
	push	1
	mov	edx, DWORD PTR $T210263[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T210263[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv174[ebp], eax
	jmp	SHORT $LN8@ReadValue
$LN21@ReadValue:
	mov	DWORD PTR tv174[ebp], 0
$LN8@ReadValue:

; 1223 : 		}
; 1224 : 		else

	jmp	SHORT $LN7@ReadValue
$LN14@ReadValue:

; 1225 : 		{
; 1226 : 			// We hit a '<'
; 1227 : 			// Have we hit a new element or an end tag? This could also be
; 1228 : 			// a TiXmlText in the "CDATA" style.
; 1229 : 			if ( StringEqual( p, "</", false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	push	OFFSET ??_C@_02DPNDACHE@?$DM?1?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@ReadValue

; 1230 : 			{
; 1231 : 				return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	$LN17@ReadValue

; 1232 : 			}
; 1233 : 			else

	jmp	SHORT $LN7@ReadValue
$LN6@ReadValue:

; 1234 : 			{
; 1235 : 				TiXmlNode* node = Identify( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Identify@TiXmlNode@@IAEPAV1@PBDW4TiXmlEncoding@@@Z ; TiXmlNode::Identify
	mov	DWORD PTR _node$209727[ebp], eax

; 1236 : 				if ( node )

	cmp	DWORD PTR _node$209727[ebp], 0
	je	SHORT $LN4@ReadValue

; 1237 : 				{
; 1238 : 					p = node->Parse( p, data, encoding );

	mov	esi, esp
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$209727[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _node$209727[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _p$[ebp], eax

; 1239 : 					LinkEndChild( node );

	mov	eax, DWORD PTR _node$209727[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?LinkEndChild@TiXmlNode@@QAEPAV1@PAV1@@Z ; TiXmlNode::LinkEndChild

; 1240 : 				}
; 1241 : 				else

	jmp	SHORT $LN7@ReadValue
$LN4@ReadValue:

; 1242 : 				{
; 1243 : 					return 0;

	xor	eax, eax
	jmp	SHORT $LN17@ReadValue
$LN7@ReadValue:

; 1244 : 				}
; 1245 : 			}
; 1246 : 		}
; 1247 : 		pWithWhiteSpace = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pWithWhiteSpace$[ebp], eax

; 1248 : 		p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1249 : 	}

	jmp	$LN16@ReadValue
$LN15@ReadValue:

; 1250 : 
; 1251 : 	if ( !p )

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN2@ReadValue

; 1252 : 	{
; 1253 : 		if ( document ) document->SetError( TIXML_ERROR_READING_ELEMENT_VALUE, 0, 0, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN2@ReadValue
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	push	0
	push	6
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN2@ReadValue:

; 1254 : 	}
; 1255 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN17@ReadValue:

; 1256 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0:
	mov	eax, DWORD PTR $T210260[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadValue@TiXmlElement@@IAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlElement::ReadValue
PUBLIC	?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlUnknown::Parse
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_document$ = -20					; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_encoding$ = 16						; size = 4
?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlUnknown::Parse, COMDAT
; _this$ = ecx

; 1285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1286 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1287 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1288 : 
; 1289 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN9@Parse@3

; 1290 : 	{
; 1291 : 		data->Stamp( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1292 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN9@Parse@3:

; 1293 : 	}
; 1294 : 	if ( !p || !*p || *p != '<' )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN7@Parse@3
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@Parse@3
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN8@Parse@3
$LN7@Parse@3:

; 1295 : 	{
; 1296 : 		if ( document ) document->SetError( TIXML_ERROR_PARSING_UNKNOWN, p, data, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN6@Parse@3
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN6@Parse@3:

; 1297 : 		return 0;

	xor	eax, eax
	jmp	$LN10@Parse@3
$LN8@Parse@3:

; 1298 : 	}
; 1299 : 	++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1300 :     value = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
$LN5@Parse@3:

; 1301 : 
; 1302 : 	while ( p && *p && *p != '>' )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN4@Parse@3
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@Parse@3
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN4@Parse@3

; 1303 : 	{
; 1304 : 		value += *p;

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 1305 : 		++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1306 : 	}

	jmp	SHORT $LN5@Parse@3
$LN4@Parse@3:

; 1307 : 
; 1308 : 	if ( !p )

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN3@Parse@3

; 1309 : 	{
; 1310 : 		if ( document )	document->SetError( TIXML_ERROR_PARSING_UNKNOWN, 0, 0, encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN3@Parse@3
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN3@Parse@3:

; 1311 : 	}
; 1312 : 	if ( *p == '>' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN1@Parse@3

; 1313 : 		return p+1;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	jmp	SHORT $LN10@Parse@3
$LN1@Parse@3:

; 1314 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN10@Parse@3:

; 1315 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlUnknown::Parse
_TEXT	ENDS
PUBLIC	??_C@_03PNLDJJMO@?9?9?$DO?$AA@			; `string'
PUBLIC	?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlComment::Parse
;	COMDAT ??_C@_03PNLDJJMO@?9?9?$DO?$AA@
CONST	SEGMENT
??_C@_03PNLDJJMO@?9?9?$DO?$AA@ DB '-->', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_endTag$ = -44						; size = 4
_startTag$ = -32					; size = 4
_document$ = -20					; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_encoding$ = 16						; size = 4
?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlComment::Parse, COMDAT
; _this$ = ecx

; 1346 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1347 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1348 : 	value = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1349 : 
; 1350 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1351 : 
; 1352 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN5@Parse@4

; 1353 : 	{
; 1354 : 		data->Stamp( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1355 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN5@Parse@4:

; 1356 : 	}
; 1357 : 	const char* startTag = "<!--";

	mov	DWORD PTR _startTag$[ebp], OFFSET ??_C@_04FFDNBKGC@?$DM?$CB?9?9?$AA@

; 1358 : 	const char* endTag   = "-->";

	mov	DWORD PTR _endTag$[ebp], OFFSET ??_C@_03PNLDJJMO@?9?9?$DO?$AA@

; 1359 : 
; 1360 : 	if ( !StringEqual( p, startTag, false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startTag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Parse@4

; 1361 : 	{
; 1362 : 		document->SetError( TIXML_ERROR_PARSING_COMMENT, p, data, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 1363 : 		return 0;

	xor	eax, eax
	jmp	$LN6@Parse@4
$LN4@Parse@4:

; 1364 : 	}
; 1365 : 	p += strlen( startTag );

	mov	eax, DWORD PTR _startTag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 1366 : 
; 1367 : 	// [ 1475201 ] TinyXML parses entities in comments
; 1368 : 	// Oops - ReadText doesn't work, because we don't want to parse the entities.
; 1369 : 	// p = ReadText( p, &value, false, endTag, false, encoding );
; 1370 : 	//
; 1371 : 	// from the XML spec:
; 1372 : 	/*
; 1373 : 	 [Definition: Comments may appear anywhere in a document outside other markup; in addition,
; 1374 : 	              they may appear within the document type declaration at places allowed by the grammar.
; 1375 : 				  They are not part of the document's character data; an XML processor MAY, but need not,
; 1376 : 				  make it possible for an application to retrieve the text of comments. For compatibility,
; 1377 : 				  the string "--" (double-hyphen) MUST NOT occur within comments.] Parameter entity
; 1378 : 				  references MUST NOT be recognized within comments.
; 1379 : 
; 1380 : 				  An example of a comment:
; 1381 : 
; 1382 : 				  <!-- declarations for <head> & <body> -->
; 1383 : 	*/
; 1384 : 
; 1385 :     value = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
$LN3@Parse@4:

; 1386 : 	// Keep all the white space.
; 1387 : 	while (	p && *p && !StringEqual( p, endTag, false, encoding ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@Parse@4
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@Parse@4
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _endTag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Parse@4

; 1388 : 	{
; 1389 : 		value.append( p, 1 );

	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 1390 : 		++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1391 : 	}

	jmp	SHORT $LN3@Parse@4
$LN2@Parse@4:

; 1392 : 	if ( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@Parse@4

; 1393 : 		p += strlen( endTag );

	mov	eax, DWORD PTR _endTag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN1@Parse@4:

; 1394 : 
; 1395 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN6@Parse@4:

; 1396 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlComment::Parse
_TEXT	ENDS
PUBLIC	??_C@_01BJJEKLCA@?$CC?$AA@			; `string'
PUBLIC	??_C@_01GEODFPGF@?8?$AA@			; `string'
PUBLIC	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlAttribute::Parse
;	COMDAT ??_C@_01BJJEKLCA@?$CC?$AA@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC?$AA@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GEODFPGF@?8?$AA@
CONST	SEGMENT
??_C@_01GEODFPGF@?8?$AA@ DB '''', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_DOUBLE_QUOTE$ = -53					; size = 1
_SINGLE_QUOTE$ = -41					; size = 1
_end$ = -32						; size = 4
_pErr$ = -20						; size = 4
_this$ = -8						; size = 4
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_encoding$ = 16						; size = 4
?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlAttribute::Parse, COMDAT
; _this$ = ecx

; 1400 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1401 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1402 : 	if ( !p || !*p ) return 0;

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN20@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN21@Parse@5
$LN20@Parse@5:
	xor	eax, eax
	jmp	$LN22@Parse@5
$LN21@Parse@5:

; 1403 : 
; 1404 : //	int tabsize = 4;
; 1405 : //	if ( document )
; 1406 : //		tabsize = document->TabSize();
; 1407 : 
; 1408 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN19@Parse@5

; 1409 : 	{
; 1410 : 		data->Stamp( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1411 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN19@Parse@5:

; 1412 : 	}
; 1413 : 	// Read the name, the '=' and the value.
; 1414 : 	const char* pErr = p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _pErr$[ebp], eax

; 1415 : 	p = ReadName( p, &name, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?ReadName@TiXmlBase@@KAPBDPBDPAVTiXmlString@@W4TiXmlEncoding@@@Z ; TiXmlBase::ReadName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _p$[ebp], eax

; 1416 : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN17@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN18@Parse@5
$LN17@Parse@5:

; 1417 : 	{
; 1418 : 		if ( document ) document->SetError( TIXML_ERROR_READING_ATTRIBUTES, pErr, data, encoding );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN16@Parse@5
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pErr$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN16@Parse@5:

; 1419 : 		return 0;

	xor	eax, eax
	jmp	$LN22@Parse@5
$LN18@Parse@5:

; 1420 : 	}
; 1421 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1422 : 	if ( !p || !*p || *p != '=' )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN14@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 61					; 0000003dH
	je	SHORT $LN15@Parse@5
$LN14@Parse@5:

; 1423 : 	{
; 1424 : 		if ( document ) document->SetError( TIXML_ERROR_READING_ATTRIBUTES, p, data, encoding );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN13@Parse@5
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN13@Parse@5:

; 1425 : 		return 0;

	xor	eax, eax
	jmp	$LN22@Parse@5
$LN15@Parse@5:

; 1426 : 	}
; 1427 : 
; 1428 : 	++p;	// skip '='

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1429 : 	p = SkipWhiteSpace( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1430 : 	if ( !p || !*p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN11@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN12@Parse@5
$LN11@Parse@5:

; 1431 : 	{
; 1432 : 		if ( document ) document->SetError( TIXML_ERROR_READING_ATTRIBUTES, p, data, encoding );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN10@Parse@5
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN10@Parse@5:

; 1433 : 		return 0;

	xor	eax, eax
	jmp	$LN22@Parse@5
$LN12@Parse@5:

; 1434 : 	}
; 1435 : 
; 1436 : 	const char* end;
; 1437 : 	const char SINGLE_QUOTE = '\'';

	mov	BYTE PTR _SINGLE_QUOTE$[ebp], 39	; 00000027H

; 1438 : 	const char DOUBLE_QUOTE = '\"';

	mov	BYTE PTR _DOUBLE_QUOTE$[ebp], 34	; 00000022H

; 1439 : 
; 1440 : 	if ( *p == SINGLE_QUOTE )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 39					; 00000027H
	jne	SHORT $LN9@Parse@5

; 1441 : 	{
; 1442 : 		++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1443 : 		end = "\'";		// single quote in string

	mov	DWORD PTR _end$[ebp], OFFSET ??_C@_01GEODFPGF@?8?$AA@

; 1444 : 		p = ReadText( p, &value, false, end, false, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z ; TiXmlBase::ReadText
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$[ebp], eax
	jmp	$LN8@Parse@5
$LN9@Parse@5:

; 1445 : 	}
; 1446 : 	else if ( *p == DOUBLE_QUOTE )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN7@Parse@5

; 1447 : 	{
; 1448 : 		++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1449 : 		end = "\"";		// double quote in string

	mov	DWORD PTR _end$[ebp], OFFSET ??_C@_01BJJEKLCA@?$CC?$AA@

; 1450 : 		p = ReadText( p, &value, false, end, false, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _end$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z ; TiXmlBase::ReadText
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$[ebp], eax

; 1451 : 	}
; 1452 : 	else

	jmp	$LN8@Parse@5
$LN7@Parse@5:

; 1453 : 	{
; 1454 : 		// All attribute values should be in single or double quotes.
; 1455 : 		// But this is such a common error that the parser will try
; 1456 : 		// its best, even without them.
; 1457 : 		value = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
$LN5@Parse@5:

; 1458 : 		while (    p && *p											// existence
; 1459 : 				&& !IsWhiteSpace( *p ) && *p != '\n' && *p != '\r'	// whitespace
; 1460 : 				&& *p != '/' && *p != '>' )							// tag end

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN8@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN8@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	$LN8@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN8@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN8@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN8@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN8@Parse@5

; 1461 : 		{
; 1462 : 			if ( *p == SINGLE_QUOTE || *p == DOUBLE_QUOTE ) {

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 39					; 00000027H
	je	SHORT $LN2@Parse@5
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 34					; 00000022H
	jne	SHORT $LN3@Parse@5
$LN2@Parse@5:

; 1463 : 				// [ 1451649 ] Attribute values with trailing quotes not handled correctly
; 1464 : 				// We did not have an opening quote but seem to have a
; 1465 : 				// closing one. Give up and throw an error.
; 1466 : 				if ( document ) document->SetError( TIXML_ERROR_READING_ATTRIBUTES, p, data, encoding );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN1@Parse@5
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN1@Parse@5:

; 1467 : 				return 0;

	xor	eax, eax
	jmp	SHORT $LN22@Parse@5
$LN3@Parse@5:

; 1468 : 			}
; 1469 : 			value += *p;

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 1470 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1471 : 		}

	jmp	$LN5@Parse@5
$LN8@Parse@5:

; 1472 : 	}
; 1473 : 	return p;

	mov	eax, DWORD PTR _p$[ebp]
$LN22@Parse@5:

; 1474 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlAttribute::Parse
_TEXT	ENDS
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
PUBLIC	??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@		; `string'
PUBLIC	?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlText::Parse
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@
CONST	SEGMENT
??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@ DB ']]>', 00H	; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0
__ehfuncinfo$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
$T210282 = -296						; size = 4
_end$209820 = -92					; size = 4
_ignoreWhite$209819 = -77				; size = 1
_dummy$209816 = -68					; size = 4
_endTag$ = -56						; size = 4
_startTag$ = -44					; size = 4
_document$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_data$ = 12						; size = 4
_encoding$ = 16						; size = 4
?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlText::Parse, COMDAT
; _this$ = ecx

; 1509 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1510 : 	value = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1511 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1512 : 
; 1513 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN8@Parse@6

; 1514 : 	{
; 1515 : 		data->Stamp( p, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1516 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN8@Parse@6:

; 1517 : 	}
; 1518 : 
; 1519 : 	const char* const startTag = "<![CDATA[";

	mov	DWORD PTR _startTag$[ebp], OFFSET ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL?$AA@

; 1520 : 	const char* const endTag   = "]]>";

	mov	DWORD PTR _endTag$[ebp], OFFSET ??_C@_03MCHNFBAC@?$FN?$FN?$DO?$AA@

; 1521 : 
; 1522 : 	if ( cdata || StringEqual( p, startTag, false, encoding ) )

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	jne	SHORT $LN6@Parse@6
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startTag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	je	$LN7@Parse@6
$LN6@Parse@6:

; 1523 : 	{
; 1524 : 		cdata = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 1

; 1525 : 
; 1526 : 		if ( !StringEqual( p, startTag, false, encoding ) )

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _startTag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@Parse@6

; 1527 : 		{
; 1528 : 			document->SetError( TIXML_ERROR_PARSING_CDATA, p, data, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError

; 1529 : 			return 0;

	xor	eax, eax
	jmp	$LN9@Parse@6
$LN5@Parse@6:

; 1530 : 		}
; 1531 : 		p += strlen( startTag );

	mov	eax, DWORD PTR _startTag$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR _p$[ebp], eax
$LN4@Parse@6:

; 1532 : 
; 1533 : 		// Keep all the white space, ignore the encoding, etc.
; 1534 : 		while (	   p && *p
; 1535 : 				&& !StringEqual( p, endTag, false, encoding )
; 1536 : 			  )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN3@Parse@6
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@Parse@6
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _endTag$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Parse@6

; 1537 : 		{
; 1538 : 			value += *p;

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??YTiXmlString@@QAEAAV0@D@Z		; TiXmlString::operator+=

; 1539 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1540 : 		}

	jmp	SHORT $LN4@Parse@6
$LN3@Parse@6:

; 1541 : 
; 1542 : 		TIXML_STRING dummy;

	lea	ecx, DWORD PTR _dummy$209816[ebp]
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1543 : 		p = ReadText( p, &dummy, false, endTag, false, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _endTag$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _dummy$209816[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z ; TiXmlBase::ReadText
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$[ebp], eax

; 1544 : 		return p;

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR $T210282[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dummy$209816[ebp]
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	eax, DWORD PTR $T210282[ebp]
	jmp	SHORT $LN9@Parse@6

; 1545 : 	}
; 1546 : 	else

	jmp	SHORT $LN9@Parse@6
$LN7@Parse@6:

; 1547 : 	{
; 1548 : 		bool ignoreWhite = true;

	mov	BYTE PTR _ignoreWhite$209819[ebp], 1

; 1549 : 
; 1550 : 		const char* end = "<";

	mov	DWORD PTR _end$209820[ebp], OFFSET ??_C@_01MNNFJEPP@?$DM?$AA@

; 1551 : 		p = ReadText( p, &value, ignoreWhite, end, false, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _end$209820[ebp]
	push	ecx
	movzx	edx, BYTE PTR _ignoreWhite$209819[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?ReadText@TiXmlBase@@KAPBDPBDPAVTiXmlString@@_N02W4TiXmlEncoding@@@Z ; TiXmlBase::ReadText
	add	esp, 24					; 00000018H
	mov	DWORD PTR _p$[ebp], eax

; 1552 : 		if ( p )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN1@Parse@6

; 1553 : 			return p-1;	// don't truncate the '<'

	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, 1
	jmp	SHORT $LN9@Parse@6
$LN1@Parse@6:

; 1554 : 		return 0;

	xor	eax, eax
$LN9@Parse@6:

; 1555 : 	}
; 1556 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Parse@6
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN15@Parse@6:
	DD	1
	DD	$LN14@Parse@6
$LN14@Parse@6:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN12@Parse@6
$LN12@Parse@6:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	109					; 0000006dH
	DB	121					; 00000079H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _dummy$209816[ebp]
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlText::Parse
PUBLIC	??_C@_0L@FLHGMILF@standalone?$AA@		; `string'
PUBLIC	??_C@_08MLPGAEIK@encoding?$AA@			; `string'
PUBLIC	??1TiXmlAttribute@@UAE@XZ			; TiXmlAttribute::~TiXmlAttribute
PUBLIC	??_C@_07CPCPJPKL@version?$AA@			; `string'
PUBLIC	?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDeclaration::Parse
;	COMDAT ??_C@_0L@FLHGMILF@standalone?$AA@
CONST	SEGMENT
??_C@_0L@FLHGMILF@standalone?$AA@ DB 'standalone', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MLPGAEIK@encoding?$AA@
CONST	SEGMENT
??_C@_08MLPGAEIK@encoding?$AA@ DB 'encoding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version?$AA@
CONST	SEGMENT
??_C@_07CPCPJPKL@version?$AA@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$2
__ehfuncinfo$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_attrib$209848 = -164					; size = 36
_attrib$209844 = -120					; size = 36
_attrib$209840 = -76					; size = 36
_document$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_data$ = 12						; size = 4
__encoding$ = 16					; size = 4
?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlDeclaration::Parse, COMDAT
; _this$ = ecx

; 1583 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 348				; 0000015cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-360]
	mov	ecx, 87					; 00000057H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1584 : 	p = SkipWhiteSpace( p, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1585 : 	// Find the beginning, find the end, and look for
; 1586 : 	// the stuff in-between.
; 1587 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1588 : 	if ( !p || !*p || !StringEqual( p, "<?xml", true, _encoding ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN14@Parse@7
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@Parse@7
	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_05DJDIECHG@?$DM?$DPxml?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN15@Parse@7
$LN14@Parse@7:

; 1589 : 	{
; 1590 : 		if ( document ) document->SetError( TIXML_ERROR_PARSING_DECLARATION, 0, 0, _encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN13@Parse@7
	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	0
	push	0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN13@Parse@7:

; 1591 : 		return 0;

	xor	eax, eax
	jmp	$LN16@Parse@7
$LN15@Parse@7:

; 1592 : 	}
; 1593 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN12@Parse@7

; 1594 : 	{
; 1595 : 		data->Stamp( p, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1596 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN12@Parse@7:

; 1597 : 	}
; 1598 : 	p += 5;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 5
	mov	DWORD PTR _p$[ebp], eax

; 1599 : 
; 1600 : 	version = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1601 : 	encoding = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1602 : 	standalone = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
$LN11@Parse@7:

; 1603 : 
; 1604 : 	while ( p && *p )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN10@Parse@7
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN10@Parse@7

; 1605 : 	{
; 1606 : 		if ( *p == '>' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN9@Parse@7

; 1607 : 		{
; 1608 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1609 : 			return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	$LN16@Parse@7
$LN9@Parse@7:

; 1610 : 		}
; 1611 : 
; 1612 : 		p = SkipWhiteSpace( p, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1613 : 		if ( StringEqual( p, "version", true, _encoding ) )

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_07CPCPJPKL@version?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN8@Parse@7

; 1614 : 		{
; 1615 : 			TiXmlAttribute attrib;

	lea	ecx, DWORD PTR _attrib$209840[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1616 : 			p = attrib.Parse( p, data, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _attrib$209840[ebp]
	call	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlAttribute::Parse
	mov	DWORD PTR _p$[ebp], eax

; 1617 : 			version = attrib.Value();

	lea	ecx, DWORD PTR _attrib$209840[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1618 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attrib$209840[ebp]
	call	??1TiXmlAttribute@@UAE@XZ
	jmp	$LN7@Parse@7
$LN8@Parse@7:

; 1619 : 		else if ( StringEqual( p, "encoding", true, _encoding ) )

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_08MLPGAEIK@encoding?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@Parse@7

; 1620 : 		{
; 1621 : 			TiXmlAttribute attrib;

	lea	ecx, DWORD PTR _attrib$209844[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1622 : 			p = attrib.Parse( p, data, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _attrib$209844[ebp]
	call	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlAttribute::Parse
	mov	DWORD PTR _p$[ebp], eax

; 1623 : 			encoding = attrib.Value();

	lea	ecx, DWORD PTR _attrib$209844[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1624 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attrib$209844[ebp]
	call	??1TiXmlAttribute@@UAE@XZ
	jmp	$LN7@Parse@7
$LN6@Parse@7:

; 1625 : 		else if ( StringEqual( p, "standalone", true, _encoding ) )

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_0L@FLHGMILF@standalone?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Parse@7

; 1626 : 		{
; 1627 : 			TiXmlAttribute attrib;

	lea	ecx, DWORD PTR _attrib$209848[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR __$EHRec$[ebp+8], 2

; 1628 : 			p = attrib.Parse( p, data, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _attrib$209848[ebp]
	call	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlAttribute::Parse
	mov	DWORD PTR _p$[ebp], eax

; 1629 : 			standalone = attrib.Value();

	lea	ecx, DWORD PTR _attrib$209848[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1630 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attrib$209848[ebp]
	call	??1TiXmlAttribute@@UAE@XZ

; 1631 : 		else

	jmp	SHORT $LN7@Parse@7
$LN2@Parse@7:

; 1632 : 		{
; 1633 : 			// Read over whatever it is.
; 1634 : 			while( p && *p && *p != '>' && !IsWhiteSpace( *p ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN7@Parse@7
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@Parse@7
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN7@Parse@7
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Parse@7

; 1635 : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN2@Parse@7
$LN7@Parse@7:

; 1636 : 		}
; 1637 : 	}

	jmp	$LN11@Parse@7
$LN10@Parse@7:

; 1638 : 	return 0;

	xor	eax, eax
$LN16@Parse@7:

; 1639 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@Parse@7
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 360				; 00000168H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN26@Parse@7:
	DD	3
	DD	$LN25@Parse@7
$LN25@Parse@7:
	DD	-76					; ffffffb4H
	DD	36					; 00000024H
	DD	$LN21@Parse@7
	DD	-120					; ffffff88H
	DD	36					; 00000024H
	DD	$LN22@Parse@7
	DD	-164					; ffffff5cH
	DD	36					; 00000024H
	DD	$LN23@Parse@7
$LN23@Parse@7:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN22@Parse@7:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN21@Parse@7:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _attrib$209840[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__unwindfunclet$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$1:
	lea	ecx, DWORD PTR _attrib$209844[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__unwindfunclet$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$2:
	lea	ecx, DWORD PTR _attrib$209848[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__ehhandler$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-364]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlDeclaration::Parse
PUBLIC	??ATiXmlString@@QBEAADI@Z			; TiXmlString::operator[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Blank@TiXmlText@@IBE_NXZ
_TEXT	SEGMENT
_i$209856 = -20						; size = 4
_this$ = -8						; size = 4
?Blank@TiXmlText@@IBE_NXZ PROC				; TiXmlText::Blank, COMDAT
; _this$ = ecx

; 1642 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1643 : 	for ( unsigned i=0; i<value.length(); i++ )

	mov	DWORD PTR _i$209856[ebp], 0
	jmp	SHORT $LN4@Blank
$LN3@Blank:
	mov	eax, DWORD PTR _i$209856[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209856[ebp], eax
$LN4@Blank:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	cmp	DWORD PTR _i$209856[ebp], eax
	jae	SHORT $LN2@Blank

; 1644 : 		if ( !IsWhiteSpace( value[i] ) )

	mov	eax, DWORD PTR _i$209856[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??ATiXmlString@@QBEAADI@Z		; TiXmlString::operator[]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN1@Blank

; 1645 : 			return false;

	xor	al, al
	jmp	SHORT $LN5@Blank
$LN1@Blank:

; 1646 : 	return true;

	jmp	SHORT $LN3@Blank
$LN2@Blank:
	mov	al, 1
$LN5@Blank:

; 1647 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Blank@TiXmlText@@IBE_NXZ ENDP				; TiXmlText::Blank
_TEXT	ENDS
PUBLIC	??_C@_04CMBCJJJD@href?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlStylesheetReference::Parse
;	COMDAT ??_C@_04CMBCJJJD@href?$AA@
CONST	SEGMENT
??_C@_04CMBCJJJD@href?$AA@ DB 'href', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$1
__ehfuncinfo$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_attrib$209882 = -120					; size = 36
_attrib$209878 = -76					; size = 36
_document$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p$ = 8							; size = 4
_data$ = 12						; size = 4
__encoding$ = 16					; size = 4
?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z PROC ; TiXmlStylesheetReference::Parse, COMDAT
; _this$ = ecx

; 1674 : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-316]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1675 : 	p = SkipWhiteSpace( p, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1676 : 	// Find the beginning, find the end, and look for
; 1677 : 	// the stuff in-between.
; 1678 : 	TiXmlDocument* document = GetDocument();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ; TiXmlNode::GetDocument
	mov	DWORD PTR _document$[ebp], eax

; 1679 : 	if ( !p || !*p || !StringEqual( p, "<?xml-stylesheet", true, _encoding ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN12@Parse@8
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN12@Parse@8
	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_0BB@LCMGPMGE@?$DM?$DPxml?9stylesheet?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN13@Parse@8
$LN12@Parse@8:

; 1680 : 	{
; 1681 : 		if ( document ) document->SetError( TIXML_ERROR_PARSING_DECLARATION, 0, 0, _encoding );

	cmp	DWORD PTR _document$[ebp], 0
	je	SHORT $LN11@Parse@8
	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	0
	push	0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _document$[ebp]
	call	?SetError@TiXmlDocument@@QAEXHPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlDocument::SetError
$LN11@Parse@8:

; 1682 : 		return 0;

	xor	eax, eax
	jmp	$LN14@Parse@8
$LN13@Parse@8:

; 1683 : 	}
; 1684 : 	if ( data )

	cmp	DWORD PTR _data$[ebp], 0
	je	SHORT $LN10@Parse@8

; 1685 : 	{
; 1686 : 		data->Stamp( p, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Stamp@TiXmlParsingData@@QAEXPBDW4TiXmlEncoding@@@Z ; TiXmlParsingData::Stamp

; 1687 : 		location = data->Cursor();

	mov	ecx, DWORD PTR _data$[ebp]
	call	?Cursor@TiXmlParsingData@@QAEABUTiXmlCursor@@XZ ; TiXmlParsingData::Cursor
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
$LN10@Parse@8:

; 1688 : 	}
; 1689 : 	p += 5;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 5
	mov	DWORD PTR _p$[ebp], eax

; 1690 : 
; 1691 : 	type = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1692 : 	href = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
$LN9@Parse@8:

; 1693 : 
; 1694 : 	while ( p && *p )

	cmp	DWORD PTR _p$[ebp], 0
	je	$LN8@Parse@8
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN8@Parse@8

; 1695 : 	{
; 1696 : 		if ( *p == '>' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	jne	SHORT $LN7@Parse@8

; 1697 : 		{
; 1698 : 			++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax

; 1699 : 			return p;

	mov	eax, DWORD PTR _p$[ebp]
	jmp	$LN14@Parse@8
$LN7@Parse@8:

; 1700 : 		}
; 1701 : 
; 1702 : 		p = SkipWhiteSpace( p, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SkipWhiteSpace@TiXmlBase@@KAPBDPBDW4TiXmlEncoding@@@Z ; TiXmlBase::SkipWhiteSpace
	add	esp, 8
	mov	DWORD PTR _p$[ebp], eax

; 1703 : 		if ( StringEqual( p, "type", true, _encoding ) )

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_04GPMDFGEJ@type?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN6@Parse@8

; 1704 : 		{
; 1705 : 			TiXmlAttribute attrib;

	lea	ecx, DWORD PTR _attrib$209878[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1706 : 			p = attrib.Parse( p, data, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _attrib$209878[ebp]
	call	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlAttribute::Parse
	mov	DWORD PTR _p$[ebp], eax

; 1707 : 			type = attrib.Value();

	lea	ecx, DWORD PTR _attrib$209878[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1708 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attrib$209878[ebp]
	call	??1TiXmlAttribute@@UAE@XZ
	jmp	$LN5@Parse@8
$LN6@Parse@8:

; 1709 : 		else if ( StringEqual( p, "href", true, _encoding ) )

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	push	1
	push	OFFSET ??_C@_04CMBCJJJD@href?$AA@
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?StringEqual@TiXmlBase@@KA_NPBD0_NW4TiXmlEncoding@@@Z ; TiXmlBase::StringEqual
	add	esp, 16					; 00000010H
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Parse@8

; 1710 : 		{
; 1711 : 			TiXmlAttribute attrib;

	lea	ecx, DWORD PTR _attrib$209882[ebp]
	call	??0TiXmlAttribute@@QAE@XZ		; TiXmlAttribute::TiXmlAttribute
	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1712 : 			p = attrib.Parse( p, data, _encoding );

	mov	eax, DWORD PTR __encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	lea	ecx, DWORD PTR _attrib$209882[ebp]
	call	?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ; TiXmlAttribute::Parse
	mov	DWORD PTR _p$[ebp], eax

; 1713 : 			href = attrib.Value();

	lea	ecx, DWORD PTR _attrib$209882[ebp]
	call	?Value@TiXmlAttribute@@QBEPBDXZ		; TiXmlAttribute::Value
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1714 : 		}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _attrib$209882[ebp]
	call	??1TiXmlAttribute@@UAE@XZ

; 1715 : 		else

	jmp	SHORT $LN5@Parse@8
$LN2@Parse@8:

; 1716 : 		{
; 1717 : 			// Read over whatever it is.
; 1718 : 			while( p && *p && *p != '>' && !IsWhiteSpace( *p ) )

	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN5@Parse@8
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN5@Parse@8
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 62					; 0000003eH
	je	SHORT $LN5@Parse@8
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	push	ecx
	call	?IsWhiteSpace@TiXmlBase@@KA_ND@Z	; TiXmlBase::IsWhiteSpace
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@Parse@8

; 1719 : 				++p;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
	jmp	SHORT $LN2@Parse@8
$LN5@Parse@8:

; 1720 : 		}
; 1721 : 	}

	jmp	$LN9@Parse@8
$LN8@Parse@8:

; 1722 : 	return 0;

	xor	eax, eax
$LN14@Parse@8:

; 1723 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@Parse@8
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 316				; 0000013cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN22@Parse@8:
	DD	2
	DD	$LN21@Parse@8
$LN21@Parse@8:
	DD	-76					; ffffffb4H
	DD	36					; 00000024H
	DD	$LN18@Parse@8
	DD	-120					; ffffff88H
	DD	36					; 00000024H
	DD	$LN19@Parse@8
$LN19@Parse@8:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
$LN18@Parse@8:
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	98					; 00000062H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$0:
	lea	ecx, DWORD PTR _attrib$209878[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__unwindfunclet$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z$1:
	lea	ecx, DWORD PTR _attrib$209882[ebp]
	jmp	??1TiXmlAttribute@@UAE@XZ
__ehhandler$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z ENDP ; TiXmlStylesheetReference::Parse
EXTRN	?nullrep_@TiXmlString@@0URep@1@A:BYTE		; TiXmlString::nullrep_
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinystr.h
;	COMDAT ??0TiXmlString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TiXmlString@@QAE@XZ PROC				; TiXmlString::TiXmlString, COMDAT
; _this$ = ecx

; 79   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_

; 80   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlString@@QAE@XZ ENDP				; TiXmlString::TiXmlString
_TEXT	ENDS
PUBLIC	?start@TiXmlString@@ABEPADXZ			; TiXmlString::start
PUBLIC	?init@TiXmlString@@AAEXI@Z			; TiXmlString::init
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0TiXmlString@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??0TiXmlString@@QAE@PBD@Z PROC				; TiXmlString::TiXmlString, COMDAT
; _this$ = ecx

; 91   : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 92   : 		init( static_cast<size_type>( strlen(copy) ));

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@TiXmlString@@AAEXI@Z		; TiXmlString::init

; 93   : 		memcpy(start(), copy, length());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	push	eax
	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?start@TiXmlString@@ABEPADXZ		; TiXmlString::start
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 94   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0TiXmlString@@QAE@PBD@Z ENDP				; TiXmlString::TiXmlString
_TEXT	ENDS
PUBLIC	?quit@TiXmlString@@AAEXXZ			; TiXmlString::quit
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1TiXmlString@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlString@@QAE@XZ PROC				; TiXmlString::~TiXmlString, COMDAT
; _this$ = ecx

; 105  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 106  : 		quit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?quit@TiXmlString@@AAEXXZ		; TiXmlString::quit

; 107  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlString@@QAE@XZ ENDP				; TiXmlString::~TiXmlString
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4TiXmlString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_copy$ = 8						; size = 4
??4TiXmlString@@QAEAAV0@PBD@Z PROC			; TiXmlString::operator=, COMDAT
; _this$ = ecx

; 111  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  : 		return assign( copy, (size_type)strlen(copy));

	mov	eax, DWORD PTR _copy$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _copy$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::assign

; 113  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4TiXmlString@@QAEAAV0@PBD@Z ENDP			; TiXmlString::operator=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??YTiXmlString@@QAEAAV0@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_suffix$ = 8						; size = 4
??YTiXmlString@@QAEAAV0@PBD@Z PROC			; TiXmlString::operator+=, COMDAT
; _this$ = ecx

; 124  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  : 		return append(suffix, static_cast<size_type>( strlen(suffix) ));

	mov	eax, DWORD PTR _suffix$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _suffix$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 126  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YTiXmlString@@QAEAAV0@PBD@Z ENDP			; TiXmlString::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??YTiXmlString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_single$ = 8						; size = 1
??YTiXmlString@@QAEAAV0@D@Z PROC			; TiXmlString::operator+=, COMDAT
; _this$ = ecx

; 130  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 131  : 		return append(&single, 1);

	push	1
	lea	eax, DWORD PTR _single$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 132  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YTiXmlString@@QAEAAV0@D@Z ENDP			; TiXmlString::operator+=
_TEXT	ENDS
PUBLIC	?data@TiXmlString@@QBEPBDXZ			; TiXmlString::data
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??YTiXmlString@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_suffix$ = 8						; size = 4
??YTiXmlString@@QAEAAV0@ABV0@@Z PROC			; TiXmlString::operator+=, COMDAT
; _this$ = ecx

; 136  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 137  : 		return append(suffix.data(), suffix.length());

	mov	ecx, DWORD PTR _suffix$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	push	eax
	mov	ecx, DWORD PTR _suffix$[ebp]
	call	?data@TiXmlString@@QBEPBDXZ		; TiXmlString::data
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@TiXmlString@@QAEAAV1@PBDI@Z	; TiXmlString::append

; 138  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YTiXmlString@@QAEAAV0@ABV0@@Z ENDP			; TiXmlString::operator+=
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?c_str@TiXmlString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@TiXmlString@@QBEPBDXZ PROC			; TiXmlString::c_str, COMDAT
; _this$ = ecx

; 142  : 	const char * c_str () const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@TiXmlString@@QBEPBDXZ ENDP			; TiXmlString::c_str
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?data@TiXmlString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?data@TiXmlString@@QBEPBDXZ PROC			; TiXmlString::data, COMDAT
; _this$ = ecx

; 145  : 	const char * data () const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?data@TiXmlString@@QBEPBDXZ ENDP			; TiXmlString::data
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?length@TiXmlString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?length@TiXmlString@@QBEIXZ PROC			; TiXmlString::length, COMDAT
; _this$ = ecx

; 148  : 	size_type length () const { return rep_->size; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?length@TiXmlString@@QBEIXZ ENDP			; TiXmlString::length
_TEXT	ENDS
PUBLIC	??_C@_1CC@PEHEJHGC@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@NDDFGJPM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@ ; `string'
;	COMDAT ??_C@_1CC@PEHEJHGC@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@PEHEJHGC@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@NDDFGJPM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
CONST	SEGMENT
??_C@_1GA@NDDFGJPM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'-', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, '-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, 'd', 00H, '\', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'y', 00H, 'x', 00H, 'm', 00H, 'l', 00H, '\', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'y', 00H, 's', 00H, 't', 00H, 'r', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??ATiXmlString@@QBEAADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_index$ = 8						; size = 4
??ATiXmlString@@QBEAADI@Z PROC				; TiXmlString::operator[], COMDAT
; _this$ = ecx

; 169  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 170  : 		assert( index < length() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?length@TiXmlString@@QBEIXZ		; TiXmlString::length
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN3@operator
	push	170					; 000000aaH
	push	OFFSET ??_C@_1GA@NDDFGJPM@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1CC@PEHEJHGC@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$CI?$AA?$CJ?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN3@operator:

; 171  : 		return rep_->str[ index ];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx+8]

; 172  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??ATiXmlString@@QBEAADI@Z ENDP				; TiXmlString::operator[]
_TEXT	ENDS
PUBLIC	?init@TiXmlString@@AAEXII@Z			; TiXmlString::init
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init@TiXmlString@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?init@TiXmlString@@AAEXI@Z PROC				; TiXmlString::init, COMDAT
; _this$ = ecx

; 220  : 	void init(size_type sz) { init(sz, sz); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sz$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@TiXmlString@@AAEXII@Z		; TiXmlString::init
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?init@TiXmlString@@AAEXI@Z ENDP				; TiXmlString::init
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?start@TiXmlString@@ABEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?start@TiXmlString@@ABEPADXZ PROC			; TiXmlString::start, COMDAT
; _this$ = ecx

; 222  : 	char* start() const { return rep_->str; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, 8
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?start@TiXmlString@@ABEPADXZ ENDP			; TiXmlString::start
_TEXT	ENDS
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?init@TiXmlString@@AAEXII@Z
_TEXT	SEGMENT
$T210354 = -236						; size = 4
_intsNeeded$193277 = -32				; size = 4
_bytesNeeded$193275 = -20				; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
_cap$ = 12						; size = 4
?init@TiXmlString@@AAEXII@Z PROC			; TiXmlString::init, COMDAT
; _this$ = ecx

; 232  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 		if (cap)

	cmp	DWORD PTR _cap$[ebp], 0
	je	SHORT $LN2@init

; 234  : 		{
; 235  : 			// Lee: the original form:
; 236  : 			//	rep_ = static_cast<Rep*>(operator new(sizeof(Rep) + cap));
; 237  : 			// doesn't work in some cases of new being overloaded. Switching
; 238  : 			// to the normal allocation, although use an 'int' for systems
; 239  : 			// that are overly picky about structure alignment.
; 240  : 			const size_type bytesNeeded = sizeof(Rep) + cap;

	mov	eax, DWORD PTR _cap$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR _bytesNeeded$193275[ebp], eax

; 241  : 			const size_type intsNeeded = ( bytesNeeded + sizeof(int) - 1 ) / sizeof( int ); 

	mov	eax, DWORD PTR _bytesNeeded$193275[ebp]
	add	eax, 3
	shr	eax, 2
	mov	DWORD PTR _intsNeeded$193277[ebp], eax

; 242  : 			rep_ = reinterpret_cast<Rep*>( new int[ intsNeeded ] );

	xor	ecx, ecx
	mov	eax, DWORD PTR _intsNeeded$193277[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T210354[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T210354[ebp]
	mov	DWORD PTR [eax], ecx

; 243  : 
; 244  : 			rep_->str[ rep_->size = sz ] = '\0';

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _sz$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _sz$[ebp]
	mov	BYTE PTR [ecx+edx+8], 0

; 245  : 			rep_->capacity = cap;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cap$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 246  : 		}
; 247  : 		else

	jmp	SHORT $LN3@init
$LN2@init:

; 248  : 		{
; 249  : 			rep_ = &nullrep_;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_
$LN3@init:

; 250  : 		}
; 251  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?init@TiXmlString@@AAEXII@Z ENDP			; TiXmlString::init
_TEXT	ENDS
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?quit@TiXmlString@@AAEXXZ
_TEXT	SEGMENT
$T210357 = -212						; size = 4
_this$ = -8						; size = 4
?quit@TiXmlString@@AAEXXZ PROC				; TiXmlString::quit, COMDAT
; _this$ = ecx

; 254  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 255  : 		if (rep_ != &nullrep_)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], OFFSET ?nullrep_@TiXmlString@@0URep@1@A ; TiXmlString::nullrep_
	je	SHORT $LN2@quit

; 256  : 		{
; 257  : 			// The rep_ is really an array of ints. (see the allocator, above).
; 258  : 			// Cast it back before delete, so the compiler won't incorrectly call destructors.
; 259  : 			delete [] ( reinterpret_cast<int*>( rep_ ) );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T210357[ebp], ecx
	mov	edx, DWORD PTR $T210357[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@quit:

; 260  : 		}
; 261  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?quit@TiXmlString@@AAEXXZ ENDP				; TiXmlString::quit
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\shared\tinyxml\tinyxml.h
_TEXT	ENDS
;	COMDAT ??0TiXmlCursor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TiXmlCursor@@QAE@XZ PROC				; TiXmlCursor::TiXmlCursor, COMDAT
; _this$ = ecx

; 110  : 	TiXmlCursor()		{ Clear(); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@TiXmlCursor@@QAEXXZ		; TiXmlCursor::Clear
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlCursor@@QAE@XZ ENDP				; TiXmlCursor::TiXmlCursor
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Clear@TiXmlCursor@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Clear@TiXmlCursor@@QAEXXZ PROC				; TiXmlCursor::Clear, COMDAT
; _this$ = ecx

; 111  : 	void Clear()		{ row = col = -1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@TiXmlCursor@@QAEXXZ ENDP				; TiXmlCursor::Clear
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?IsWhiteSpaceCondensed@TiXmlBase@@SA_NXZ
_TEXT	SEGMENT
?IsWhiteSpaceCondensed@TiXmlBase@@SA_NXZ PROC		; TiXmlBase::IsWhiteSpaceCondensed, COMDAT

; 239  : 	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	al, BYTE PTR ?condenseWhiteSpace@TiXmlBase@@0_NA ; TiXmlBase::condenseWhiteSpace
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWhiteSpaceCondensed@TiXmlBase@@SA_NXZ ENDP		; TiXmlBase::IsWhiteSpaceCondensed
_TEXT	ENDS
EXTRN	_isspace:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsWhiteSpace@TiXmlBase@@KA_ND@Z
_TEXT	SEGMENT
tv72 = -196						; size = 4
_c$ = 8							; size = 1
?IsWhiteSpace@TiXmlBase@@KA_ND@Z PROC			; TiXmlBase::IsWhiteSpace, COMDAT

; 306  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 307  : 		return ( isspace( (unsigned char) c ) || c == '\n' || c == '\r' );

	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN3@IsWhiteSpa
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN3@IsWhiteSpa
	movsx	edx, BYTE PTR _c$[ebp]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN3@IsWhiteSpa
	mov	DWORD PTR tv72[ebp], 0
	jmp	SHORT $LN4@IsWhiteSpa
$LN3@IsWhiteSpa:
	mov	DWORD PTR tv72[ebp], 1
$LN4@IsWhiteSpa:
	mov	al, BYTE PTR tv72[ebp]

; 308  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsWhiteSpace@TiXmlBase@@KA_ND@Z ENDP			; TiXmlBase::IsWhiteSpace
_TEXT	ENDS
PUBLIC	??_C@_1DI@JGFAPJP@?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@BACNEEMJ@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@ ; `string'
;	COMDAT ??_C@_1DI@JGFAPJP@?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AA5?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@JGFAPJP@?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AA5?$AA?$AA@ DB '*'
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '*', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H, ' ', 00H, '5'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@BACNEEMJ@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
CONST	SEGMENT
??_C@_1GA@BACNEEMJ@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@ DB 'd'
	DB	00H, ':', 00H, '\', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	'-', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, '-', 00H, 'm', 00H, 'a', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'r'
	DB	00H, 'e', 00H, 'd', 00H, '\', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'y', 00H, 'x', 00H, 'm', 00H, 'l', 00H, '\', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'y', 00H, 'x', 00H, 'm', 00H, 'l', 00H, '.', 00H
	DB	'h', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetChar@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_i$193621 = -8						; size = 4
_p$ = 8							; size = 4
__value$ = 12						; size = 4
_length$ = 16						; size = 4
_encoding$ = 20						; size = 4
?GetChar@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z PROC ; TiXmlBase::GetChar, COMDAT

; 343  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 344  : 		assert( p );

	cmp	DWORD PTR _p$[ebp], 0
	jne	SHORT $LN13@GetChar
	push	344					; 00000158H
	push	OFFSET ??_C@_1GA@BACNEEMJ@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_13LFIEIAHP@?$AAp?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN13@GetChar:

; 345  : 		if ( encoding == TIXML_ENCODING_UTF8 )

	cmp	DWORD PTR _encoding$[ebp], 1
	jne	SHORT $LN10@GetChar

; 346  : 		{
; 347  : 			*length = utf8ByteTable[ *((const unsigned char*)p) ];

	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _length$[ebp]
	mov	eax, DWORD PTR ?utf8ByteTable@TiXmlBase@@2QBHB[ecx*4]
	mov	DWORD PTR [edx], eax

; 348  : 			assert( *length >= 0 && *length < 5 );

	mov	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [eax], 0
	jl	SHORT $LN14@GetChar
	mov	ecx, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [ecx], 5
	jl	SHORT $LN15@GetChar
$LN14@GetChar:
	push	348					; 0000015cH
	push	OFFSET ??_C@_1GA@BACNEEMJ@?$AAd?$AA?3?$AA?2?$AAv?$AAi?$AAc?$AAe?$AA?9?$AAp?$AAl?$AAa?$AAy?$AAe?$AAr?$AAs?$AA?9?$AAm?$AAa?$AAs?$AAt?$AAe?$AAr?$AA?2?$AAs?$AAh?$AAa?$AAr?$AAe?$AAd?$AA?2?$AAt?$AAi@
	push	OFFSET ??_C@_1DI@JGFAPJP@?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CK?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DM?$AA?5?$AA5?$AA?$AA@
	call	__wassert
	add	esp, 12					; 0000000cH
$LN15@GetChar:

; 349  : 		}
; 350  : 		else

	jmp	SHORT $LN9@GetChar
$LN10@GetChar:

; 351  : 		{
; 352  : 			*length = 1;

	mov	eax, DWORD PTR _length$[ebp]
	mov	DWORD PTR [eax], 1
$LN9@GetChar:

; 353  : 		}
; 354  : 
; 355  : 		if ( *length == 1 )

	mov	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@GetChar

; 356  : 		{
; 357  : 			if ( *p == '&' )

	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 38					; 00000026H
	jne	SHORT $LN7@GetChar

; 358  : 				return GetEntity( p, _value, length, encoding );

	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR __value$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?GetEntity@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ; TiXmlBase::GetEntity
	add	esp, 16					; 00000010H
	jmp	SHORT $LN11@GetChar
$LN7@GetChar:

; 359  : 			*_value = *p;

	mov	eax, DWORD PTR __value$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 360  : 			return p+1;

	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	jmp	SHORT $LN11@GetChar
	jmp	SHORT $LN11@GetChar
$LN8@GetChar:

; 361  : 		}
; 362  : 		else if ( *length )

	mov	eax, DWORD PTR _length$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@GetChar

; 363  : 		{
; 364  : 			//strncpy( _value, p, *length );	// lots of compilers don't like this function (unsafe),
; 365  : 												// and the null terminator isn't needed
; 366  : 			for( int i=0; p[i] && i<*length; ++i ) {

	mov	DWORD PTR _i$193621[ebp], 0
	jmp	SHORT $LN4@GetChar
$LN3@GetChar:
	mov	eax, DWORD PTR _i$193621[ebp]
	add	eax, 1
	mov	DWORD PTR _i$193621[ebp], eax
$LN4@GetChar:
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$193621[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN2@GetChar
	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _i$193621[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN2@GetChar

; 367  : 				_value[i] = p[i];

	mov	eax, DWORD PTR __value$[ebp]
	add	eax, DWORD PTR _i$193621[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _i$193621[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 368  : 			}

	jmp	SHORT $LN3@GetChar
$LN2@GetChar:

; 369  : 			return p + (*length);

	mov	eax, DWORD PTR _length$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx
	jmp	SHORT $LN11@GetChar

; 370  : 		}
; 371  : 		else

	jmp	SHORT $LN11@GetChar
$LN5@GetChar:

; 372  : 		{
; 373  : 			// Not valid text.
; 374  : 			return 0;

	xor	eax, eax
$LN11@GetChar:

; 375  : 		}
; 376  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetChar@TiXmlBase@@KAPBDPBDPADPAHW4TiXmlEncoding@@@Z ENDP ; TiXmlBase::GetChar
_TEXT	ENDS
EXTRN	_tolower:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ToLower@TiXmlBase@@KAHHW4TiXmlEncoding@@@Z
_TEXT	SEGMENT
_v$ = 8							; size = 4
_encoding$ = 12						; size = 4
?ToLower@TiXmlBase@@KAHHW4TiXmlEncoding@@@Z PROC	; TiXmlBase::ToLower, COMDAT

; 398  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 399  : 		if ( encoding == TIXML_ENCODING_UTF8 )

	cmp	DWORD PTR _encoding$[ebp], 1
	jne	SHORT $LN3@ToLower

; 400  : 		{
; 401  : 			if ( v < 128 ) return tolower( v );

	cmp	DWORD PTR _v$[ebp], 128			; 00000080H
	jge	SHORT $LN2@ToLower
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_tolower
	add	esp, 4
	jmp	SHORT $LN4@ToLower
$LN2@ToLower:

; 402  : 			return v;

	mov	eax, DWORD PTR _v$[ebp]
	jmp	SHORT $LN4@ToLower

; 403  : 		}
; 404  : 		else

	jmp	SHORT $LN4@ToLower
$LN3@ToLower:

; 405  : 		{
; 406  : 			return tolower( v );

	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_tolower
	add	esp, 4
$LN4@ToLower:

; 407  : 		}
; 408  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ToLower@TiXmlBase@@KAHHW4TiXmlEncoding@@@Z ENDP	; TiXmlBase::ToLower
_TEXT	ENDS
EXTRN	?GetDocument@TiXmlNode@@QBEPBVTiXmlDocument@@XZ:PROC ; TiXmlNode::GetDocument
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ PROC	; TiXmlNode::GetDocument, COMDAT
; _this$ = ecx

; 706  : 	TiXmlDocument* GetDocument() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 707  : 		return const_cast< TiXmlDocument* >( (const_cast< const TiXmlNode* >(this))->GetDocument() );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetDocument@TiXmlNode@@QBEPBVTiXmlDocument@@XZ ; TiXmlNode::GetDocument

; 708  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDocument@TiXmlNode@@QAEPAVTiXmlDocument@@XZ ENDP	; TiXmlNode::GetDocument
_TEXT	ENDS
PUBLIC	??1TiXmlBase@@UAE@XZ				; TiXmlBase::~TiXmlBase
PUBLIC	??_7TiXmlAttribute@@6B@				; TiXmlAttribute::`vftable'
PUBLIC	??0TiXmlBase@@QAE@XZ				; TiXmlBase::TiXmlBase
PUBLIC	??_R4TiXmlAttribute@@6B@			; TiXmlAttribute::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlAttribute@@@8			; TiXmlAttribute `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlAttribute@@8				; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlAttribute@@8				; TiXmlAttribute::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlAttribute@@8			; TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@TiXmlBase@@8			; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTiXmlBase@@@8				; TiXmlBase `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlBase@@8				; TiXmlBase::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlBase@@8				; TiXmlBase::`RTTI Base Class Array'
PUBLIC	?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z	; TiXmlAttribute::Print
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ETiXmlAttribute@@UAEPAXI@Z:PROC		; TiXmlAttribute::`vector deleting destructor'
;	COMDAT ??_R2TiXmlBase@@8
rdata$r	SEGMENT
??_R2TiXmlBase@@8 DD FLAT:??_R1A@?0A@EA@TiXmlBase@@8	; TiXmlBase::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3TiXmlBase@@8
rdata$r	SEGMENT
??_R3TiXmlBase@@8 DD 00H				; TiXmlBase::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlBase@@@8
_DATA	SEGMENT
??_R0?AVTiXmlBase@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlBase `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlBase@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlBase@@8 DD FLAT:??_R0?AVTiXmlBase@@@8 ; TiXmlBase::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlAttribute@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlAttribute@@8 DD FLAT:??_R0?AVTiXmlAttribute@@@8 ; TiXmlAttribute::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlAttribute@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlAttribute@@8
rdata$r	SEGMENT
??_R2TiXmlAttribute@@8 DD FLAT:??_R1A@?0A@EA@TiXmlAttribute@@8 ; TiXmlAttribute::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlAttribute@@8
rdata$r	SEGMENT
??_R3TiXmlAttribute@@8 DD 00H				; TiXmlAttribute::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TiXmlAttribute@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlAttribute@@@8
_DATA	SEGMENT
??_R0?AVTiXmlAttribute@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlAttribute `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlAttribute@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlAttribute@@6B@
rdata$r	SEGMENT
??_R4TiXmlAttribute@@6B@ DD 00H				; TiXmlAttribute::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlAttribute@@@8
	DD	FLAT:??_R3TiXmlAttribute@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlAttribute@@6B@
CONST	SEGMENT
??_7TiXmlAttribute@@6B@ DD FLAT:??_R4TiXmlAttribute@@6B@ ; TiXmlAttribute::`vftable'
	DD	FLAT:??_ETiXmlAttribute@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlAttribute@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlAttribute@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1
__ehfuncinfo$??0TiXmlAttribute@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlAttribute@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TiXmlAttribute@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlAttribute@@QAE@XZ PROC				; TiXmlAttribute::TiXmlAttribute, COMDAT
; _this$ = ecx

; 804  : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlAttribute@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlBase@@QAE@XZ			; TiXmlBase::TiXmlBase
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlAttribute@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString

; 805  : 		document = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 806  : 		prev = next = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 807  : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??0TiXmlAttribute@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlAttribute@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlAttribute@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlAttribute@@QAE@XZ ENDP				; TiXmlAttribute::TiXmlAttribute
PUBLIC	??_7TiXmlBase@@6B@				; TiXmlBase::`vftable'
PUBLIC	??_R4TiXmlBase@@6B@				; TiXmlBase::`RTTI Complete Object Locator'
EXTRN	??_ETiXmlBase@@UAEPAXI@Z:PROC			; TiXmlBase::`vector deleting destructor'
EXTRN	__purecall:PROC
;	COMDAT ??_R4TiXmlBase@@6B@
rdata$r	SEGMENT
??_R4TiXmlBase@@6B@ DD 00H				; TiXmlBase::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlBase@@@8
	DD	FLAT:??_R3TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlBase@@6B@
CONST	SEGMENT
??_7TiXmlBase@@6B@ DD FLAT:??_R4TiXmlBase@@6B@		; TiXmlBase::`vftable'
	DD	FLAT:??_ETiXmlBase@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0TiXmlBase@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TiXmlBase@@QAE@XZ PROC				; TiXmlBase::TiXmlBase, COMDAT
; _this$ = ecx

; 216  : 	TiXmlBase()	:	userData(0)		{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlBase@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0TiXmlCursor@@QAE@XZ			; TiXmlCursor::TiXmlCursor
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlBase@@QAE@XZ ENDP				; TiXmlBase::TiXmlBase
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1TiXmlBase@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlBase@@UAE@XZ PROC				; TiXmlBase::~TiXmlBase, COMDAT
; _this$ = ecx

; 217  : 	virtual ~TiXmlBase()			{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlBase@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlBase@@UAE@XZ ENDP				; TiXmlBase::~TiXmlBase
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_GTiXmlBase@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlBase@@UAEPAXI@Z PROC				; TiXmlBase::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlBase@@UAEPAXI@Z ENDP				; TiXmlBase::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Name@TiXmlAttribute@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@TiXmlAttribute@@QBEPBDXZ PROC			; TiXmlAttribute::Name, COMDAT
; _this$ = ecx

; 829  : 	const char*		Name()  const		{ return name.c_str(); }		///< Return the name of this attribute.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@TiXmlAttribute@@QBEPBDXZ ENDP			; TiXmlAttribute::Name
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Value@TiXmlAttribute@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Value@TiXmlAttribute@@QBEPBDXZ PROC			; TiXmlAttribute::Value, COMDAT
; _this$ = ecx

; 830  : 	const char*		Value() const		{ return value.c_str(); }		///< Return the value of this attribute.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Value@TiXmlAttribute@@QBEPBDXZ ENDP			; TiXmlAttribute::Value
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetValue@TiXmlAttribute@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__value$ = 8						; size = 4
?SetValue@TiXmlAttribute@@QAEXPBD@Z PROC		; TiXmlAttribute::SetValue, COMDAT
; _this$ = ecx

; 854  : 	void SetValue( const char* _value )	{ value = _value; }				///< Set the value.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetValue@TiXmlAttribute@@QAEXPBD@Z ENDP		; TiXmlAttribute::SetValue
_TEXT	ENDS
EXTRN	?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z:PROC ; TiXmlAttribute::Print
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z PROC		; TiXmlAttribute::Print, COMDAT
; _this$ = ecx

; 888  : 	virtual void Print( FILE* cfile, int depth ) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 889  : 		Print( cfile, depth, 0 );

	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Print@TiXmlAttribute@@QBEXPAU_iobuf@@HPAVTiXmlString@@@Z ; TiXmlAttribute::Print

; 890  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlAttribute@@UBEXPAU_iobuf@@H@Z ENDP		; TiXmlAttribute::Print
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_doc$ = 8						; size = 4
?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z PROC ; TiXmlAttribute::SetDocument, COMDAT
; _this$ = ecx

; 895  : 	void SetDocument( TiXmlDocument* doc )	{ document = doc; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [eax+16], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDocument@TiXmlAttribute@@QAEXPAVTiXmlDocument@@@Z ENDP ; TiXmlAttribute::SetDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??_GTiXmlAttribute@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlAttribute@@UAEPAXI@Z PROC			; TiXmlAttribute::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlAttribute@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlAttribute@@UAEPAXI@Z ENDP			; TiXmlAttribute::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlAttribute@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1
__ehfuncinfo$??1TiXmlAttribute@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TiXmlAttribute@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1TiXmlAttribute@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlAttribute@@UAE@XZ PROC				; TiXmlAttribute::~TiXmlAttribute, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlAttribute@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlBase@@UAE@XZ			; TiXmlBase::~TiXmlBase
__unwindfunclet$??1TiXmlAttribute@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlAttribute@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlAttribute@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlAttribute@@UAE@XZ ENDP				; TiXmlAttribute::~TiXmlAttribute
EXTRN	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z:PROC ; TiXmlAttributeSet::Find
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__name$ = 8						; size = 4
?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z PROC ; TiXmlAttributeSet::Find, COMDAT
; _this$ = ecx

; 936  : 	TiXmlAttribute*	Find( const char* _name ) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 937  : 		return const_cast< TiXmlAttribute* >( (const_cast< const TiXmlAttributeSet* >(this))->Find( _name ) );

	mov	eax, DWORD PTR __name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@TiXmlAttributeSet@@QBEPBVTiXmlAttribute@@PBD@Z ; TiXmlAttributeSet::Find

; 938  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Find@TiXmlAttributeSet@@QAEPAVTiXmlAttribute@@PBD@Z ENDP ; TiXmlAttributeSet::Find
_TEXT	ENDS
PUBLIC	??_7TiXmlComment@@6B@				; TiXmlComment::`vftable'
PUBLIC	??_R4TiXmlComment@@6B@				; TiXmlComment::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlComment@@@8			; TiXmlComment `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlComment@@8				; TiXmlComment::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlComment@@8				; TiXmlComment::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlComment@@8			; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@TiXmlNode@@8			; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVTiXmlNode@@@8				; TiXmlNode `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlNode@@8				; TiXmlNode::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlNode@@8				; TiXmlNode::`RTTI Base Class Array'
PUBLIC	?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ	; TiXmlNode::ToDocument
PUBLIC	?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ	; TiXmlNode::ToDocument
PUBLIC	?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ	; TiXmlNode::ToElement
PUBLIC	?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ	; TiXmlNode::ToElement
PUBLIC	?ToComment@TiXmlComment@@UAEPAV1@XZ		; TiXmlComment::ToComment
PUBLIC	?ToComment@TiXmlComment@@UBEPBV1@XZ		; TiXmlComment::ToComment
PUBLIC	?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ	; TiXmlNode::ToUnknown
PUBLIC	?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ	; TiXmlNode::ToUnknown
PUBLIC	?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ		; TiXmlNode::ToText
PUBLIC	?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ		; TiXmlNode::ToText
PUBLIC	?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ ; TiXmlNode::ToDeclaration
PUBLIC	?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ ; TiXmlNode::ToDeclaration
PUBLIC	?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ ; TiXmlNode::ToStylesheetReference
PUBLIC	?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ ; TiXmlNode::ToStylesheetReference
EXTRN	??0TiXmlNode@@IAE@W4NodeType@0@@Z:PROC		; TiXmlNode::TiXmlNode
EXTRN	??_ETiXmlComment@@UAEPAXI@Z:PROC		; TiXmlComment::`vector deleting destructor'
EXTRN	?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z:PROC	; TiXmlComment::Print
EXTRN	?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ:PROC	; TiXmlComment::Clone
EXTRN	?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlComment::Accept
;	COMDAT ??_R2TiXmlNode@@8
rdata$r	SEGMENT
??_R2TiXmlNode@@8 DD FLAT:??_R1A@?0A@EA@TiXmlNode@@8	; TiXmlNode::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlNode@@8
rdata$r	SEGMENT
??_R3TiXmlNode@@8 DD 00H				; TiXmlNode::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlNode@@@8
_DATA	SEGMENT
??_R0?AVTiXmlNode@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlNode `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlNode@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlNode@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlNode@@8 DD FLAT:??_R0?AVTiXmlNode@@@8 ; TiXmlNode::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlNode@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@TiXmlComment@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlComment@@8 DD FLAT:??_R0?AVTiXmlComment@@@8 ; TiXmlComment::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlComment@@8
rdata$r	SEGMENT
??_R2TiXmlComment@@8 DD FLAT:??_R1A@?0A@EA@TiXmlComment@@8 ; TiXmlComment::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlComment@@8
rdata$r	SEGMENT
??_R3TiXmlComment@@8 DD 00H				; TiXmlComment::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlComment@@@8
_DATA	SEGMENT
??_R0?AVTiXmlComment@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlComment `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlComment@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlComment@@6B@
rdata$r	SEGMENT
??_R4TiXmlComment@@6B@ DD 00H				; TiXmlComment::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlComment@@@8
	DD	FLAT:??_R3TiXmlComment@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlComment@@6B@
CONST	SEGMENT
??_7TiXmlComment@@6B@ DD FLAT:??_R4TiXmlComment@@6B@	; TiXmlComment::`vftable'
	DD	FLAT:??_ETiXmlComment@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlComment@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlComment@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlComment@@UAEPAV1@XZ
	DD	FLAT:?ToComment@TiXmlComment@@UBEPBV1@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlComment@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlComment@@UBE_NPAVTiXmlVisitor@@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0TiXmlComment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TiXmlComment@@QAE@XZ PROC				; TiXmlComment::TiXmlComment, COMDAT
; _this$ = ecx

; 1175 : 	TiXmlComment() : TiXmlNode( TiXmlNode::COMMENT ) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlComment@@QAE@XZ ENDP				; TiXmlComment::TiXmlComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ PROC	; TiXmlNode::ToDocument, COMDAT
; _this$ = ecx

; 713  : 	virtual const TiXmlDocument*    ToDocument()    const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ ENDP	; TiXmlNode::ToDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ PROC	; TiXmlNode::ToElement, COMDAT
; _this$ = ecx

; 714  : 	virtual const TiXmlElement*     ToElement()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ ENDP	; TiXmlNode::ToElement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ PROC	; TiXmlNode::ToUnknown, COMDAT
; _this$ = ecx

; 716  : 	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ ENDP	; TiXmlNode::ToUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ PROC		; TiXmlNode::ToText, COMDAT
; _this$ = ecx

; 717  : 	virtual const TiXmlText*        ToText()        const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ ENDP		; TiXmlNode::ToText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ PROC ; TiXmlNode::ToDeclaration, COMDAT
; _this$ = ecx

; 718  : 	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ ENDP ; TiXmlNode::ToDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ PROC ; TiXmlNode::ToStylesheetReference, COMDAT
; _this$ = ecx

; 719  : 	virtual const TiXmlStylesheetReference* ToStylesheetReference() const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ ENDP ; TiXmlNode::ToStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ PROC	; TiXmlNode::ToDocument, COMDAT
; _this$ = ecx

; 721  : 	virtual TiXmlDocument*          ToDocument()    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ ENDP	; TiXmlNode::ToDocument
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ PROC	; TiXmlNode::ToElement, COMDAT
; _this$ = ecx

; 722  : 	virtual TiXmlElement*           ToElement()	    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ ENDP	; TiXmlNode::ToElement
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ PROC	; TiXmlNode::ToUnknown, COMDAT
; _this$ = ecx

; 724  : 	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ ENDP	; TiXmlNode::ToUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ PROC		; TiXmlNode::ToText, COMDAT
; _this$ = ecx

; 725  : 	virtual TiXmlText*	            ToText()        { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ ENDP		; TiXmlNode::ToText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ PROC ; TiXmlNode::ToDeclaration, COMDAT
; _this$ = ecx

; 726  : 	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ ENDP ; TiXmlNode::ToDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ PROC ; TiXmlNode::ToStylesheetReference, COMDAT
; _this$ = ecx

; 727  : 	virtual TiXmlStylesheetReference*       ToStylesheetReference() { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ ENDP ; TiXmlNode::ToStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlComment@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlComment@@UBEPBV1@XZ PROC		; TiXmlComment::ToComment, COMDAT
; _this$ = ecx

; 1195 : 	virtual const TiXmlComment*  ToComment() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlComment@@UBEPBV1@XZ ENDP		; TiXmlComment::ToComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlComment@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlComment@@UAEPAV1@XZ PROC		; TiXmlComment::ToComment, COMDAT
; _this$ = ecx

; 1196 : 	virtual TiXmlComment*  ToComment() { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlComment@@UAEPAV1@XZ ENDP		; TiXmlComment::ToComment
_TEXT	ENDS
PUBLIC	??1TiXmlComment@@UAE@XZ				; TiXmlComment::~TiXmlComment
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlComment@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlComment@@UAEPAXI@Z PROC			; TiXmlComment::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlComment@@UAE@XZ			; TiXmlComment::~TiXmlComment
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlComment@@UAEPAXI@Z ENDP			; TiXmlComment::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1TiXmlNode@@UAE@XZ:PROC			; TiXmlNode::~TiXmlNode
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1TiXmlComment@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlComment@@UAE@XZ PROC				; TiXmlComment::~TiXmlComment, COMDAT
; _this$ = ecx

; 1183 : 	virtual ~TiXmlComment()	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlComment@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlComment@@UAE@XZ ENDP				; TiXmlComment::~TiXmlComment
_TEXT	ENDS
PUBLIC	?SetValue@TiXmlNode@@QAEXPBD@Z			; TiXmlNode::SetValue
PUBLIC	??_7TiXmlText@@6B@				; TiXmlText::`vftable'
PUBLIC	??_R4TiXmlText@@6B@				; TiXmlText::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlText@@@8				; TiXmlText `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlText@@8				; TiXmlText::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlText@@8				; TiXmlText::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlText@@8			; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ	; TiXmlNode::ToComment
PUBLIC	?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ	; TiXmlNode::ToComment
PUBLIC	?ToText@TiXmlText@@UAEPAV1@XZ			; TiXmlText::ToText
PUBLIC	?ToText@TiXmlText@@UBEPBV1@XZ			; TiXmlText::ToText
EXTRN	??_ETiXmlText@@UAEPAXI@Z:PROC			; TiXmlText::`vector deleting destructor'
EXTRN	?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z:PROC	; TiXmlText::Print
EXTRN	?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ:PROC	; TiXmlText::Clone
EXTRN	?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlText::Accept
;	COMDAT ??_R1A@?0A@EA@TiXmlText@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlText@@8 DD FLAT:??_R0?AVTiXmlText@@@8 ; TiXmlText::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlText@@8
rdata$r	SEGMENT
??_R2TiXmlText@@8 DD FLAT:??_R1A@?0A@EA@TiXmlText@@8	; TiXmlText::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlText@@8
rdata$r	SEGMENT
??_R3TiXmlText@@8 DD 00H				; TiXmlText::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlText@@@8
_DATA	SEGMENT
??_R0?AVTiXmlText@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlText `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlText@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlText@@6B@
rdata$r	SEGMENT
??_R4TiXmlText@@6B@ DD 00H				; TiXmlText::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlText@@@8
	DD	FLAT:??_R3TiXmlText@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlText@@6B@
CONST	SEGMENT
??_7TiXmlText@@6B@ DD FLAT:??_R4TiXmlText@@6B@		; TiXmlText::`vftable'
	DD	FLAT:??_ETiXmlText@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlText@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlText@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlText@@UAEPAV1@XZ
	DD	FLAT:?ToText@TiXmlText@@UBEPBV1@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlText@@MBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlText@@UBE_NPAVTiXmlVisitor@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlText@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlText@@QAE@PBD@Z$0
__ehfuncinfo$??0TiXmlText@@QAE@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0TiXmlText@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TiXmlText@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_initValue$ = 8						; size = 4
??0TiXmlText@@QAE@PBD@Z PROC				; TiXmlText::TiXmlText, COMDAT
; _this$ = ecx

; 1230 : 	{

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlText@@QAE@PBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlText@@6B@

; 1231 : 		SetValue( initValue );

	mov	eax, DWORD PTR _initValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetValue@TiXmlNode@@QAEXPBD@Z		; TiXmlNode::SetValue

; 1232 : 		cdata = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 1233 : 	}

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlText@@QAE@PBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__ehhandler$??0TiXmlText@@QAE@PBD@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlText@@QAE@PBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlText@@QAE@PBD@Z ENDP				; TiXmlText::TiXmlText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetValue@TiXmlNode@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__value$ = 8						; size = 4
?SetValue@TiXmlNode@@QAEXPBD@Z PROC			; TiXmlNode::SetValue, COMDAT
; _this$ = ecx

; 524  : 	void SetValue(const char * _value) { value = _value;}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetValue@TiXmlNode@@QAEXPBD@Z ENDP			; TiXmlNode::SetValue
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ PROC	; TiXmlNode::ToComment, COMDAT
; _this$ = ecx

; 715  : 	virtual const TiXmlComment*     ToComment()     const { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ ENDP	; TiXmlNode::ToComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ PROC	; TiXmlNode::ToComment, COMDAT
; _this$ = ecx

; 723  : 	virtual TiXmlComment*           ToComment()     { return 0; } ///< Cast to a more defined type. Will return null if not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ ENDP	; TiXmlNode::ToComment
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetCDATA@TiXmlText@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__cdata$ = 8						; size = 1
?SetCDATA@TiXmlText@@QAEX_N@Z PROC			; TiXmlText::SetCDATA, COMDAT
; _this$ = ecx

; 1254 : 	void SetCDATA( bool _cdata )	{ cdata = _cdata; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR __cdata$[ebp]
	mov	BYTE PTR [eax+44], cl
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCDATA@TiXmlText@@QAEX_N@Z ENDP			; TiXmlText::SetCDATA
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlText@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlText@@UBEPBV1@XZ PROC			; TiXmlText::ToText, COMDAT
; _this$ = ecx

; 1258 : 	virtual const TiXmlText* ToText() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlText@@UBEPBV1@XZ ENDP			; TiXmlText::ToText
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToText@TiXmlText@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToText@TiXmlText@@UAEPAV1@XZ PROC			; TiXmlText::ToText, COMDAT
; _this$ = ecx

; 1259 : 	virtual TiXmlText*       ToText()       { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToText@TiXmlText@@UAEPAV1@XZ ENDP			; TiXmlText::ToText
_TEXT	ENDS
PUBLIC	??1TiXmlText@@UAE@XZ				; TiXmlText::~TiXmlText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlText@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlText@@UAEPAXI@Z PROC				; TiXmlText::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlText@@UAE@XZ			; TiXmlText::~TiXmlText
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlText@@UAEPAXI@Z ENDP				; TiXmlText::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1TiXmlText@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlText@@UAE@XZ PROC				; TiXmlText::~TiXmlText, COMDAT
; _this$ = ecx

; 1234 : 	virtual ~TiXmlText() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlText@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlText@@UAE@XZ ENDP				; TiXmlText::~TiXmlText
_TEXT	ENDS
PUBLIC	??_7TiXmlDeclaration@@6B@			; TiXmlDeclaration::`vftable'
PUBLIC	??_R4TiXmlDeclaration@@6B@			; TiXmlDeclaration::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlDeclaration@@@8			; TiXmlDeclaration `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlDeclaration@@8			; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlDeclaration@@8			; TiXmlDeclaration::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlDeclaration@@8		; TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z	; TiXmlDeclaration::Print
PUBLIC	?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ	; TiXmlDeclaration::ToDeclaration
PUBLIC	?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ	; TiXmlDeclaration::ToDeclaration
EXTRN	??_ETiXmlDeclaration@@UAEPAXI@Z:PROC		; TiXmlDeclaration::`vector deleting destructor'
EXTRN	?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ:PROC ; TiXmlDeclaration::Clone
EXTRN	?Accept@TiXmlDeclaration@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlDeclaration::Accept
EXTRN	?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z:PROC ; TiXmlDeclaration::Print
;	COMDAT ??_R1A@?0A@EA@TiXmlDeclaration@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlDeclaration@@8 DD FLAT:??_R0?AVTiXmlDeclaration@@@8 ; TiXmlDeclaration::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlDeclaration@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlDeclaration@@8
rdata$r	SEGMENT
??_R2TiXmlDeclaration@@8 DD FLAT:??_R1A@?0A@EA@TiXmlDeclaration@@8 ; TiXmlDeclaration::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlDeclaration@@8
rdata$r	SEGMENT
??_R3TiXmlDeclaration@@8 DD 00H				; TiXmlDeclaration::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlDeclaration@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlDeclaration@@@8
_DATA	SEGMENT
??_R0?AVTiXmlDeclaration@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlDeclaration `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlDeclaration@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlDeclaration@@6B@
rdata$r	SEGMENT
??_R4TiXmlDeclaration@@6B@ DD 00H			; TiXmlDeclaration::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlDeclaration@@@8
	DD	FLAT:??_R3TiXmlDeclaration@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlDeclaration@@6B@
CONST	SEGMENT
??_7TiXmlDeclaration@@6B@ DD FLAT:??_R4TiXmlDeclaration@@6B@ ; TiXmlDeclaration::`vftable'
	DD	FLAT:??_ETiXmlDeclaration@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlDeclaration@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ
	DD	FLAT:?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlDeclaration@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlDeclaration@@UBE_NPAVTiXmlVisitor@@@Z
	DD	FLAT:?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlDeclaration@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2
__ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0TiXmlDeclaration@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TiXmlDeclaration@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlDeclaration@@QAE@XZ PROC			; TiXmlDeclaration::TiXmlDeclaration, COMDAT
; _this$ = ecx

; 1298 : 	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::DECLARATION ) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlDeclaration@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDeclaration@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??0TiXmlDeclaration@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlDeclaration@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlDeclaration@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlDeclaration@@QAE@XZ ENDP			; TiXmlDeclaration::TiXmlDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Encoding@TiXmlDeclaration@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Encoding@TiXmlDeclaration@@QBEPBDXZ PROC		; TiXmlDeclaration::Encoding, COMDAT
; _this$ = ecx

; 1320 : 	const char *Encoding() const		{ return encoding.c_str (); }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?c_str@TiXmlString@@QBEPBDXZ		; TiXmlString::c_str
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Encoding@TiXmlDeclaration@@QBEPBDXZ ENDP		; TiXmlDeclaration::Encoding
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z PROC	; TiXmlDeclaration::Print, COMDAT
; _this$ = ecx

; 1328 : 	virtual void Print( FILE* cfile, int depth ) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1329 : 		Print( cfile, depth, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1330 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlDeclaration@@UBEXPAU_iobuf@@H@Z ENDP	; TiXmlDeclaration::Print
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ PROC	; TiXmlDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 1334 : 	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlDeclaration@@UBEPBV1@XZ ENDP	; TiXmlDeclaration::ToDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ PROC	; TiXmlDeclaration::ToDeclaration, COMDAT
; _this$ = ecx

; 1335 : 	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToDeclaration@TiXmlDeclaration@@UAEPAV1@XZ ENDP	; TiXmlDeclaration::ToDeclaration
_TEXT	ENDS
PUBLIC	??1TiXmlDeclaration@@UAE@XZ			; TiXmlDeclaration::~TiXmlDeclaration
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlDeclaration@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlDeclaration@@UAEPAXI@Z PROC			; TiXmlDeclaration::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlDeclaration@@UAE@XZ		; TiXmlDeclaration::~TiXmlDeclaration
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlDeclaration@@UAEPAXI@Z ENDP			; TiXmlDeclaration::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlDeclaration@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2
__ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??1TiXmlDeclaration@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1TiXmlDeclaration@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlDeclaration@@UAE@XZ PROC			; TiXmlDeclaration::~TiXmlDeclaration, COMDAT
; _this$ = ecx

; 1315 : 	virtual ~TiXmlDeclaration()	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlDeclaration@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlDeclaration@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__unwindfunclet$??1TiXmlDeclaration@@UAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlDeclaration@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlDeclaration@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlDeclaration@@UAE@XZ ENDP			; TiXmlDeclaration::~TiXmlDeclaration
PUBLIC	??_7TiXmlStylesheetReference@@6B@		; TiXmlStylesheetReference::`vftable'
PUBLIC	??_R4TiXmlStylesheetReference@@6B@		; TiXmlStylesheetReference::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlStylesheetReference@@@8		; TiXmlStylesheetReference `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlStylesheetReference@@8		; TiXmlStylesheetReference::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlStylesheetReference@@8		; TiXmlStylesheetReference::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlStylesheetReference@@8	; TiXmlStylesheetReference::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@H@Z ; TiXmlStylesheetReference::Print
PUBLIC	?ToStylesheetReference@TiXmlStylesheetReference@@UAEPAV1@XZ ; TiXmlStylesheetReference::ToStylesheetReference
PUBLIC	?ToStylesheetReference@TiXmlStylesheetReference@@UBEPBV1@XZ ; TiXmlStylesheetReference::ToStylesheetReference
EXTRN	??_ETiXmlStylesheetReference@@UAEPAXI@Z:PROC	; TiXmlStylesheetReference::`vector deleting destructor'
EXTRN	?Clone@TiXmlStylesheetReference@@UBEPAVTiXmlNode@@XZ:PROC ; TiXmlStylesheetReference::Clone
EXTRN	?Accept@TiXmlStylesheetReference@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlStylesheetReference::Accept
EXTRN	?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z:PROC ; TiXmlStylesheetReference::Print
;	COMDAT ??_R1A@?0A@EA@TiXmlStylesheetReference@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlStylesheetReference@@8 DD FLAT:??_R0?AVTiXmlStylesheetReference@@@8 ; TiXmlStylesheetReference::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlStylesheetReference@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlStylesheetReference@@8
rdata$r	SEGMENT
??_R2TiXmlStylesheetReference@@8 DD FLAT:??_R1A@?0A@EA@TiXmlStylesheetReference@@8 ; TiXmlStylesheetReference::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlStylesheetReference@@8
rdata$r	SEGMENT
??_R3TiXmlStylesheetReference@@8 DD 00H			; TiXmlStylesheetReference::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlStylesheetReference@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlStylesheetReference@@@8
_DATA	SEGMENT
??_R0?AVTiXmlStylesheetReference@@@8 DD FLAT:??_7type_info@@6B@ ; TiXmlStylesheetReference `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlStylesheetReference@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlStylesheetReference@@6B@
rdata$r	SEGMENT
??_R4TiXmlStylesheetReference@@6B@ DD 00H		; TiXmlStylesheetReference::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlStylesheetReference@@@8
	DD	FLAT:??_R3TiXmlStylesheetReference@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlStylesheetReference@@6B@
CONST	SEGMENT
??_7TiXmlStylesheetReference@@6B@ DD FLAT:??_R4TiXmlStylesheetReference@@6B@ ; TiXmlStylesheetReference::`vftable'
	DD	FLAT:??_ETiXmlStylesheetReference@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlStylesheetReference@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UAEPAVTiXmlUnknown@@XZ
	DD	FLAT:?ToUnknown@TiXmlNode@@UBEPBVTiXmlUnknown@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlStylesheetReference@@UAEPAV1@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlStylesheetReference@@UBEPBV1@XZ
	DD	FLAT:?Clone@TiXmlStylesheetReference@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlStylesheetReference@@UBE_NPAVTiXmlVisitor@@@Z
	DD	FLAT:?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@HPAVTiXmlString@@@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0TiXmlStylesheetReference@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0TiXmlStylesheetReference@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0TiXmlStylesheetReference@@QAE@XZ$1
__ehfuncinfo$??0TiXmlStylesheetReference@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0TiXmlStylesheetReference@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0TiXmlStylesheetReference@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0TiXmlStylesheetReference@@QAE@XZ PROC		; TiXmlStylesheetReference::TiXmlStylesheetReference, COMDAT
; _this$ = ecx

; 1368 : 	TiXmlStylesheetReference()   : TiXmlNode( TiXmlNode::STYLESHEETREFERENCE ) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0TiXmlStylesheetReference@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlStylesheetReference@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0TiXmlString@@QAE@XZ			; TiXmlString::TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0TiXmlStylesheetReference@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??0TiXmlStylesheetReference@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??0TiXmlStylesheetReference@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0TiXmlStylesheetReference@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0TiXmlStylesheetReference@@QAE@XZ ENDP		; TiXmlStylesheetReference::TiXmlStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cfile$ = 8						; size = 4
_depth$ = 12						; size = 4
?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@H@Z PROC ; TiXmlStylesheetReference::Print, COMDAT
; _this$ = ecx

; 1394 : 	virtual void Print( FILE* cfile, int depth ) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1395 : 		Print( cfile, depth, 0 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cfile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+76]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1396 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Print@TiXmlStylesheetReference@@UBEXPAU_iobuf@@H@Z ENDP ; TiXmlStylesheetReference::Print
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToStylesheetReference@TiXmlStylesheetReference@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToStylesheetReference@TiXmlStylesheetReference@@UBEPBV1@XZ PROC ; TiXmlStylesheetReference::ToStylesheetReference, COMDAT
; _this$ = ecx

; 1400 : 	virtual const TiXmlStylesheetReference* ToStylesheetReference() const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStylesheetReference@TiXmlStylesheetReference@@UBEPBV1@XZ ENDP ; TiXmlStylesheetReference::ToStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToStylesheetReference@TiXmlStylesheetReference@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToStylesheetReference@TiXmlStylesheetReference@@UAEPAV1@XZ PROC ; TiXmlStylesheetReference::ToStylesheetReference, COMDAT
; _this$ = ecx

; 1401 : 	virtual TiXmlStylesheetReference*       ToStylesheetReference()       { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToStylesheetReference@TiXmlStylesheetReference@@UAEPAV1@XZ ENDP ; TiXmlStylesheetReference::ToStylesheetReference
_TEXT	ENDS
PUBLIC	??1TiXmlStylesheetReference@@UAE@XZ		; TiXmlStylesheetReference::~TiXmlStylesheetReference
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlStylesheetReference@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlStylesheetReference@@UAEPAXI@Z PROC		; TiXmlStylesheetReference::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlStylesheetReference@@UAE@XZ	; TiXmlStylesheetReference::~TiXmlStylesheetReference
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@6
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@6:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlStylesheetReference@@UAEPAXI@Z ENDP		; TiXmlStylesheetReference::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1TiXmlStylesheetReference@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1TiXmlStylesheetReference@@UAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1TiXmlStylesheetReference@@UAE@XZ$1
__ehfuncinfo$??1TiXmlStylesheetReference@@UAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1TiXmlStylesheetReference@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1TiXmlStylesheetReference@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1TiXmlStylesheetReference@@UAE@XZ PROC		; TiXmlStylesheetReference::~TiXmlStylesheetReference, COMDAT
; _this$ = ecx

; 1383 : 	virtual ~TiXmlStylesheetReference()	{}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1TiXmlStylesheetReference@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlStylesheetReference@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1TiXmlStylesheetReference@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
__unwindfunclet$??1TiXmlStylesheetReference@@UAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1TiXmlString@@QAE@XZ			; TiXmlString::~TiXmlString
__ehhandler$??1TiXmlStylesheetReference@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1TiXmlStylesheetReference@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1TiXmlStylesheetReference@@UAE@XZ ENDP		; TiXmlStylesheetReference::~TiXmlStylesheetReference
PUBLIC	??_7TiXmlUnknown@@6B@				; TiXmlUnknown::`vftable'
PUBLIC	??_R4TiXmlUnknown@@6B@				; TiXmlUnknown::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVTiXmlUnknown@@@8			; TiXmlUnknown `RTTI Type Descriptor'
PUBLIC	??_R3TiXmlUnknown@@8				; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2TiXmlUnknown@@8				; TiXmlUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@TiXmlUnknown@@8			; TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ		; TiXmlUnknown::ToUnknown
PUBLIC	?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ		; TiXmlUnknown::ToUnknown
EXTRN	??_ETiXmlUnknown@@UAEPAXI@Z:PROC		; TiXmlUnknown::`vector deleting destructor'
EXTRN	?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z:PROC	; TiXmlUnknown::Print
EXTRN	?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ:PROC	; TiXmlUnknown::Clone
EXTRN	?Accept@TiXmlUnknown@@UBE_NPAVTiXmlVisitor@@@Z:PROC ; TiXmlUnknown::Accept
;	COMDAT ??_R1A@?0A@EA@TiXmlUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TiXmlUnknown@@8 DD FLAT:??_R0?AVTiXmlUnknown@@@8 ; TiXmlUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TiXmlUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2TiXmlUnknown@@8
rdata$r	SEGMENT
??_R2TiXmlUnknown@@8 DD FLAT:??_R1A@?0A@EA@TiXmlUnknown@@8 ; TiXmlUnknown::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@TiXmlNode@@8
	DD	FLAT:??_R1A@?0A@EA@TiXmlBase@@8
rdata$r	ENDS
;	COMDAT ??_R3TiXmlUnknown@@8
rdata$r	SEGMENT
??_R3TiXmlUnknown@@8 DD 00H				; TiXmlUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2TiXmlUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVTiXmlUnknown@@@8
_DATA	SEGMENT
??_R0?AVTiXmlUnknown@@@8 DD FLAT:??_7type_info@@6B@	; TiXmlUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTiXmlUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R4TiXmlUnknown@@6B@
rdata$r	SEGMENT
??_R4TiXmlUnknown@@6B@ DD 00H				; TiXmlUnknown::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTiXmlUnknown@@@8
	DD	FLAT:??_R3TiXmlUnknown@@8
rdata$r	ENDS
;	COMDAT ??_7TiXmlUnknown@@6B@
CONST	SEGMENT
??_7TiXmlUnknown@@6B@ DD FLAT:??_R4TiXmlUnknown@@6B@	; TiXmlUnknown::`vftable'
	DD	FLAT:??_ETiXmlUnknown@@UAEPAXI@Z
	DD	FLAT:?Print@TiXmlUnknown@@UBEXPAU_iobuf@@H@Z
	DD	FLAT:?Parse@TiXmlUnknown@@UAEPBDPBDPAVTiXmlParsingData@@W4TiXmlEncoding@@@Z
	DD	FLAT:?ToDocument@TiXmlNode@@UAEPAVTiXmlDocument@@XZ
	DD	FLAT:?ToDocument@TiXmlNode@@UBEPBVTiXmlDocument@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UAEPAVTiXmlElement@@XZ
	DD	FLAT:?ToElement@TiXmlNode@@UBEPBVTiXmlElement@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UAEPAVTiXmlComment@@XZ
	DD	FLAT:?ToComment@TiXmlNode@@UBEPBVTiXmlComment@@XZ
	DD	FLAT:?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ
	DD	FLAT:?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ
	DD	FLAT:?ToText@TiXmlNode@@UAEPAVTiXmlText@@XZ
	DD	FLAT:?ToText@TiXmlNode@@UBEPBVTiXmlText@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UAEPAVTiXmlDeclaration@@XZ
	DD	FLAT:?ToDeclaration@TiXmlNode@@UBEPBVTiXmlDeclaration@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UAEPAVTiXmlStylesheetReference@@XZ
	DD	FLAT:?ToStylesheetReference@TiXmlNode@@UBEPBVTiXmlStylesheetReference@@XZ
	DD	FLAT:?Clone@TiXmlUnknown@@UBEPAVTiXmlNode@@XZ
	DD	FLAT:?Accept@TiXmlUnknown@@UBE_NPAVTiXmlVisitor@@@Z
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0TiXmlUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0TiXmlUnknown@@QAE@XZ PROC				; TiXmlUnknown::TiXmlUnknown, COMDAT
; _this$ = ecx

; 1430 : 	TiXmlUnknown() : TiXmlNode( TiXmlNode::UNKNOWN )	{}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0TiXmlNode@@IAE@W4NodeType@0@@Z	; TiXmlNode::TiXmlNode
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlUnknown@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0TiXmlUnknown@@QAE@XZ ENDP				; TiXmlUnknown::TiXmlUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ PROC		; TiXmlUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1443 : 	virtual const TiXmlUnknown*     ToUnknown()     const { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlUnknown@@UBEPBV1@XZ ENDP		; TiXmlUnknown::ToUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ PROC		; TiXmlUnknown::ToUnknown, COMDAT
; _this$ = ecx

; 1444 : 	virtual TiXmlUnknown*           ToUnknown()	    { return this; } ///< Cast to a more defined type. Will return null not of the requested type.

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ToUnknown@TiXmlUnknown@@UAEPAV1@XZ ENDP		; TiXmlUnknown::ToUnknown
_TEXT	ENDS
PUBLIC	??1TiXmlUnknown@@UAE@XZ				; TiXmlUnknown::~TiXmlUnknown
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GTiXmlUnknown@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GTiXmlUnknown@@UAEPAXI@Z PROC			; TiXmlUnknown::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlUnknown@@UAE@XZ			; TiXmlUnknown::~TiXmlUnknown
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@7
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTiXmlUnknown@@UAEPAXI@Z ENDP			; TiXmlUnknown::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1TiXmlUnknown@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1TiXmlUnknown@@UAE@XZ PROC				; TiXmlUnknown::~TiXmlUnknown, COMDAT
; _this$ = ecx

; 1431 : 	virtual ~TiXmlUnknown() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TiXmlUnknown@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TiXmlNode@@UAE@XZ			; TiXmlNode::~TiXmlNode
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1TiXmlUnknown@@UAE@XZ ENDP				; TiXmlUnknown::~TiXmlUnknown
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?TabSize@TiXmlDocument@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?TabSize@TiXmlDocument@@QBEHXZ PROC			; TiXmlDocument::TabSize, COMDAT
; _this$ = ecx

; 1583 : 	int TabSize() const	{ return tabsize; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+56]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?TabSize@TiXmlDocument@@QBEHXZ ENDP			; TiXmlDocument::TabSize
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ClearError@TiXmlDocument@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearError@TiXmlDocument@@QAEXXZ PROC			; TiXmlDocument::ClearError, COMDAT
; _this$ = ecx

; 1588 : 	void ClearError()						{	error = false;

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0

; 1589 : 												errorId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 1590 : 												errorDesc = "";

	push	OFFSET ??_C@_00CNPNBAHC@?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??4TiXmlString@@QAEAAV0@PBD@Z		; TiXmlString::operator=

; 1591 : 												errorLocation.row = errorLocation.col = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 1592 : 												//errorLocation.last = 0;
; 1593 : 											}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearError@TiXmlDocument@@QAEXXZ ENDP			; TiXmlDocument::ClearError
_TEXT	ENDS
END
