; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\CBBFont.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06LKFDKFAB@?$CFs?4dat?$AA@		; `string'
PUBLIC	??_C@_06PJLGDGG@?$CFs?4png?$AA@			; `string'
PUBLIC	__real@3c23d70a
PUBLIC	__real@00000000
PUBLIC	??0CBBFont@@QAE@PAUIDirect3DDevice8@@PAD@Z	; CBBFont::CBBFont
EXTRN	_memset:PROC
EXTRN	_sprintf:PROC
EXTRN	_malloc:PROC
EXTRN	_strlen:PROC
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_06LKFDKFAB@?$CFs?4dat?$AA@
; File d:\vice-players-master\client\cbbfont.cpp
CONST	SEGMENT
??_C@_06LKFDKFAB@?$CFs?4dat?$AA@ DB '%s.dat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJLGDGG@?$CFs?4png?$AA@
CONST	SEGMENT
??_C@_06PJLGDGG@?$CFs?4png?$AA@ DB '%s.png', 00H	; `string'
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CBBFont@@QAE@PAUIDirect3DDevice8@@PAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pDevice$ = 8						; size = 4
_pFileName$ = 12					; size = 4
??0CBBFont@@QAE@PAUIDirect3DDevice8@@PAD@Z PROC		; CBBFont::CBBFont, COMDAT
; _this$ = ecx

; 11   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 12   : 	m_pDevice			= pDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pDevice$[ebp]
	mov	DWORD PTR [eax], ecx

; 13   : 	m_pTexture			= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 14   : 	m_pVB				= NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 15   : 	m_dwSavedStates		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 16   : 	m_dwFontStates		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 17   : 	m_fCharWidth		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+284]

; 18   : 	m_fCharHeight		= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+288]

; 19   : 	m_fScale			= 0.01f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR __real@3c23d70a
	fstp	DWORD PTR [eax+292]

; 20   : 
; 21   : 	m_pTextureFileName = (char*)malloc(strlen(pFileName) + 5);

	mov	eax, DWORD PTR _pFileName$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 5
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 22   : 	m_pMetricsFileName = (char*)malloc(strlen(pFileName) + 5);

	mov	eax, DWORD PTR _pFileName$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, 5
	push	eax
	call	_malloc
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 23   : 	sprintf(m_pTextureFileName, "%s.png", pFileName);

	mov	eax, DWORD PTR _pFileName$[ebp]
	push	eax
	push	OFFSET ??_C@_06PJLGDGG@?$CFs?4png?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 24   : 	sprintf(m_pMetricsFileName, "%s.dat", pFileName);

	mov	eax, DWORD PTR _pFileName$[ebp]
	push	eax
	push	OFFSET ??_C@_06LKFDKFAB@?$CFs?4dat?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 25   : 	memset((void*)&m_Metrics, 0, sizeof(m_Metrics));

	push	255					; 000000ffH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 26   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0CBBFont@@QAE@PAUIDirect3DDevice8@@PAD@Z ENDP		; CBBFont::CBBFont
_TEXT	ENDS
PUBLIC	??1CBBFont@@QAE@XZ				; CBBFont::~CBBFont
EXTRN	_free:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CBBFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CBBFont@@QAE@XZ PROC					; CBBFont::~CBBFont, COMDAT
; _this$ = ecx

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 	m_pDevice->DeleteStateBlock(m_dwSavedStates);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+224]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 31   : 	m_pDevice->DeleteStateBlock(m_dwFontStates);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+224]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 32   : 	free(m_pTextureFileName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_free
	add	esp, 4

; 33   : 	free(m_pMetricsFileName);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_free
	add	esp, 4

; 34   : 	SAFE_RELEASE(m_pTexture);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@CBBFont
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN2@CBBFont:

; 35   : 	SAFE_RELEASE(m_pVB);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@CBBFont
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@CBBFont:

; 36   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBBFont@@QAE@XZ ENDP					; CBBFont::~CBBFont
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	__real@4030000000000000
PUBLIC	?Initialise@CBBFont@@QAEHXZ			; CBBFont::Initialise
EXTRN	_fclose:PROC
EXTRN	_fread:PROC
EXTRN	_fopen:PROC
EXTRN	_D3DXCreateTextureFromFileExA@56:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT __real@4030000000000000
CONST	SEGMENT
__real@4030000000000000 DQ 04030000000000000r	; 16
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Initialise@CBBFont@@QAEHXZ
_TEXT	SEGMENT
tv189 = -264						; size = 8
tv182 = -264						; size = 8
_f$ = -60						; size = 4
_desc$ = -48						; size = 32
_this$ = -8						; size = 4
?Initialise@CBBFont@@QAEHXZ PROC			; CBBFont::Initialise, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-264]
	mov	ecx, 66					; 00000042H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   : 	if(!m_pDevice)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN3@Initialise

; 41   : 		return FALSE;

	xor	eax, eax
	jmp	$LN4@Initialise
$LN3@Initialise:

; 42   : 
; 43   : 	D3DXCreateTextureFromFileEx(m_pDevice, m_pTextureFileName, D3DX_DEFAULT, D3DX_DEFAULT, 1, 0, D3DFMT_A8R8G8B8, D3DPOOL_MANAGED, D3DX_DEFAULT, D3DX_DEFAULT, 0, NULL, NULL, &m_pTexture);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	0
	push	0
	push	-1
	push	-1
	push	1
	push	21					; 00000015H
	push	0
	push	1
	push	-1
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_D3DXCreateTextureFromFileExA@56

; 44   : 
; 45   : 	m_pDevice->CreateVertexBuffer(((cMaxChars*6)+1)*sizeof(sVertex), D3DUSAGE_WRITEONLY|D3DUSAGE_DYNAMIC, cVertexFVF, D3DPOOL_DEFAULT, &m_pVB);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	push	0
	push	258					; 00000102H
	push	520					; 00000208H
	push	9620					; 00002594H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+92]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 
; 47   : 	D3DSURFACE_DESC desc;
; 48   : 	m_pTexture->GetLevelDesc(0, &desc);

	mov	esi, esp
	lea	eax, DWORD PTR _desc$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 	m_fCharWidth = desc.Width / 16.0f;

	mov	eax, DWORD PTR _desc$[ebp+24]
	mov	DWORD PTR tv182[ebp], eax
	mov	DWORD PTR tv182[ebp+4], 0
	fild	QWORD PTR tv182[ebp]
	fdiv	QWORD PTR __real@4030000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+284]

; 50   : 	m_fCharHeight = desc.Height / 16.0f;

	mov	eax, DWORD PTR _desc$[ebp+28]
	mov	DWORD PTR tv189[ebp], eax
	mov	DWORD PTR tv189[ebp+4], 0
	fild	QWORD PTR tv189[ebp]
	fdiv	QWORD PTR __real@4030000000000000
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+288]

; 51   : 
; 52   : 	FILE * f = fopen(m_pMetricsFileName, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _f$[ebp], eax

; 53   : 	if(f)

	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN2@Initialise

; 54   : 	{
; 55   : 		fread(&m_Metrics, 1, sizeof(m_Metrics), f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	255					; 000000ffH
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_fread
	add	esp, 16					; 00000010H

; 56   : 		fclose(f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 57   : 	}
; 58   : 	else

	jmp	SHORT $LN1@Initialise
$LN2@Initialise:

; 59   : 	{
; 60   : 		memset(&m_Metrics, (int)m_fCharWidth, sizeof(m_Metrics));

	push	255					; 000000ffH
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+284]
	call	__ftol2_sse
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
$LN1@Initialise:

; 61   : 	}
; 62   : 
; 63   : 	return TRUE;

	mov	eax, 1
$LN4@Initialise:

; 64   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Initialise
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@Initialise:
	DD	1
	DD	$LN7@Initialise
$LN7@Initialise:
	DD	-48					; ffffffd0H
	DD	32					; 00000020H
	DD	$LN6@Initialise
$LN6@Initialise:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
?Initialise@CBBFont@@QAEHXZ ENDP			; CBBFont::Initialise
_TEXT	ENDS
PUBLIC	?InitQuad@CBBFont@@QAEXDMMPAUsVertex@1@@Z	; CBBFont::InitQuad
PUBLIC	__real@4000000000000000
PUBLIC	?Draw@CBBFont@@QAEMPADMK@Z			; CBBFont::Draw
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Draw@CBBFont@@QAEMPADMK@Z
_TEXT	SEGMENT
tv216 = -268						; size = 4
tv198 = -268						; size = 4
_i$ = -68						; size = 4
_i$209284 = -56						; size = 4
_fX$ = -44						; size = 4
_vert_ptr$ = -32					; size = 4
_len$ = -20						; size = 4
_this$ = -8						; size = 4
_pText$ = 8						; size = 4
_fYOffset$ = 12						; size = 4
_dwColor$ = 16						; size = 4
?Draw@CBBFont@@QAEMPADMK@Z PROC				; CBBFont::Draw, COMDAT
; _this$ = ecx

; 67   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 68   : 	m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, dwColor);

	mov	esi, esp
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+200]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 69   : 
; 70   : 	int len = (int)strlen(pText);

	mov	eax, DWORD PTR _pText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 71   : 	if (len > cMaxChars)

	cmp	DWORD PTR _len$[ebp], 80		; 00000050H
	jle	SHORT $LN7@Draw

; 72   : 		len = cMaxChars;

	mov	DWORD PTR _len$[ebp], 80		; 00000050H
$LN7@Draw:

; 73   : 
; 74   : 	sVertex *vert_ptr;
; 75   : 	m_pVB->Lock(0, 0, (BYTE**)&vert_ptr, D3DLOCK_DISCARD);

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _vert_ptr$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 76   : 
; 77   : 	float fX = 0.0f;

	fldz
	fstp	DWORD PTR _fX$[ebp]

; 78   : 	for (int i=0; i<len; i++)

	mov	DWORD PTR _i$209284[ebp], 0
	jmp	SHORT $LN6@Draw
$LN5@Draw:
	mov	eax, DWORD PTR _i$209284[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209284[ebp], eax
$LN6@Draw:
	mov	eax, DWORD PTR _i$209284[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN4@Draw

; 79   : 	{
; 80   : 		fX += (float)m_Metrics[pText[i]] * m_fScale;

	mov	eax, DWORD PTR _pText$[ebp]
	add	eax, DWORD PTR _i$209284[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+ecx+28]
	mov	DWORD PTR tv198[ebp], eax
	fild	DWORD PTR tv198[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+292]
	fadd	DWORD PTR _fX$[ebp]
	fstp	DWORD PTR _fX$[ebp]

; 81   : 	}

	jmp	SHORT $LN5@Draw
$LN4@Draw:

; 82   : 	fX = -(fX / 2);

	fld	DWORD PTR _fX$[ebp]
	fdiv	QWORD PTR __real@4000000000000000
	fchs
	fstp	DWORD PTR _fX$[ebp]

; 83   : 
; 84   : 	int i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 85   : 	for (i=0; i<len; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@Draw
$LN2@Draw:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@Draw:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jge	SHORT $LN1@Draw

; 86   : 	{
; 87   : 		InitQuad(pText[i], fX, fYOffset, vert_ptr);

	mov	eax, DWORD PTR _vert_ptr$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _fYOffset$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fX$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pText$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitQuad@CBBFont@@QAEXDMMPAUsVertex@1@@Z ; CBBFont::InitQuad

; 88   : 		fX += (float)m_Metrics[pText[i]] * m_fScale;

	mov	eax, DWORD PTR _pText$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	movsx	eax, BYTE PTR [edx+ecx+28]
	mov	DWORD PTR tv216[ebp], eax
	fild	DWORD PTR tv216[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+292]
	fadd	DWORD PTR _fX$[ebp]
	fstp	DWORD PTR _fX$[ebp]

; 89   : 		vert_ptr += 6;

	mov	eax, DWORD PTR _vert_ptr$[ebp]
	add	eax, 120				; 00000078H
	mov	DWORD PTR _vert_ptr$[ebp], eax

; 90   : 	}

	jmp	SHORT $LN2@Draw
$LN1@Draw:

; 91   : 
; 92   : 	m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 93   : 
; 94   : 	m_pDevice->DrawPrimitive(D3DPT_TRIANGLELIST, 0, len*2);

	mov	eax, DWORD PTR _len$[ebp]
	shl	eax, 1
	mov	esi, esp
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 95   : 
; 96   : 	return fX;

	fld	DWORD PTR _fX$[ebp]

; 97   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Draw
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN12@Draw:
	DD	1
	DD	$LN11@Draw
$LN11@Draw:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@Draw
$LN10@Draw:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
?Draw@CBBFont@@QAEMPADMK@Z ENDP				; CBBFont::Draw
_TEXT	ENDS
PUBLIC	?Begin@CBBFont@@QAEXXZ				; CBBFont::Begin
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Begin@CBBFont@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Begin@CBBFont@@QAEXXZ PROC				; CBBFont::Begin, COMDAT
; _this$ = ecx

; 100  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 101  : 	if(!m_dwSavedStates || !m_dwFontStates)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@Begin
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN2@Begin
$LN1@Begin:

; 102  : 	{
; 103  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 104  : 		m_pDevice->SetRenderState(D3DRS_TEXTUREFACTOR, 0xFFFFFFFF);

	mov	esi, esp
	push	-1
	push	60					; 0000003cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 105  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 106  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 107  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_CURRENT);

	mov	esi, esp
	push	1
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 108  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 109  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);

	mov	esi, esp
	push	1
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 110  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);

	mov	esi, esp
	push	2
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 111  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 112  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_ONE);

	mov	esi, esp
	push	2
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 113  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_ZERO);

	mov	esi, esp
	push	1
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 114  : 		m_pDevice->SetTexture(0, NULL);

	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+244]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 115  : 		m_pDevice->SetStreamSource(0, NULL, 0);

	mov	esi, esp
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+332]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 116  : 		m_pDevice->SetVertexShader(cVertexFVF);

	mov	esi, esp
	push	258					; 00000102H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 117  : 		m_pDevice->EndStateBlock(&m_dwSavedStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 118  : 
; 119  : 		m_pDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 120  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 121  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 122  : 		m_pDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 123  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 124  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_TFACTOR);

	mov	esi, esp
	push	3
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 125  : 		m_pDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 126  : 		m_pDevice->SetRenderState(D3DRS_ALPHABLENDENABLE, TRUE);

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 127  : 		m_pDevice->SetRenderState(D3DRS_SRCBLEND, D3DBLEND_SRCALPHA);

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 128  : 		m_pDevice->SetRenderState(D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA);

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 129  : 		m_pDevice->SetTexture(0, m_pTexture);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+244]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 130  : 		m_pDevice->SetStreamSource(0, m_pVB, sizeof(sVertex));

	mov	esi, esp
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 131  : 		m_pDevice->SetVertexShader(cVertexFVF);

	mov	esi, esp
	push	258					; 00000102H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 132  : 		m_pDevice->EndStateBlock(&m_dwFontStates);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Begin:

; 133  : 	}
; 134  : 
; 135  : 	m_pDevice->CaptureStateBlock(m_dwSavedStates);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 136  : 	m_pDevice->ApplyStateBlock(m_dwFontStates);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 137  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Begin@CBBFont@@QAEXXZ ENDP				; CBBFont::Begin
_TEXT	ENDS
PUBLIC	?End@CBBFont@@QAEXXZ				; CBBFont::End
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?End@CBBFont@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?End@CBBFont@@QAEXXZ PROC				; CBBFont::End, COMDAT
; _this$ = ecx

; 140  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  : 	m_pDevice->ApplyStateBlock(m_dwSavedStates);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 142  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?End@CBBFont@@QAEXXZ ENDP				; CBBFont::End
_TEXT	ENDS
PUBLIC	?Initialise@sVertex@CBBFont@@QAEXMMMM@Z		; CBBFont::sVertex::Initialise
PUBLIC	__real@4070000000000000
PUBLIC	__real@3fb0000000000000
;	COMDAT __real@4070000000000000
CONST	SEGMENT
__real@4070000000000000 DQ 04070000000000000r	; 256
CONST	ENDS
;	COMDAT __real@3fb0000000000000
CONST	SEGMENT
__real@3fb0000000000000 DQ 03fb0000000000000r	; 0.0625
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?InitQuad@CBBFont@@QAEXDMMPAUsVertex@1@@Z
_TEXT	SEGMENT
tv201 = -280						; size = 4
tv193 = -280						; size = 4
tv189 = -280						; size = 4
tv179 = -280						; size = 4
_tv2$ = -80						; size = 4
_tv$ = -68						; size = 4
_tu2$ = -56						; size = 4
_tu$ = -44						; size = 4
_y$ = -32						; size = 4
_x2$ = -20						; size = 4
_this$ = -8						; size = 4
_c$ = 8							; size = 1
_x$ = 12						; size = 4
_y2$ = 16						; size = 4
_pVB$ = 20						; size = 4
?InitQuad@CBBFont@@QAEXDMMPAUsVertex@1@@Z PROC		; CBBFont::InitQuad, COMDAT
; _this$ = ecx

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 146  :    float x2  = x + ((float)m_Metrics[c] * m_fScale);

	movsx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+eax+28]
	mov	DWORD PTR tv179[ebp], edx
	fild	DWORD PTR tv179[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [eax+292]
	fadd	DWORD PTR _x$[ebp]
	fstp	DWORD PTR _x2$[ebp]

; 147  :    float y  = y2 + (m_fCharHeight * m_fScale);

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+288]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+292]
	fadd	DWORD PTR _y2$[ebp]
	fstp	DWORD PTR _y$[ebp]

; 148  :    float tu  = (c % 16) / 16.0f;

	movsx	eax, BYTE PTR _c$[ebp]
	and	eax, -2147483633			; 8000000fH
	jns	SHORT $LN3@InitQuad
	dec	eax
	or	eax, -16				; fffffff0H
	inc	eax
$LN3@InitQuad:
	mov	DWORD PTR tv189[ebp], eax
	fild	DWORD PTR tv189[ebp]
	fdiv	QWORD PTR __real@4030000000000000
	fstp	DWORD PTR _tu$[ebp]

; 149  :    float tu2 = tu + ((1 / 16.0f) * (m_Metrics[c] / m_fCharWidth));

	movsx	eax, BYTE PTR _c$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movsx	edx, BYTE PTR [ecx+eax+28]
	mov	DWORD PTR tv193[ebp], edx
	fild	DWORD PTR tv193[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [eax+284]
	fmul	QWORD PTR __real@3fb0000000000000
	fadd	DWORD PTR _tu$[ebp]
	fstp	DWORD PTR _tu2$[ebp]

; 150  :    float tv  = (c - (c % 16)) / 256.0f;

	movsx	eax, BYTE PTR _c$[ebp]
	movsx	ecx, BYTE PTR _c$[ebp]
	and	ecx, -2147483633			; 8000000fH
	jns	SHORT $LN4@InitQuad
	dec	ecx
	or	ecx, -16				; fffffff0H
	inc	ecx
$LN4@InitQuad:
	sub	eax, ecx
	mov	DWORD PTR tv201[ebp], eax
	fild	DWORD PTR tv201[ebp]
	fdiv	QWORD PTR __real@4070000000000000
	fstp	DWORD PTR _tv$[ebp]

; 151  :    float tv2 = tv + 1 / 16.0f;

	fld	DWORD PTR _tv$[ebp]
	fadd	QWORD PTR __real@3fb0000000000000
	fstp	DWORD PTR _tv2$[ebp]

; 152  : 
; 153  :    //                x   y   tu   tv
; 154  :    pVB[0].Initialise(x,  y2, tu,  tv2);

	push	ecx
	fld	DWORD PTR _tv2$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tu$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y2$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pVB$[ebp]
	call	?Initialise@sVertex@CBBFont@@QAEXMMMM@Z	; CBBFont::sVertex::Initialise

; 155  :    pVB[1].Initialise(x,  y,  tu,  tv);

	push	ecx
	fld	DWORD PTR _tv$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tu$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pVB$[ebp]
	add	ecx, 20					; 00000014H
	call	?Initialise@sVertex@CBBFont@@QAEXMMMM@Z	; CBBFont::sVertex::Initialise

; 156  :    pVB[2].Initialise(x2, y,  tu2, tv);

	push	ecx
	fld	DWORD PTR _tv$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tu2$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x2$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pVB$[ebp]
	add	ecx, 40					; 00000028H
	call	?Initialise@sVertex@CBBFont@@QAEXMMMM@Z	; CBBFont::sVertex::Initialise

; 157  :    pVB[3] = pVB[0];

	mov	eax, DWORD PTR _pVB$[ebp]
	mov	ecx, DWORD PTR _pVB$[ebp]
	add	ecx, 60					; 0000003cH
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 158  :    pVB[4] = pVB[2];

	mov	eax, DWORD PTR _pVB$[ebp]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR _pVB$[ebp]
	add	ecx, 80					; 00000050H
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 159  :    pVB[5].Initialise(x2, y2, tu2, tv2);

	push	ecx
	fld	DWORD PTR _tv2$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tu2$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _y2$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _x2$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pVB$[ebp]
	add	ecx, 100				; 00000064H
	call	?Initialise@sVertex@CBBFont@@QAEXMMMM@Z	; CBBFont::sVertex::Initialise

; 160  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?InitQuad@CBBFont@@QAEXDMMPAUsVertex@1@@Z ENDP		; CBBFont::InitQuad
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\cbbfont.h
_TEXT	ENDS
;	COMDAT ?Initialise@sVertex@CBBFont@@QAEXMMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fTu$ = 16						; size = 4
_fTv$ = 20						; size = 4
?Initialise@sVertex@CBBFont@@QAEXMMMM@Z PROC		; CBBFont::sVertex::Initialise, COMDAT
; _this$ = ecx

; 17   : 		{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 18   : 			x	= fX;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fX$[ebp]
	fstp	DWORD PTR [eax]

; 19   : 			y	= fY;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fY$[ebp]
	fstp	DWORD PTR [eax+4]

; 20   : 			z	= 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]

; 21   : 			tu	= fTu;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fTu$[ebp]
	fstp	DWORD PTR [eax+12]

; 22   : 			tv	= fTv;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fTv$[ebp]
	fstp	DWORD PTR [eax+16]

; 23   : 		}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Initialise@sVertex@CBBFont@@QAEXMMMM@Z ENDP		; CBBFont::sVertex::Initialise
_TEXT	ENDS
END
