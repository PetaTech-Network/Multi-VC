; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\d3d8\d3dfont.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0CD3DFont@@QAE@PADKK@Z			; CD3DFont::CD3DFont
EXTRN	_strcpy:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\d3d8\d3dfont.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CD3DFont@@QAE@PADKK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_strFontName$ = 8					; size = 4
_dwHeight$ = 12						; size = 4
_dwFlags$ = 16						; size = 4
??0CD3DFont@@QAE@PADKK@Z PROC				; CD3DFont::CD3DFont, COMDAT
; _this$ = ecx

; 56   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 57   :     _tcscpy( m_strFontName, strFontName );

	mov	eax, DWORD PTR _strFontName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8

; 58   :     m_dwFontHeight         = dwHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwHeight$[ebp]
	mov	DWORD PTR [eax+1660], ecx

; 59   :     m_dwFontFlags          = dwFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _dwFlags$[ebp]
	mov	DWORD PTR [eax+80], ecx

; 60   : 
; 61   :     m_pd3dDevice           = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 62   :     m_pTexture             = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0

; 63   :     m_pVB                  = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0

; 64   : 
; 65   :     m_dwSavedStateBlock    = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1648], 0

; 66   :     m_dwDrawTextStateBlock = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1652], 0

; 67   :     m_dwDrawBoxStateBlock  = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1656], 0

; 68   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CD3DFont@@QAE@PADKK@Z ENDP				; CD3DFont::CD3DFont
_TEXT	ENDS
PUBLIC	?DeleteDeviceObjects@CD3DFont@@QAEJXZ		; CD3DFont::DeleteDeviceObjects
PUBLIC	?InvalidateDeviceObjects@CD3DFont@@QAEJXZ	; CD3DFont::InvalidateDeviceObjects
PUBLIC	??1CD3DFont@@QAE@XZ				; CD3DFont::~CD3DFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CD3DFont@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CD3DFont@@QAE@XZ PROC				; CD3DFont::~CD3DFont, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   :     InvalidateDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InvalidateDeviceObjects@CD3DFont@@QAEJXZ ; CD3DFont::InvalidateDeviceObjects

; 80   :     DeleteDeviceObjects();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?DeleteDeviceObjects@CD3DFont@@QAEJXZ	; CD3DFont::DeleteDeviceObjects

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CD3DFont@@QAE@XZ ENDP				; CD3DFont::~CD3DFont
_TEXT	ENDS
PUBLIC	??_C@_01FJMABOPO@x?$AA@				; `string'
PUBLIC	__real@3f800000
PUBLIC	?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z ; CD3DFont::InitDeviceObjects
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__ExtTextOutA@32:PROC
EXTRN	__imp__GetTextExtentPoint32A@16:PROC
EXTRN	__imp__SetTextAlign@8:PROC
EXTRN	__imp__SetBkColor@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	__imp__MulDiv@12:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__SetMapMode@8:PROC
EXTRN	__imp__CreateDIBSection@24:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	_memset:PROC
EXTRN	__fltused:DWORD
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__ftol2_sse:PROC
;	COMDAT ??_C@_01FJMABOPO@x?$AA@
CONST	SEGMENT
??_C@_01FJMABOPO@x?$AA@ DB 'x', 00H			; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z
_TEXT	SEGMENT
tv567 = -704						; size = 8
tv553 = -704						; size = 8
tv539 = -704						; size = 8
tv525 = -704						; size = 8
tv406 = -704						; size = 8
tv561 = -696						; size = 8
tv547 = -696						; size = 8
tv533 = -696						; size = 8
tv519 = -696						; size = 8
tv401 = -696						; size = 8
tv454 = -692						; size = 4
_bAlpha$ = -489						; size = 1
_pDst16$ = -480						; size = 4
_pDstRow$ = -468					; size = 4
_d3dlr$ = -456						; size = 8
_c$95495 = -437						; size = 1
_size$ = -428						; size = 8
_str$ = -412						; size = 2
_y$ = -400						; size = 4
_x$ = -388						; size = 4
_hFont$ = -376						; size = 4
_dwItalic$ = -364					; size = 4
_dwBold$ = -352						; size = 4
_nHeight$ = -340					; size = 4
_hbmBitmap$ = -328					; size = 4
_hDC$ = -316						; size = 4
_bmi$ = -304						; size = 44
_pBitmapBits$ = -252					; size = 4
_d3dCaps$ = -240					; size = 212
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_pd3dDevice$ = 8					; size = 4
?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z PROC ; CD3DFont::InitDeviceObjects, COMDAT
; _this$ = ecx

; 92   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 704				; 000002c0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-704]
	mov	ecx, 176				; 000000b0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   :     HRESULT hr;
; 94   : 
; 95   :     // Keep a local copy of the device
; 96   :     m_pd3dDevice = pd3dDevice;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pd3dDevice$[ebp]
	mov	DWORD PTR [eax+84], ecx

; 97   : 
; 98   :     // Establish the font and texture size
; 99   :     m_fTextScale  = 1.0f; // Draw fonts into texture without scaling

	mov	eax, DWORD PTR _this$[ebp]
	fld1
	fstp	DWORD PTR [eax+108]

; 100  : 
; 101  :     // Large fonts need larger textures
; 102  :     if( m_dwFontHeight > 40 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1660], 40		; 00000028H
	jbe	SHORT $LN19@InitDevice

; 103  :         m_dwTexWidth = m_dwTexHeight = 1024;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 1024		; 00000400H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 1024		; 00000400H
	jmp	SHORT $LN16@InitDevice
$LN19@InitDevice:

; 104  :     else if( m_dwFontHeight > 20 )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1660], 20		; 00000014H
	jbe	SHORT $LN17@InitDevice

; 105  :         m_dwTexWidth = m_dwTexHeight = 512;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 512		; 00000200H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 512		; 00000200H

; 106  :     else

	jmp	SHORT $LN16@InitDevice
$LN17@InitDevice:

; 107  :         m_dwTexWidth  = m_dwTexHeight = 256;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+104], 256		; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], 256		; 00000100H
$LN16@InitDevice:

; 108  : 
; 109  :     // If requested texture is too big, use a smaller texture and smaller font,
; 110  :     // and scale up when rendering.
; 111  :     D3DCAPS8 d3dCaps;
; 112  :     m_pd3dDevice->GetDeviceCaps( &d3dCaps );

	mov	esi, esp
	lea	eax, DWORD PTR _d3dCaps$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+28]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 113  : 
; 114  :     if( m_dwTexWidth > d3dCaps.MaxTextureWidth )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	cmp	ecx, DWORD PTR _d3dCaps$[ebp+88]
	jbe	SHORT $LN15@InitDevice

; 115  :     {
; 116  :         m_fTextScale = (FLOAT)d3dCaps.MaxTextureWidth / (FLOAT)m_dwTexWidth;

	mov	eax, DWORD PTR _d3dCaps$[ebp+88]
	mov	DWORD PTR tv401[ebp], eax
	mov	DWORD PTR tv401[ebp+4], 0
	fild	QWORD PTR tv401[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR tv406[ebp], edx
	mov	DWORD PTR tv406[ebp+4], 0
	fild	QWORD PTR tv406[ebp]
	fdivp	ST(1), ST(0)
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+108]

; 117  :         m_dwTexWidth = m_dwTexHeight = d3dCaps.MaxTextureWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _d3dCaps$[ebp+88]
	mov	DWORD PTR [eax+104], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _d3dCaps$[ebp+88]
	mov	DWORD PTR [edx+100], eax
$LN15@InitDevice:

; 118  :     }
; 119  : 
; 120  :     // Create a new texture for the font
; 121  :     hr = m_pd3dDevice->CreateTexture( m_dwTexWidth, m_dwTexHeight, 1,
; 122  :                                       0, D3DFMT_A4R4G4B4,
; 123  :                                       D3DPOOL_MANAGED, &m_pTexture );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	mov	esi, esp
	push	eax
	push	1
	push	26					; 0000001aH
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+80]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax

; 124  :     if( FAILED(hr) )

	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN14@InitDevice

; 125  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN20@InitDevice
$LN14@InitDevice:

; 126  : 
; 127  :     // Prepare to create a bitmap
; 128  :     DWORD*      pBitmapBits;
; 129  :     BITMAPINFO bmi;
; 130  :     ZeroMemory( &bmi.bmiHeader,  sizeof(BITMAPINFOHEADER) );

	push	40					; 00000028H
	push	0
	lea	eax, DWORD PTR _bmi$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 131  :     bmi.bmiHeader.biSize        = sizeof(BITMAPINFOHEADER);

	mov	DWORD PTR _bmi$[ebp], 40		; 00000028H

; 132  :     bmi.bmiHeader.biWidth       =  (int)m_dwTexWidth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _bmi$[ebp+4], ecx

; 133  :     bmi.bmiHeader.biHeight      = -(int)m_dwTexHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	neg	ecx
	mov	DWORD PTR _bmi$[ebp+8], ecx

; 134  :     bmi.bmiHeader.biPlanes      = 1;

	mov	eax, 1
	mov	WORD PTR _bmi$[ebp+12], ax

; 135  :     bmi.bmiHeader.biCompression = BI_RGB;

	mov	DWORD PTR _bmi$[ebp+16], 0

; 136  :     bmi.bmiHeader.biBitCount    = 32;

	mov	eax, 32					; 00000020H
	mov	WORD PTR _bmi$[ebp+14], ax

; 137  : 
; 138  :     // Create a DC and a bitmap for the font
; 139  :     HDC     hDC       = CreateCompatibleDC( NULL );

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__CreateCompatibleDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hDC$[ebp], eax

; 140  :     HBITMAP hbmBitmap = CreateDIBSection( hDC, &bmi, DIB_RGB_COLORS,
; 141  :                                           (VOID**)&pBitmapBits, NULL, 0 );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _pBitmapBits$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _bmi$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateDIBSection@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hbmBitmap$[ebp], eax

; 142  :     SetMapMode( hDC, MM_TEXT );

	mov	esi, esp
	push	1
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__SetMapMode@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 143  : 
; 144  :     // Create a font.  By specifying ANTIALIASED_QUALITY, we might get an
; 145  :     // antialiased font, but this is not guaranteed.
; 146  :     INT nHeight    = -MulDiv( m_dwFontHeight, 
; 147  :         (INT)(GetDeviceCaps(hDC, LOGPIXELSY) * m_fTextScale), 72 );

	mov	esi, esp
	push	72					; 00000048H
	mov	edi, esp
	push	90					; 0000005aH
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDeviceCaps@8
	cmp	edi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv454[ebp], eax
	fild	DWORD PTR tv454[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	fmul	DWORD PTR [ecx+108]
	call	__ftol2_sse
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+1660]
	push	eax
	call	DWORD PTR __imp__MulDiv@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	mov	DWORD PTR _nHeight$[ebp], eax

; 148  :     DWORD dwBold   = (m_dwFontFlags&D3DFONT_BOLD)   ? FW_BOLD : FW_NORMAL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	and	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 300				; 0000012cH
	add	ecx, 400				; 00000190H
	mov	DWORD PTR _dwBold$[ebp], ecx

; 149  :     DWORD dwItalic = (m_dwFontFlags&D3DFONT_ITALIC) ? TRUE    : FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	and	ecx, 2
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _dwItalic$[ebp], ecx

; 150  :     HFONT hFont    = CreateFont( nHeight, 0, 0, 0, dwBold, dwItalic,
; 151  :                           FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS,
; 152  :                           CLIP_DEFAULT_PRECIS, ANTIALIASED_QUALITY,
; 153  :                           VARIABLE_PITCH, m_strFontName );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	push	2
	push	4
	push	0
	push	0
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR _dwItalic$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwBold$[ebp]
	push	edx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFontA@56
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hFont$[ebp], eax

; 154  :     if( NULL==hFont )

	cmp	DWORD PTR _hFont$[ebp], 0
	jne	SHORT $LN13@InitDevice

; 155  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN20@InitDevice
$LN13@InitDevice:

; 156  : 
; 157  :     SelectObject( hDC, hbmBitmap );

	mov	esi, esp
	mov	eax, DWORD PTR _hbmBitmap$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 158  :     SelectObject( hDC, hFont );

	mov	esi, esp
	mov	eax, DWORD PTR _hFont$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 159  : 
; 160  :     // Set text properties
; 161  :     SetTextColor( hDC, RGB(255,255,255) );

	mov	esi, esp
	push	16777215				; 00ffffffH
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 162  :     SetBkColor(   hDC, 0x00000000 );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__SetBkColor@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 163  :     SetTextAlign( hDC, TA_TOP );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextAlign@8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 164  : 
; 165  :     // Loop through all printable character and output them to the bitmap..
; 166  :     // Meanwhile, keep track of the corresponding tex coords for each character.
; 167  :     DWORD x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 168  :     DWORD y = 0;

	mov	DWORD PTR _y$[ebp], 0

; 169  :     TCHAR str[2] = _T("x");

	mov	ax, WORD PTR ??_C@_01FJMABOPO@x?$AA@
	mov	WORD PTR _str$[ebp], ax

; 170  :     SIZE size;
; 171  : 
; 172  :     for( TCHAR c=32; c<127; c++ )

	mov	BYTE PTR _c$95495[ebp], 32		; 00000020H
	jmp	SHORT $LN12@InitDevice
$LN11@InitDevice:
	mov	al, BYTE PTR _c$95495[ebp]
	add	al, 1
	mov	BYTE PTR _c$95495[ebp], al
$LN12@InitDevice:
	movsx	eax, BYTE PTR _c$95495[ebp]
	cmp	eax, 127				; 0000007fH
	jge	$LN10@InitDevice

; 173  :     {
; 174  :         str[0] = c;

	mov	al, BYTE PTR _c$95495[ebp]
	mov	BYTE PTR _str$[ebp], al

; 175  :         GetTextExtentPoint32( hDC, str, 1, &size );

	mov	esi, esp
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	push	1
	lea	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__GetTextExtentPoint32A@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 176  :         if( (DWORD)(x+size.cx+1) > m_dwTexWidth )

	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	eax, DWORD PTR _this$[ebp]
	cmp	edx, DWORD PTR [eax+100]
	jbe	SHORT $LN9@InitDevice

; 177  :         {
; 178  :             x  = 0;

	mov	DWORD PTR _x$[ebp], 0

; 179  :             y += size.cy+1;

	mov	eax, DWORD PTR _size$[ebp+4]
	mov	ecx, DWORD PTR _y$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _y$[ebp], edx
$LN9@InitDevice:

; 180  :         }
; 181  : 
; 182  :         ExtTextOut( hDC, x+0, y+0, ETO_OPAQUE, NULL, str, 1, NULL );

	mov	esi, esp
	push	0
	push	1
	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	0
	push	2
	mov	ecx, DWORD PTR _y$[ebp]
	push	ecx
	mov	edx, DWORD PTR _x$[ebp]
	push	edx
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__ExtTextOutA@32
	cmp	esi, esp
	call	__RTC_CheckEsp

; 183  : 
; 184  :         m_fTexCoords[c-32][0] = ((FLOAT)(x+0))/m_dwTexWidth;

	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR tv519[ebp], eax
	mov	DWORD PTR tv519[ebp+4], 0
	fild	QWORD PTR tv519[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR tv525[ebp], edx
	mov	DWORD PTR tv525[ebp+4], 0
	fild	QWORD PTR tv525[ebp]
	fdivp	ST(1), ST(0)
	movsx	eax, BYTE PTR _c$95495[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax+112]

; 185  :         m_fTexCoords[c-32][1] = ((FLOAT)(y+0))/m_dwTexHeight;

	mov	eax, DWORD PTR _y$[ebp]
	mov	DWORD PTR tv533[ebp], eax
	mov	DWORD PTR tv533[ebp+4], 0
	fild	QWORD PTR tv533[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR tv539[ebp], edx
	mov	DWORD PTR tv539[ebp+4], 0
	fild	QWORD PTR tv539[ebp]
	fdivp	ST(1), ST(0)
	movsx	eax, BYTE PTR _c$95495[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax+116]

; 186  :         m_fTexCoords[c-32][2] = ((FLOAT)(x+0+size.cx))/m_dwTexWidth;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv547[ebp], eax
	mov	DWORD PTR tv547[ebp+4], 0
	fild	QWORD PTR tv547[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR tv553[ebp], edx
	mov	DWORD PTR tv553[ebp+4], 0
	fild	QWORD PTR tv553[ebp]
	fdivp	ST(1), ST(0)
	movsx	eax, BYTE PTR _c$95495[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax+120]

; 187  :         m_fTexCoords[c-32][3] = ((FLOAT)(y+0+size.cy))/m_dwTexHeight;

	mov	eax, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR tv561[ebp], eax
	mov	DWORD PTR tv561[ebp+4], 0
	fild	QWORD PTR tv561[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	DWORD PTR tv567[ebp], edx
	mov	DWORD PTR tv567[ebp+4], 0
	fild	QWORD PTR tv567[ebp]
	fdivp	ST(1), ST(0)
	movsx	eax, BYTE PTR _c$95495[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+eax+124]

; 188  : 
; 189  :         x += size.cx+1;

	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _x$[ebp], edx

; 190  :     }

	jmp	$LN11@InitDevice
$LN10@InitDevice:

; 191  : 
; 192  :     // Lock the surface and write the alpha values for the set pixels
; 193  :     D3DLOCKED_RECT d3dlr;
; 194  :     m_pTexture->LockRect( 0, &d3dlr, 0, 0 );

	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _d3dlr$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+64]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 195  :     BYTE* pDstRow = (BYTE*)d3dlr.pBits;

	mov	eax, DWORD PTR _d3dlr$[ebp+4]
	mov	DWORD PTR _pDstRow$[ebp], eax

; 196  :     WORD* pDst16;
; 197  :     BYTE bAlpha; // 4-bit measure of pixel intensity
; 198  : 
; 199  :     for( y=0; y < m_dwTexHeight; y++ )

	mov	DWORD PTR _y$[ebp], 0
	jmp	SHORT $LN8@InitDevice
$LN7@InitDevice:
	mov	eax, DWORD PTR _y$[ebp]
	add	eax, 1
	mov	DWORD PTR _y$[ebp], eax
$LN8@InitDevice:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _y$[ebp]
	cmp	ecx, DWORD PTR [eax+104]
	jae	$LN6@InitDevice

; 200  :     {
; 201  :         pDst16 = (WORD*)pDstRow;

	mov	eax, DWORD PTR _pDstRow$[ebp]
	mov	DWORD PTR _pDst16$[ebp], eax

; 202  :         for( x=0; x < m_dwTexWidth; x++ )

	mov	DWORD PTR _x$[ebp], 0
	jmp	SHORT $LN5@InitDevice
$LN4@InitDevice:
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, 1
	mov	DWORD PTR _x$[ebp], eax
$LN5@InitDevice:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _x$[ebp]
	cmp	ecx, DWORD PTR [eax+100]
	jae	SHORT $LN3@InitDevice

; 203  :         {
; 204  :             bAlpha = (BYTE)((pBitmapBits[m_dwTexWidth*y + x] & 0xff) >> 4);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	imul	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _pBitmapBits$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	and	eax, 255				; 000000ffH
	shr	eax, 4
	mov	BYTE PTR _bAlpha$[ebp], al

; 205  :             if (bAlpha > 0)

	movzx	eax, BYTE PTR _bAlpha$[ebp]
	test	eax, eax
	jle	SHORT $LN2@InitDevice

; 206  :             {
; 207  :                 *pDst16++ = (bAlpha << 12) | 0x0fff;

	movzx	eax, BYTE PTR _bAlpha$[ebp]
	shl	eax, 12					; 0000000cH
	or	eax, 4095				; 00000fffH
	mov	ecx, DWORD PTR _pDst16$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDst16$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDst16$[ebp], edx

; 208  :             }
; 209  :             else

	jmp	SHORT $LN1@InitDevice
$LN2@InitDevice:

; 210  :             {
; 211  :                 *pDst16++ = 0x0000;

	xor	eax, eax
	mov	ecx, DWORD PTR _pDst16$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _pDst16$[ebp]
	add	edx, 2
	mov	DWORD PTR _pDst16$[ebp], edx
$LN1@InitDevice:

; 212  :             }
; 213  :         }

	jmp	$LN4@InitDevice
$LN3@InitDevice:

; 214  :         pDstRow += d3dlr.Pitch;

	mov	eax, DWORD PTR _pDstRow$[ebp]
	add	eax, DWORD PTR _d3dlr$[ebp]
	mov	DWORD PTR _pDstRow$[ebp], eax

; 215  :     }

	jmp	$LN7@InitDevice
$LN6@InitDevice:

; 216  : 
; 217  :     // Done updating texture, so clean up used objects
; 218  :     m_pTexture->UnlockRect(0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+68]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 219  :     DeleteObject( hbmBitmap );

	mov	esi, esp
	mov	eax, DWORD PTR _hbmBitmap$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 220  :     DeleteDC( hDC );

	mov	esi, esp
	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 221  :     DeleteObject( hFont );

	mov	esi, esp
	mov	eax, DWORD PTR _hFont$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 222  : 
; 223  :     return S_OK;

	xor	eax, eax
$LN20@InitDevice:

; 224  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@InitDevice
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 704				; 000002c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN29@InitDevice:
	DD	6
	DD	$LN28@InitDevice
$LN28@InitDevice:
	DD	-240					; ffffff10H
	DD	212					; 000000d4H
	DD	$LN22@InitDevice
	DD	-252					; ffffff04H
	DD	4
	DD	$LN23@InitDevice
	DD	-304					; fffffed0H
	DD	44					; 0000002cH
	DD	$LN24@InitDevice
	DD	-412					; fffffe64H
	DD	2
	DD	$LN25@InitDevice
	DD	-428					; fffffe54H
	DD	8
	DD	$LN26@InitDevice
	DD	-456					; fffffe38H
	DD	8
	DD	$LN27@InitDevice
$LN27@InitDevice:
	DB	100					; 00000064H
	DB	51					; 00000033H
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	114					; 00000072H
	DB	0
$LN26@InitDevice:
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN25@InitDevice:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN24@InitDevice:
	DB	98					; 00000062H
	DB	109					; 0000006dH
	DB	105					; 00000069H
	DB	0
$LN23@InitDevice:
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	66					; 00000042H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN22@InitDevice:
	DB	100					; 00000064H
	DB	51					; 00000033H
	DB	100					; 00000064H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	115					; 00000073H
	DB	0
?InitDeviceObjects@CD3DFont@@QAEJPAUIDirect3DDevice8@@@Z ENDP ; CD3DFont::InitDeviceObjects
_TEXT	ENDS
PUBLIC	?RestoreDeviceObjects@CD3DFont@@QAEJXZ		; CD3DFont::RestoreDeviceObjects
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RestoreDeviceObjects@CD3DFont@@QAEJXZ
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?RestoreDeviceObjects@CD3DFont@@QAEJXZ PROC		; CD3DFont::RestoreDeviceObjects, COMDAT
; _this$ = ecx

; 234  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 235  :     HRESULT hr;
; 236  : 
; 237  :     // Create vertex buffer for the letters
; 238  :     if( FAILED( hr = m_pd3dDevice->CreateVertexBuffer( MAX_NUM_VERTICES*sizeof(FONT2DVERTEX),
; 239  :                                                        D3DUSAGE_WRITEONLY | D3DUSAGE_DYNAMIC, 0,                                                      D3DPOOL_DEFAULT, &m_pVB ) ) )

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	mov	esi, esp
	push	eax
	push	0
	push	0
	push	520					; 00000208H
	push	8400					; 000020d0H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+92]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@RestoreDev

; 240  :     {
; 241  :         return hr;

	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN4@RestoreDev
$LN3@RestoreDev:

; 242  :     }
; 243  : 
; 244  :     m_pd3dDevice->CreateStateBlock(D3DSBT_ALL, &m_dwSavedStateBlock);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1648				; 00000670H
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+228]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 245  :     m_pd3dDevice->CaptureStateBlock(m_dwSavedStateBlock);

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 246  : 
; 247  :     // Create the state blocks for rendering text
; 248  :     {
; 249  :             m_pd3dDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 250  :             m_pd3dDevice->SetTexture( 0, m_pTexture );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+244]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 251  : 
; 252  :             if ( D3DFONT_ZENABLE & m_dwFontFlags )

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	and	ecx, 4
	je	SHORT $LN2@RestoreDev

; 253  :                 m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, TRUE );

	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 254  :             else

	jmp	SHORT $LN1@RestoreDev
$LN2@RestoreDev:

; 255  :                 m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, FALSE );

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@RestoreDev:

; 256  : 
; 257  : 			m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, FALSE );

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 258  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 259  :             m_pd3dDevice->SetRenderState( D3DRS_SRCBLEND,   D3DBLEND_SRCALPHA );

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 260  :             m_pd3dDevice->SetRenderState( D3DRS_DESTBLEND,  D3DBLEND_INVSRCALPHA );

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 261  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHATESTENABLE,  TRUE );

	mov	esi, esp
	push	1
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 262  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHAREF,         0x08 );

	mov	esi, esp
	push	8
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 263  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHAFUNC,  D3DCMP_GREATEREQUAL );

	mov	esi, esp
	push	7
	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 264  :             m_pd3dDevice->SetRenderState( D3DRS_FILLMODE,   D3DFILL_SOLID );

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 265  :             m_pd3dDevice->SetRenderState( D3DRS_CULLMODE,   D3DCULL_CCW );

	mov	esi, esp
	push	3
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 266  :             m_pd3dDevice->SetRenderState( D3DRS_STENCILENABLE,    FALSE );

	mov	esi, esp
	push	0
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 267  :             m_pd3dDevice->SetRenderState( D3DRS_CLIPPING,         TRUE );

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 268  :             m_pd3dDevice->SetRenderState( D3DRS_EDGEANTIALIAS,    FALSE );

	mov	esi, esp
	push	0
	push	40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 269  :             m_pd3dDevice->SetRenderState( D3DRS_CLIPPLANEENABLE,  FALSE );

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 270  :             m_pd3dDevice->SetRenderState( D3DRS_VERTEXBLEND,      FALSE );

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 271  :             m_pd3dDevice->SetRenderState( D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE );

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 272  :             m_pd3dDevice->SetRenderState( D3DRS_FOGENABLE,        FALSE );

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 273  :             m_pd3dDevice->SetRenderState( D3DRS_LIGHTING, TRUE);

	mov	esi, esp
	push	1
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 274  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 275  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 276  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 277  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 278  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 279  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 280  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_POINT );

	mov	esi, esp
	push	1
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 281  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_POINT );

	mov	esi, esp
	push	1
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 282  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );

	mov	esi, esp
	push	0
	push	18					; 00000012H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 283  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, 0 );

	mov	esi, esp
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 284  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE );

	mov	esi, esp
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 285  :             m_pd3dDevice->SetTextureStageState( 1, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	esi, esp
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 286  :             m_pd3dDevice->SetTextureStageState( 1, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

	mov	esi, esp
	push	1
	push	4
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 287  :  
; 288  :             m_pd3dDevice->EndStateBlock( &m_dwDrawTextStateBlock );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1652				; 00000674H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 289  :             m_pd3dDevice->BeginStateBlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+208]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 290  : 
; 291  : 			m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, FALSE );

	mov	esi, esp
	push	0
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 292  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );

	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 293  :             m_pd3dDevice->SetRenderState( D3DRS_SRCBLEND,   D3DBLEND_SRCALPHA );

	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 294  :             m_pd3dDevice->SetRenderState( D3DRS_DESTBLEND,  D3DBLEND_INVSRCALPHA );

	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 295  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHATESTENABLE,  TRUE );

	mov	esi, esp
	push	1
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 296  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHAREF,         0x08 );

	mov	esi, esp
	push	8
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 297  :             m_pd3dDevice->SetRenderState( D3DRS_ALPHAFUNC,  D3DCMP_GREATEREQUAL );

	mov	esi, esp
	push	7
	push	25					; 00000019H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 298  :             m_pd3dDevice->SetRenderState( D3DRS_FILLMODE,   D3DFILL_SOLID );

	mov	esi, esp
	push	3
	push	8
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 299  :             m_pd3dDevice->SetRenderState( D3DRS_CULLMODE,   D3DCULL_CCW );

	mov	esi, esp
	push	3
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 300  :             m_pd3dDevice->SetRenderState( D3DRS_STENCILENABLE,    FALSE );

	mov	esi, esp
	push	0
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 301  :             m_pd3dDevice->SetRenderState( D3DRS_CLIPPING,         TRUE );

	mov	esi, esp
	push	1
	push	136					; 00000088H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 302  :             m_pd3dDevice->SetRenderState( D3DRS_EDGEANTIALIAS,    FALSE );

	mov	esi, esp
	push	0
	push	40					; 00000028H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 303  :             m_pd3dDevice->SetRenderState( D3DRS_CLIPPLANEENABLE,  FALSE );

	mov	esi, esp
	push	0
	push	152					; 00000098H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 304  :             m_pd3dDevice->SetRenderState( D3DRS_VERTEXBLEND,      FALSE );

	mov	esi, esp
	push	0
	push	151					; 00000097H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 305  :             m_pd3dDevice->SetRenderState( D3DRS_INDEXEDVERTEXBLENDENABLE, FALSE );

	mov	esi, esp
	push	0
	push	167					; 000000a7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 306  :             m_pd3dDevice->SetRenderState( D3DRS_FOGENABLE,        FALSE );

	mov	esi, esp
	push	0
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 307  :             m_pd3dDevice->SetRenderState( D3DRS_LIGHTING, FALSE);

	mov	esi, esp
	push	0
	push	137					; 00000089H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 308  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 309  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 310  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLORARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 311  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_MODULATE );

	mov	esi, esp
	push	4
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 312  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE );

	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 313  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE );

	mov	esi, esp
	push	0
	push	6
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 314  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_POINT );

	mov	esi, esp
	push	1
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 315  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_POINT );

	mov	esi, esp
	push	1
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 316  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MIPFILTER, D3DTEXF_NONE );

	mov	esi, esp
	push	0
	push	18					; 00000012H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 317  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXCOORDINDEX, 0 );

	mov	esi, esp
	push	0
	push	11					; 0000000bH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 318  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_TEXTURETRANSFORMFLAGS, D3DTTFF_DISABLE );

	mov	esi, esp
	push	0
	push	24					; 00000018H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 319  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_COLOROP,   D3DTOP_DISABLE );

	mov	esi, esp
	push	1
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 320  :             m_pd3dDevice->SetTextureStageState( 0, D3DTSS_ALPHAOP,   D3DTOP_DISABLE );

	mov	esi, esp
	push	1
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 321  : 
; 322  :             m_pd3dDevice->EndStateBlock( &m_dwDrawBoxStateBlock );

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 1656				; 00000678H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+212]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 323  :     }
; 324  :     m_pd3dDevice->ApplyStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 325  :     return S_OK;

	xor	eax, eax
$LN4@RestoreDev:

; 326  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?RestoreDeviceObjects@CD3DFont@@QAEJXZ ENDP		; CD3DFont::RestoreDeviceObjects
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?InvalidateDeviceObjects@CD3DFont@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?InvalidateDeviceObjects@CD3DFont@@QAEJXZ PROC		; CD3DFont::InvalidateDeviceObjects, COMDAT
; _this$ = ecx

; 336  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 337  :     SAFE_RELEASE( m_pVB );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN5@Invalidate
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
$LN5@Invalidate:

; 338  : 
; 339  :     // Delete the state blocks
; 340  :     if( m_pd3dDevice )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	je	$LN4@Invalidate

; 341  :     {
; 342  :         if( m_dwSavedStateBlock )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1648], 0
	je	SHORT $LN3@Invalidate

; 343  :             m_pd3dDevice->DeleteStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+224]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@Invalidate:

; 344  :         if( m_dwDrawTextStateBlock )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1652], 0
	je	SHORT $LN2@Invalidate

; 345  :             m_pd3dDevice->DeleteStateBlock( m_dwDrawTextStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1652]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+224]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@Invalidate:

; 346  :         if( m_dwDrawBoxStateBlock )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+1656], 0
	je	SHORT $LN4@Invalidate

; 347  :             m_pd3dDevice->DeleteStateBlock( m_dwDrawBoxStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1656]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+224]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@Invalidate:

; 348  :     }
; 349  : 
; 350  :     m_dwSavedStateBlock    = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1648], 0

; 351  :     m_dwDrawTextStateBlock = 0L;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+1652], 0

; 352  : 
; 353  :     return S_OK;

	xor	eax, eax

; 354  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InvalidateDeviceObjects@CD3DFont@@QAEJXZ ENDP		; CD3DFont::InvalidateDeviceObjects
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?DeleteDeviceObjects@CD3DFont@@QAEJXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DeleteDeviceObjects@CD3DFont@@QAEJXZ PROC		; CD3DFont::DeleteDeviceObjects, COMDAT
; _this$ = ecx

; 364  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 365  :     SAFE_RELEASE( m_pTexture );

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+88], 0
	je	SHORT $LN1@DeleteDevi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0
$LN1@DeleteDevi:

; 366  :     m_pd3dDevice = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+84], 0

; 367  : 
; 368  :     return S_OK;

	xor	eax, eax

; 369  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?DeleteDeviceObjects@CD3DFont@@QAEJXZ ENDP		; CD3DFont::DeleteDeviceObjects
_TEXT	ENDS
PUBLIC	__real@4049000000000000
PUBLIC	__real@00000000
PUBLIC	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z	; CD3DFont::GetTextExtent
;	COMDAT __real@4049000000000000
CONST	SEGMENT
__real@4049000000000000 DQ 04049000000000000r	; 50
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z
_TEXT	SEGMENT
tv202 = -308						; size = 8
tv177 = -308						; size = 8
_tx2$95569 = -104					; size = 4
_tx1$95568 = -92					; size = 4
_c$95562 = -77						; size = 1
_tabs$ = -68						; size = 4
_fHeight$ = -56						; size = 4
_fWidth$ = -44						; size = 4
_fRowHeight$ = -32					; size = 4
_fRowWidth$ = -20					; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_pSize$ = 12						; size = 4
_fMaxWidth$ = 16					; size = 4
?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z PROC	; CD3DFont::GetTextExtent, COMDAT
; _this$ = ecx

; 379  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :     if( NULL==strText || NULL==pSize )

	cmp	DWORD PTR _strText$[ebp], 0
	je	SHORT $LN9@GetTextExt
	cmp	DWORD PTR _pSize$[ebp], 0
	jne	SHORT $LN10@GetTextExt
$LN9@GetTextExt:

; 381  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN11@GetTextExt
$LN10@GetTextExt:

; 382  : 
; 383  :     FLOAT fRowWidth  = 0.0f;

	fldz
	fstp	DWORD PTR _fRowWidth$[ebp]

; 384  :     FLOAT fRowHeight = (m_fTexCoords[0][3]-m_fTexCoords[0][1])*m_dwTexHeight / m_fTextScale;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR tv177[ebp], eax
	mov	DWORD PTR tv177[ebp+4], 0
	fild	QWORD PTR tv177[ebp]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+108]
	fstp	DWORD PTR _fRowHeight$[ebp]

; 385  :     FLOAT fWidth     = 0.0f;

	fldz
	fstp	DWORD PTR _fWidth$[ebp]

; 386  :     FLOAT fHeight    = fRowHeight;

	fld	DWORD PTR _fRowHeight$[ebp]
	fstp	DWORD PTR _fHeight$[ebp]

; 387  : 
; 388  : 	int tabs = 1;

	mov	DWORD PTR _tabs$[ebp], 1
$LN16@GetTextExt:

; 389  :     while( *strText )

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN7@GetTextExt

; 390  :     {
; 391  :         TCHAR c = *strText++;

	mov	eax, DWORD PTR _strText$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$95562[ebp], cl
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 392  : 
; 393  : 		if( c == _T('\01') ) {

	movsx	eax, BYTE PTR _c$95562[ebp]
	cmp	eax, 1
	jne	SHORT $LN6@GetTextExt

; 394  : 			strText+=4;

	mov	eax, DWORD PTR _strText$[ebp]
	add	eax, 4
	mov	DWORD PTR _strText$[ebp], eax

; 395  : 			continue;

	jmp	SHORT $LN16@GetTextExt
$LN6@GetTextExt:

; 396  : 		}
; 397  : 		
; 398  : 		if( c == _T('\02') ) continue;

	movsx	eax, BYTE PTR _c$95562[ebp]
	cmp	eax, 2
	jne	SHORT $LN5@GetTextExt
	jmp	SHORT $LN16@GetTextExt
$LN5@GetTextExt:

; 399  : 
; 400  :         if( c == _T('\n') )

	movsx	eax, BYTE PTR _c$95562[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN4@GetTextExt

; 401  :         {
; 402  :             fRowWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fRowWidth$[ebp]

; 403  :             fHeight  += fRowHeight;

	fld	DWORD PTR _fHeight$[ebp]
	fadd	DWORD PTR _fRowHeight$[ebp]
	fstp	DWORD PTR _fHeight$[ebp]

; 404  : 			tabs=1;

	mov	DWORD PTR _tabs$[ebp], 1
$LN4@GetTextExt:

; 405  :         }
; 406  : 		if( c == _T('\t') )

	movsx	eax, BYTE PTR _c$95562[ebp]
	cmp	eax, 9
	jne	SHORT $LN3@GetTextExt

; 407  : 		{
; 408  : 			fRowWidth = tabs*50.0f - fRowWidth;

	fild	DWORD PTR _tabs$[ebp]
	fmul	QWORD PTR __real@4049000000000000
	fsub	DWORD PTR _fRowWidth$[ebp]
	fstp	DWORD PTR _fRowWidth$[ebp]

; 409  : 			tabs++;

	mov	eax, DWORD PTR _tabs$[ebp]
	add	eax, 1
	mov	DWORD PTR _tabs$[ebp], eax

; 410  : 			continue;

	jmp	SHORT $LN16@GetTextExt
$LN3@GetTextExt:

; 411  : 		}
; 412  :         if( c < _T(' ') )

	movsx	eax, BYTE PTR _c$95562[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN2@GetTextExt

; 413  :             continue;

	jmp	$LN16@GetTextExt
$LN2@GetTextExt:

; 414  : 		
; 415  : 	/*	if (fMaxWidth != 0.0f)
; 416  : 		{
; 417  : 			if (fRowWidth > fMaxWidth) {
; 418  : 				fRowWidth = 0.0f;
; 419  : 				fHeight  += fRowHeight;
; 420  : 				tabs=1;
; 421  : 			}
; 422  : 		}*/
; 423  : 
; 424  :         FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$95562[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95568[ebp]

; 425  :         FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$95562[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95569[ebp]

; 426  : 
; 427  :         fRowWidth += (tx2-tx1) *  m_dwTexWidth / m_fTextScale;

	fld	DWORD PTR _tx2$95569[ebp]
	fsub	DWORD PTR _tx1$95568[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv202[ebp], ecx
	mov	DWORD PTR tv202[ebp+4], 0
	fild	QWORD PTR tv202[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+108]
	fadd	DWORD PTR _fRowWidth$[ebp]
	fstp	DWORD PTR _fRowWidth$[ebp]

; 428  : 
; 429  : 
; 430  :         if( fRowWidth > fWidth )

	fld	DWORD PTR _fRowWidth$[ebp]
	fld	DWORD PTR _fWidth$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@GetTextExt

; 431  :             fWidth = fRowWidth;

	fld	DWORD PTR _fRowWidth$[ebp]
	fstp	DWORD PTR _fWidth$[ebp]
$LN1@GetTextExt:

; 432  :     }

	jmp	$LN16@GetTextExt
$LN7@GetTextExt:

; 433  : 
; 434  :     pSize->cx = (int)fWidth;

	fld	DWORD PTR _fWidth$[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _pSize$[ebp]
	mov	DWORD PTR [ecx], eax

; 435  : 	pSize->cy = (int)fHeight;

	fld	DWORD PTR _fHeight$[ebp]
	call	__ftol2_sse
	mov	ecx, DWORD PTR _pSize$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 436  : 
; 437  :     return S_OK;

	xor	eax, eax
$LN11@GetTextExt:

; 438  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z ENDP	; CD3DFont::GetTextExtent
_TEXT	ENDS
PUBLIC	__real@4034000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	?GetTextMax@CD3DFont@@QAEJPBDPAPBDM@Z		; CD3DFont::GetTextMax
EXTRN	_strlen:PROC
;	COMDAT __real@4034000000000000
CONST	SEGMENT
__real@4034000000000000 DQ 04034000000000000r	; 20
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetTextMax@CD3DFont@@QAEJPBDPAPBDM@Z
_TEXT	SEGMENT
tv222 = -308						; size = 8
tv190 = -308						; size = 8
_tx2$95598 = -104					; size = 4
_tx1$95597 = -92					; size = 4
_c$95591 = -77						; size = 1
_tabs$ = -68						; size = 4
_fHeight$ = -56						; size = 4
_fWidth$ = -44						; size = 4
_fRowHeight$ = -32					; size = 4
_fRowWidth$ = -20					; size = 4
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_strResult$ = 12					; size = 4
_fMaxWidth$ = 16					; size = 4
?GetTextMax@CD3DFont@@QAEJPBDPAPBDM@Z PROC		; CD3DFont::GetTextMax, COMDAT
; _this$ = ecx

; 445  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 308				; 00000134H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-308]
	mov	ecx, 77					; 0000004dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 446  :     if( NULL==strText || NULL==strResult || fMaxWidth < 1.0f )

	cmp	DWORD PTR _strText$[ebp], 0
	je	SHORT $LN10@GetTextMax
	cmp	DWORD PTR _strResult$[ebp], 0
	je	SHORT $LN10@GetTextMax
	fld	DWORD PTR _fMaxWidth$[ebp]
	fcomp	QWORD PTR __real@3ff0000000000000
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@GetTextMax
$LN10@GetTextMax:

; 447  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN12@GetTextMax
$LN11@GetTextMax:

; 448  : 
; 449  :     FLOAT fRowWidth  = 0.0f;

	fldz
	fstp	DWORD PTR _fRowWidth$[ebp]

; 450  :     FLOAT fRowHeight = (m_fTexCoords[0][3]-m_fTexCoords[0][1])*m_dwTexHeight / m_fTextScale;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR tv190[ebp], eax
	mov	DWORD PTR tv190[ebp+4], 0
	fild	QWORD PTR tv190[ebp]
	fmulp	ST(1), ST(0)
	mov	ecx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [ecx+108]
	fstp	DWORD PTR _fRowHeight$[ebp]

; 451  :     FLOAT fWidth     = 0.0f;

	fldz
	fstp	DWORD PTR _fWidth$[ebp]

; 452  :     FLOAT fHeight    = fRowHeight;

	fld	DWORD PTR _fRowHeight$[ebp]
	fstp	DWORD PTR _fHeight$[ebp]

; 453  : 	*strResult = strText + _tcslen(strText)-1;

	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	mov	ecx, DWORD PTR _strText$[ebp]
	lea	edx, DWORD PTR [ecx+eax-1]
	mov	eax, DWORD PTR _strResult$[ebp]
	mov	DWORD PTR [eax], edx

; 454  : 
; 455  : 	int tabs = 1;

	mov	DWORD PTR _tabs$[ebp], 1
$LN17@GetTextMax:

; 456  :     while( *strResult != strText )

	mov	eax, DWORD PTR _strResult$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _strText$[ebp]
	je	$LN8@GetTextMax

; 457  :     {
; 458  :         TCHAR c = **strResult;

	mov	eax, DWORD PTR _strResult$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c$95591[ebp], dl

; 459  : 		*strResult -= 1;

	mov	eax, DWORD PTR _strResult$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR _strResult$[ebp]
	mov	DWORD PTR [edx], ecx

; 460  : 
; 461  : 		if( c == _T('\01') ) {

	movsx	eax, BYTE PTR _c$95591[ebp]
	cmp	eax, 1
	jne	SHORT $LN7@GetTextMax

; 462  : 			*strResult-=4;

	mov	eax, DWORD PTR _strResult$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 4
	mov	edx, DWORD PTR _strResult$[ebp]
	mov	DWORD PTR [edx], ecx

; 463  : 			continue;

	jmp	SHORT $LN17@GetTextMax
$LN7@GetTextMax:

; 464  : 		}
; 465  : 		
; 466  : 		if( c == _T('\02') ) continue;

	movsx	eax, BYTE PTR _c$95591[ebp]
	cmp	eax, 2
	jne	SHORT $LN6@GetTextMax
	jmp	SHORT $LN17@GetTextMax
$LN6@GetTextMax:

; 467  : 
; 468  :         if( c == _T('\n') )

	movsx	eax, BYTE PTR _c$95591[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@GetTextMax

; 469  :         {
; 470  :             fRowWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fRowWidth$[ebp]

; 471  :             fHeight  += fRowHeight;

	fld	DWORD PTR _fHeight$[ebp]
	fadd	DWORD PTR _fRowHeight$[ebp]
	fstp	DWORD PTR _fHeight$[ebp]

; 472  : 			tabs=1;

	mov	DWORD PTR _tabs$[ebp], 1
$LN5@GetTextMax:

; 473  :         }
; 474  : 		if( c == _T('\t') )

	movsx	eax, BYTE PTR _c$95591[ebp]
	cmp	eax, 9
	jne	SHORT $LN4@GetTextMax

; 475  : 		{
; 476  : 			fRowWidth = tabs*50.0f - fRowWidth;

	fild	DWORD PTR _tabs$[ebp]
	fmul	QWORD PTR __real@4049000000000000
	fsub	DWORD PTR _fRowWidth$[ebp]
	fstp	DWORD PTR _fRowWidth$[ebp]

; 477  : 			tabs++;

	mov	eax, DWORD PTR _tabs$[ebp]
	add	eax, 1
	mov	DWORD PTR _tabs$[ebp], eax

; 478  : 			continue;

	jmp	$LN17@GetTextMax
$LN4@GetTextMax:

; 479  : 		}
; 480  :         if( c < _T(' ') )

	movsx	eax, BYTE PTR _c$95591[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN3@GetTextMax

; 481  :             continue;

	jmp	$LN17@GetTextMax
$LN3@GetTextMax:

; 482  : 		
; 483  :         FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$95591[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95597[ebp]

; 484  :         FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$95591[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95598[ebp]

; 485  : 
; 486  : 
; 487  :         if ((fRowWidth += (tx2-tx1) *  m_dwTexWidth / m_fTextScale) >= fMaxWidth-20.0f) break;

	fld	DWORD PTR _tx2$95598[ebp]
	fsub	DWORD PTR _tx1$95597[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv222[ebp], ecx
	mov	DWORD PTR tv222[ebp+4], 0
	fild	QWORD PTR tv222[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+108]
	fadd	DWORD PTR _fRowWidth$[ebp]
	fstp	DWORD PTR _fRowWidth$[ebp]
	fld	DWORD PTR _fRowWidth$[ebp]
	fld	DWORD PTR _fMaxWidth$[ebp]
	fsub	QWORD PTR __real@4034000000000000
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN2@GetTextMax
	jmp	SHORT $LN8@GetTextMax
$LN2@GetTextMax:

; 488  : 
; 489  : 
; 490  :         if( fRowWidth > fWidth )

	fld	DWORD PTR _fRowWidth$[ebp]
	fld	DWORD PTR _fWidth$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN1@GetTextMax

; 491  :             fWidth = fRowWidth;

	fld	DWORD PTR _fRowWidth$[ebp]
	fstp	DWORD PTR _fWidth$[ebp]
$LN1@GetTextMax:

; 492  :     }

	jmp	$LN17@GetTextMax
$LN8@GetTextMax:

; 493  : 
; 494  :     return S_OK;

	xor	eax, eax
$LN12@GetTextMax:

; 495  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 308				; 00000134H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetTextMax@CD3DFont@@QAEJPBDPAPBDM@Z ENDP		; CD3DFont::GetTextMax
_TEXT	ENDS
PUBLIC	?FormatText@CD3DFont@@QAEJPBDPADM@Z		; CD3DFont::FormatText
EXTRN	_strncat:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FormatText@CD3DFont@@QAEJPBDPADM@Z
_TEXT	SEGMENT
tv241 = -344						; size = 8
tv213 = -344						; size = 8
_dwWordLen$95634 = -140					; size = 4
_tx2$95630 = -128					; size = 4
_tx1$95629 = -116					; size = 4
_c$95628 = -101						; size = 1
_theWord$95624 = -92					; size = 4
_fWordWidth$95623 = -80					; size = 4
_tx2$95619 = -68					; size = 4
_tx1$95618 = -56					; size = 4
_c$95616 = -41						; size = 1
_dwOutputIndex$ = -32					; size = 4
_fCurrentWidth$ = -20					; size = 4
_this$ = -8						; size = 4
_theText$ = 8						; size = 4
_outText$ = 12						; size = 4
_fMaxWidth$ = 16					; size = 4
?FormatText@CD3DFont@@QAEJPBDPADM@Z PROC		; CD3DFont::FormatText, COMDAT
; _this$ = ecx

; 498  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 344				; 00000158H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 499  : 	FLOAT fCurrentWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fCurrentWidth$[ebp]

; 500  : 	DWORD dwOutputIndex = 0;

	mov	DWORD PTR _dwOutputIndex$[ebp], 0

; 501  : 
; 502  : 	// Make sure we have valid parameters.
; 503  : 	if ( theText == NULL || outText == NULL )

	cmp	DWORD PTR _theText$[ebp], 0
	je	SHORT $LN14@FormatText
	cmp	DWORD PTR _outText$[ebp], 0
	jne	SHORT $LN15@FormatText
$LN14@FormatText:

; 504  : 	{
; 505  : 		return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN16@FormatText
$LN15@FormatText:

; 506  : 	}
; 507  : 
; 508  : 	while ( *theText )

	mov	eax, DWORD PTR _theText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN12@FormatText

; 509  : 	{
; 510  : 		TCHAR c = *theText++;

	mov	eax, DWORD PTR _theText$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$95616[ebp], cl
	mov	edx, DWORD PTR _theText$[ebp]
	add	edx, 1
	mov	DWORD PTR _theText$[ebp], edx

; 511  : 
; 512  : 		// If the amount of characters we've emitted into 
; 513  : 		// outText is > dwBuffLen, return an error.
; 514  : 		//if ( dwOutputIndex >= dwBuffLen )
; 515  : 		//{
; 516  : 		//	return E_OUTOFMEMORY;
; 517  : 		//}
; 518  : 
; 519  : 		// Check for newline case.
; 520  : 		// If we find a newline, reset current width and continue.
; 521  : 		if ( c == _T('\n') )

	movsx	eax, BYTE PTR _c$95616[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN11@FormatText

; 522  : 		{
; 523  : 			fCurrentWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fCurrentWidth$[ebp]

; 524  : 			outText[dwOutputIndex++] = c;

	mov	eax, DWORD PTR _outText$[ebp]
	add	eax, DWORD PTR _dwOutputIndex$[ebp]
	mov	cl, BYTE PTR _c$95616[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dwOutputIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _dwOutputIndex$[ebp], edx

; 525  : 			continue;

	jmp	SHORT $LN15@FormatText
$LN11@FormatText:

; 526  : 		}
; 527  : 
; 528  : 		FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$95616[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95618[ebp]

; 529  : 		FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$95616[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95619[ebp]

; 530  : 		
; 531  : 		
; 532  : 		// Add the character to the width if it isn't a space.
; 533  : 		if ( c != _T(' ') )

	movsx	eax, BYTE PTR _c$95616[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN10@FormatText

; 534  : 		{
; 535  : 			fCurrentWidth += (tx2-tx1) *  m_dwTexWidth / m_fTextScale;

	fld	DWORD PTR _tx2$95619[ebp]
	fsub	DWORD PTR _tx1$95618[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv213[ebp], ecx
	mov	DWORD PTR tv213[ebp+4], 0
	fild	QWORD PTR tv213[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+108]
	fadd	DWORD PTR _fCurrentWidth$[ebp]
	fstp	DWORD PTR _fCurrentWidth$[ebp]
$LN10@FormatText:

; 536  : 		}
; 537  : 
; 538  : 		// If we've gone over our limit, emit a newline,
; 539  : 		// increment the output index, reset, and continue.
; 540  : 		if ( fCurrentWidth >= fMaxWidth )

	fld	DWORD PTR _fCurrentWidth$[ebp]
	fld	DWORD PTR _fMaxWidth$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN9@FormatText

; 541  : 		{
; 542  : 			outText[dwOutputIndex++] = '\n';

	mov	eax, DWORD PTR _outText$[ebp]
	add	eax, DWORD PTR _dwOutputIndex$[ebp]
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	ecx, DWORD PTR _dwOutputIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dwOutputIndex$[ebp], ecx

; 543  : 			fCurrentWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fCurrentWidth$[ebp]

; 544  : 			continue;

	jmp	$LN15@FormatText
$LN9@FormatText:

; 545  : 		}
; 546  : 
; 547  : 		// Copy the character into the output buffer.
; 548  : 		//if ( dwOutputIndex < dwBuffLen )
; 549  : 		//{
; 550  : 			outText[dwOutputIndex++] = c;

	mov	eax, DWORD PTR _outText$[ebp]
	add	eax, DWORD PTR _dwOutputIndex$[ebp]
	mov	cl, BYTE PTR _c$95616[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dwOutputIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _dwOutputIndex$[ebp], edx

; 551  : 		//}
; 552  : 
; 553  : 		// If we reach a space, we have to look ahead to see
; 554  : 		// if the word will fit in our string.  If not, we either
; 555  : 		// have to put the word on the next line, or chop the word
; 556  : 		// at some point.   MTA Blue v1.0 BETA BUILD
; 557  : 		if ( c == _T(' ') )

	movsx	eax, BYTE PTR _c$95616[ebp]
	cmp	eax, 32					; 00000020H
	jne	$LN6@FormatText

; 558  : 		{
; 559  : 			FLOAT fWordWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fWordWidth$95623[ebp]

; 560  : 			const TCHAR *theWord = theText;

	mov	eax, DWORD PTR _theText$[ebp]
	mov	DWORD PTR _theWord$95624[ebp], eax
$LN7@FormatText:

; 561  : 
; 562  : 			while ( *theWord )

	mov	eax, DWORD PTR _theWord$95624[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN6@FormatText

; 563  : 			{
; 564  : 				TCHAR c = *theWord++;

	mov	eax, DWORD PTR _theWord$95624[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$95628[ebp], cl
	mov	edx, DWORD PTR _theWord$95624[ebp]
	add	edx, 1
	mov	DWORD PTR _theWord$95624[ebp], edx

; 565  : 				
; 566  : 				FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$95628[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95629[ebp]

; 567  : 				FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$95628[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95630[ebp]

; 568  : 				
; 569  : 				fWordWidth += (tx2-tx1) *  m_dwTexWidth / m_fTextScale;

	fld	DWORD PTR _tx2$95630[ebp]
	fsub	DWORD PTR _tx1$95629[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv241[ebp], ecx
	mov	DWORD PTR tv241[ebp+4], 0
	fild	QWORD PTR tv241[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+108]
	fadd	DWORD PTR _fWordWidth$95623[ebp]
	fstp	DWORD PTR _fWordWidth$95623[ebp]

; 570  : 				
; 571  : 				// Check if word length is over limit.  If it is,
; 572  : 				// we emit a newline, reset, and break out of the
; 573  : 				// word loop.
; 574  : 				if ( (fWordWidth+fCurrentWidth) >= fMaxWidth )

	fld	DWORD PTR _fWordWidth$95623[ebp]
	fadd	DWORD PTR _fCurrentWidth$[ebp]
	fld	DWORD PTR _fMaxWidth$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN5@FormatText

; 575  : 				{
; 576  : 					outText[dwOutputIndex++] = '\n';

	mov	eax, DWORD PTR _outText$[ebp]
	add	eax, DWORD PTR _dwOutputIndex$[ebp]
	mov	BYTE PTR [eax], 10			; 0000000aH
	mov	ecx, DWORD PTR _dwOutputIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dwOutputIndex$[ebp], ecx

; 577  : 					fCurrentWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fCurrentWidth$[ebp]

; 578  : 					break;

	jmp	SHORT $LN6@FormatText
$LN5@FormatText:

; 579  : 				}
; 580  : 
; 581  : 				// We've found the end of the word, and it
; 582  : 				// fits in, so lets copy it into our output
; 583  : 				// buffer.
; 584  : 				if ( c == _T(' ') || c == _T('\n') )

	movsx	eax, BYTE PTR _c$95628[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@FormatText
	movsx	eax, BYTE PTR _c$95628[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN4@FormatText
$LN3@FormatText:

; 585  : 				{
; 586  : 					DWORD dwWordLen = theWord-theText-1;

	mov	eax, DWORD PTR _theWord$95624[ebp]
	sub	eax, DWORD PTR _theText$[ebp]
	sub	eax, 1
	mov	DWORD PTR _dwWordLen$95634[ebp], eax

; 587  : 
; 588  : 					outText[dwOutputIndex] = NULL;

	mov	eax, DWORD PTR _outText$[ebp]
	add	eax, DWORD PTR _dwOutputIndex$[ebp]
	mov	BYTE PTR [eax], 0

; 589  : 					_tcsncat( outText, theText, dwWordLen );

	mov	eax, DWORD PTR _dwWordLen$95634[ebp]
	push	eax
	mov	ecx, DWORD PTR _theText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outText$[ebp]
	push	edx
	call	_strncat
	add	esp, 12					; 0000000cH

; 590  : 					dwOutputIndex += dwWordLen;

	mov	eax, DWORD PTR _dwOutputIndex$[ebp]
	add	eax, DWORD PTR _dwWordLen$95634[ebp]
	mov	DWORD PTR _dwOutputIndex$[ebp], eax

; 591  : 					theText += dwWordLen;

	mov	eax, DWORD PTR _theText$[ebp]
	add	eax, DWORD PTR _dwWordLen$95634[ebp]
	mov	DWORD PTR _theText$[ebp], eax

; 592  : 					
; 593  : 					if ( c == _T(' ') )

	movsx	eax, BYTE PTR _c$95628[ebp]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN2@FormatText

; 594  : 					{
; 595  : 						fCurrentWidth += fWordWidth;

	fld	DWORD PTR _fCurrentWidth$[ebp]
	fadd	DWORD PTR _fWordWidth$95623[ebp]
	fstp	DWORD PTR _fCurrentWidth$[ebp]

; 596  : 					}
; 597  : 					else

	jmp	SHORT $LN1@FormatText
$LN2@FormatText:

; 598  : 					{
; 599  : 						fCurrentWidth = 0.0f;

	fldz
	fstp	DWORD PTR _fCurrentWidth$[ebp]
$LN1@FormatText:

; 600  : 					}
; 601  : 					
; 602  : 					break;

	jmp	SHORT $LN6@FormatText
$LN4@FormatText:

; 603  : 				}
; 604  : 			}

	jmp	$LN7@FormatText
$LN6@FormatText:

; 605  : 		}
; 606  : 	}

	jmp	$LN15@FormatText
$LN12@FormatText:

; 607  : 	
; 608  : 	// Put a NULL terminator on our output string.
; 609  : 	outText[dwOutputIndex] = NULL;

	mov	eax, DWORD PTR _outText$[ebp]
	add	eax, DWORD PTR _dwOutputIndex$[ebp]
	mov	BYTE PTR [eax], 0

; 610  : 	return S_OK;

	xor	eax, eax
$LN16@FormatText:

; 611  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FormatText@CD3DFont@@QAEJPBDPADM@Z ENDP		; CD3DFont::FormatText
_TEXT	ENDS
PUBLIC	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
PUBLIC	??0D3DXVECTOR4@@QAE@MMMM@Z			; D3DXVECTOR4::D3DXVECTOR4
PUBLIC	__real@0000000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	?DrawTextScaled@CD3DFont@@QAEJMMMMMKPADK@Z	; CD3DFont::DrawTextScaled
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?DrawTextScaled@CD3DFont@@QAEJMMMMMKPADK@Z
_TEXT	SEGMENT
tv795 = -1000						; size = 4
tv770 = -1000						; size = 4
tv745 = -1000						; size = 4
tv720 = -1000						; size = 4
tv695 = -1000						; size = 4
tv670 = -1000						; size = 4
tv663 = -1000						; size = 8
tv656 = -1000						; size = 8
tv650 = -1000						; size = 8
tv642 = -1000						; size = 8
tv626 = -1000						; size = 8
tv609 = -1000						; size = 8
tv596 = -1000						; size = 8
tv589 = -1000						; size = 8
tv794 = -996						; size = 4
tv769 = -996						; size = 4
tv744 = -996						; size = 4
tv719 = -996						; size = 4
tv694 = -996						; size = 4
tv669 = -996						; size = 4
$T96050 = -988						; size = 28
$T96051 = -952						; size = 16
$T96052 = -928						; size = 28
$T96053 = -892						; size = 28
$T96054 = -856						; size = 16
$T96055 = -832						; size = 28
$T96056 = -796						; size = 28
$T96057 = -760						; size = 16
$T96058 = -736						; size = 28
$T96059 = -700						; size = 28
$T96060 = -664						; size = 16
$T96061 = -640						; size = 28
$T96062 = -604						; size = 28
$T96063 = -568						; size = 16
$T96064 = -544						; size = 28
$T96065 = -508						; size = 28
$T96066 = -472						; size = 16
$T96067 = -448						; size = 28
_h$95674 = -220						; size = 4
_w$95673 = -208						; size = 4
_ty2$95672 = -196					; size = 4
_tx2$95671 = -184					; size = 4
_ty1$95670 = -172					; size = 4
_tx1$95669 = -160					; size = 4
_c$95666 = -145						; size = 1
_dwNumTriangles$ = -136					; size = 4
_pVertices$ = -124					; size = 4
_fLineHeight$ = -112					; size = 4
_fStartX$ = -100					; size = 4
_rhw$ = -88						; size = 4
_sz$ = -76						; size = 4
_sy$ = -64						; size = 4
_sx$ = -52						; size = 4
_vp$ = -40						; size = 24
_this$ = -8						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_z$ = 16						; size = 4
_fXScale$ = 20						; size = 4
_fYScale$ = 24						; size = 4
_dwColor$ = 28						; size = 4
_strText$ = 32						; size = 4
_dwFlags$ = 36						; size = 4
?DrawTextScaled@CD3DFont@@QAEJMMMMMKPADK@Z PROC		; CD3DFont::DrawTextScaled, COMDAT
; _this$ = ecx

; 627  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1000				; 000003e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1000]
	mov	ecx, 250				; 000000faH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 628  :     if( m_pd3dDevice == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	jne	SHORT $LN9@DrawTextSc

; 629  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN10@DrawTextSc
$LN9@DrawTextSc:

; 630  : 
; 631  :     // Set up renderstate
; 632  :     m_pd3dDevice->CaptureStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 633  :     m_pd3dDevice->ApplyStateBlock( m_dwDrawTextStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1652]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 634  :     m_pd3dDevice->SetVertexShader( D3DFVF_FONT2DVERTEX );

	mov	esi, esp
	push	324					; 00000144H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 635  :     m_pd3dDevice->SetPixelShader( NULL );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+352]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 636  :     m_pd3dDevice->SetStreamSource( 0, m_pVB, sizeof(FONT2DVERTEX) );

	mov	esi, esp
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 637  : 
; 638  :     // Set filter states
; 639  :     if( dwFlags & D3DFONT_FILTERED )

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 4
	je	SHORT $LN8@DrawTextSc

; 640  :     {
; 641  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 642  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@DrawTextSc:

; 643  :     }
; 644  : 
; 645  :     D3DVIEWPORT8 vp;
; 646  :     m_pd3dDevice->GetViewport( &vp );

	mov	esi, esp
	lea	eax, DWORD PTR _vp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+164]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 647  :     FLOAT sx  = (x+1.0f)*vp.Width/2;

	fld	DWORD PTR _x$[ebp]
	fadd	QWORD PTR __real@3ff0000000000000
	mov	eax, DWORD PTR _vp$[ebp+8]
	mov	DWORD PTR tv589[ebp], eax
	mov	DWORD PTR tv589[ebp+4], 0
	fild	QWORD PTR tv589[ebp]
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _sx$[ebp]

; 648  :     FLOAT sy  = (y-1.0f)*vp.Height/2;

	fld	DWORD PTR _y$[ebp]
	fsub	QWORD PTR __real@3ff0000000000000
	mov	eax, DWORD PTR _vp$[ebp+12]
	mov	DWORD PTR tv596[ebp], eax
	mov	DWORD PTR tv596[ebp+4], 0
	fild	QWORD PTR tv596[ebp]
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _sy$[ebp]

; 649  :     FLOAT sz  = z;

	fld	DWORD PTR _z$[ebp]
	fstp	DWORD PTR _sz$[ebp]

; 650  :     FLOAT rhw = 1.0f;

	fld1
	fstp	DWORD PTR _rhw$[ebp]

; 651  :     FLOAT fStartX = sx;

	fld	DWORD PTR _sx$[ebp]
	fstp	DWORD PTR _fStartX$[ebp]

; 652  : 
; 653  :     FLOAT fLineHeight = ( m_fTexCoords[0][3] - m_fTexCoords[0][1] ) * m_dwTexHeight;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR tv609[ebp], eax
	mov	DWORD PTR tv609[ebp+4], 0
	fild	QWORD PTR tv609[ebp]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _fLineHeight$[ebp]

; 654  : 
; 655  :     // Fill vertex buffer
; 656  :     FONT2DVERTEX* pVertices;
; 657  :     DWORD         dwNumTriangles = 0L;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0

; 658  :     m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@DrawTextSc:

; 659  : 
; 660  :     while( *strText )

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN6@DrawTextSc

; 661  :     {
; 662  :         TCHAR c = *strText++;

	mov	eax, DWORD PTR _strText$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$95666[ebp], cl
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 663  : 
; 664  :         if( c == _T('\n') )

	movsx	eax, BYTE PTR _c$95666[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@DrawTextSc

; 665  :         {
; 666  :             sx  = fStartX;

	fld	DWORD PTR _fStartX$[ebp]
	fstp	DWORD PTR _sx$[ebp]

; 667  :             sy += fYScale*vp.Height;

	mov	eax, DWORD PTR _vp$[ebp+12]
	mov	DWORD PTR tv626[ebp], eax
	mov	DWORD PTR tv626[ebp+4], 0
	fild	QWORD PTR tv626[ebp]
	fmul	DWORD PTR _fYScale$[ebp]
	fadd	DWORD PTR _sy$[ebp]
	fstp	DWORD PTR _sy$[ebp]
$LN5@DrawTextSc:

; 668  :         }
; 669  :         if( c < _T(' ') )

	movsx	eax, BYTE PTR _c$95666[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN4@DrawTextSc

; 670  :             continue;

	jmp	SHORT $LN12@DrawTextSc
$LN4@DrawTextSc:

; 671  : 
; 672  :         FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$95666[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95669[ebp]

; 673  :         FLOAT ty1 = m_fTexCoords[c-32][1];

	movsx	eax, BYTE PTR _c$95666[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+116]
	fstp	DWORD PTR _ty1$95670[ebp]

; 674  :         FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$95666[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95671[ebp]

; 675  :         FLOAT ty2 = m_fTexCoords[c-32][3];

	movsx	eax, BYTE PTR _c$95666[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+124]
	fstp	DWORD PTR _ty2$95672[ebp]

; 676  : 
; 677  :         FLOAT w = (tx2-tx1)*m_dwTexWidth;

	fld	DWORD PTR _tx2$95671[ebp]
	fsub	DWORD PTR _tx1$95669[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv642[ebp], ecx
	mov	DWORD PTR tv642[ebp+4], 0
	fild	QWORD PTR tv642[ebp]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _w$95673[ebp]

; 678  :         FLOAT h = (ty2-ty1)*m_dwTexHeight;

	fld	DWORD PTR _ty2$95672[ebp]
	fsub	DWORD PTR _ty1$95670[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR tv650[ebp], ecx
	mov	DWORD PTR tv650[ebp+4], 0
	fild	QWORD PTR tv650[ebp]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _h$95674[ebp]

; 679  : 
; 680  :         w *= (fXScale*vp.Height)/fLineHeight;

	mov	eax, DWORD PTR _vp$[ebp+12]
	mov	DWORD PTR tv656[ebp], eax
	mov	DWORD PTR tv656[ebp+4], 0
	fild	QWORD PTR tv656[ebp]
	fmul	DWORD PTR _fXScale$[ebp]
	fdiv	DWORD PTR _fLineHeight$[ebp]
	fmul	DWORD PTR _w$95673[ebp]
	fstp	DWORD PTR _w$95673[ebp]

; 681  :         h *= (fYScale*vp.Height)/fLineHeight;

	mov	eax, DWORD PTR _vp$[ebp+12]
	mov	DWORD PTR tv663[ebp], eax
	mov	DWORD PTR tv663[ebp+4], 0
	fild	QWORD PTR tv663[ebp]
	fmul	DWORD PTR _fYScale$[ebp]
	fdiv	DWORD PTR _fLineHeight$[ebp]
	fmul	DWORD PTR _h$95674[ebp]
	fstp	DWORD PTR _h$95674[ebp]

; 682  : 
; 683  :         if( c != _T(' ') )

	movsx	eax, BYTE PTR _c$95666[ebp]
	cmp	eax, 32					; 00000020H
	je	$LN2@DrawTextSc

; 684  :         {
; 685  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+0-0.5f,sy+h-0.5f,sz,rhw), dwColor, tx1, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95672[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95669[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _rhw$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _h$95674[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv669[ebp]
	fld	DWORD PTR tv669[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv670[ebp]
	fld	DWORD PTR tv670[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96051[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96052[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96050[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96050[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 686  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+0-0.5f,sy+0-0.5f,sz,rhw), dwColor, tx1, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95670[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95669[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _rhw$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv694[ebp]
	fld	DWORD PTR tv694[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv695[ebp]
	fld	DWORD PTR tv695[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96054[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96055[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96053[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96053[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 687  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+w-0.5f,sy+h-0.5f,sz,rhw), dwColor, tx2, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95672[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95671[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _rhw$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _h$95674[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv719[ebp]
	fld	DWORD PTR tv719[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95673[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv720[ebp]
	fld	DWORD PTR tv720[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96057[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96058[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96056[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96056[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 688  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+w-0.5f,sy+0-0.5f,sz,rhw), dwColor, tx2, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95670[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95671[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _rhw$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv744[ebp]
	fld	DWORD PTR tv744[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95673[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv745[ebp]
	fld	DWORD PTR tv745[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96060[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96061[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96059[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96059[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 689  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+w-0.5f,sy+h-0.5f,sz,rhw), dwColor, tx2, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95672[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95671[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _rhw$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _h$95674[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv769[ebp]
	fld	DWORD PTR tv769[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95673[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv770[ebp]
	fld	DWORD PTR tv770[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96063[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96064[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96062[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96062[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 690  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+0-0.5f,sy+0-0.5f,sz,rhw), dwColor, tx1, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95670[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95669[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwColor$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _rhw$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _sz$[ebp]
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv794[ebp]
	fld	DWORD PTR tv794[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv795[ebp]
	fld	DWORD PTR tv795[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96066[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96067[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96065[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96065[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 691  :             dwNumTriangles += 2;

	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	add	eax, 2
	mov	DWORD PTR _dwNumTriangles$[ebp], eax

; 692  : 
; 693  :             if( dwNumTriangles*3 > (MAX_NUM_VERTICES-6) )

	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	imul	eax, 3
	cmp	eax, 294				; 00000126H
	jbe	SHORT $LN2@DrawTextSc

; 694  :             {
; 695  :                 // Unlock, render, and relock the vertex buffer
; 696  :                 m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 697  :                 m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 698  :                 m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 699  :                 dwNumTriangles = 0L;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0
$LN2@DrawTextSc:

; 700  :             }
; 701  :         }
; 702  : 
; 703  :         sx += w;

	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95673[ebp]
	fstp	DWORD PTR _sx$[ebp]

; 704  :     }

	jmp	$LN12@DrawTextSc
$LN6@DrawTextSc:

; 705  : 
; 706  :     // Unlock and render the vertex buffer
; 707  :     m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 708  :     if( dwNumTriangles > 0 )

	cmp	DWORD PTR _dwNumTriangles$[ebp], 0
	jbe	SHORT $LN1@DrawTextSc

; 709  :         m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawTextSc:

; 710  : 
; 711  :     // Restore the modified renderstates
; 712  :     m_pd3dDevice->ApplyStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 713  : 
; 714  :     return S_OK;

	xor	eax, eax
$LN10@DrawTextSc:

; 715  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@DrawTextSc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1000				; 000003e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN16@DrawTextSc:
	DD	2
	DD	$LN15@DrawTextSc
$LN15@DrawTextSc:
	DD	-40					; ffffffd8H
	DD	24					; 00000018H
	DD	$LN13@DrawTextSc
	DD	-124					; ffffff84H
	DD	4
	DD	$LN14@DrawTextSc
$LN14@DrawTextSc:
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN13@DrawTextSc:
	DB	118					; 00000076H
	DB	112					; 00000070H
	DB	0
?DrawTextScaled@CD3DFont@@QAEJMMMMMKPADK@Z ENDP		; CD3DFont::DrawTextScaled
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXVECTOR4@@QAE@MMMM@Z PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 320  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 321  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]

; 322  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]

; 323  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]

; 324  :     w = fw;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fw$[ebp]
	fstp	DWORD PTR [eax+12]

; 325  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0D3DXVECTOR4@@QAE@MMMM@Z ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
PUBLIC	??0FONT2DVERTEX@@QAE@XZ				; FONT2DVERTEX::FONT2DVERTEX
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dfont.cpp
;	COMDAT ?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z
_TEXT	SEGMENT
_v$ = -32						; size = 28
$T96083 = 8						; size = 4
_p$ = 12						; size = 4
_color$ = 16						; size = 4
_tu$ = 20						; size = 4
_tv$ = 24						; size = 4
?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z PROC ; InitFont2DVertex, COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 37   :     FONT2DVERTEX v;   v.p = p;   v.color = color;   v.tu = tu;   v.tv = tv;

	lea	ecx, DWORD PTR _v$[ebp]
	call	??0FONT2DVERTEX@@QAE@XZ
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _v$[ebp+12], edx
	mov	eax, DWORD PTR _color$[ebp]
	mov	DWORD PTR _v$[ebp+16], eax
	fld	DWORD PTR _tu$[ebp]
	fstp	DWORD PTR _v$[ebp+20]
	fld	DWORD PTR _tv$[ebp]
	fstp	DWORD PTR _v$[ebp+24]

; 38   :     return v;

	mov	ecx, 7
	lea	esi, DWORD PTR _v$[ebp]
	mov	edi, DWORD PTR $T96083[ebp]
	rep movsd
	mov	eax, DWORD PTR $T96083[ebp]

; 39   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@InitFont2D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@InitFont2D:
	DD	1
	DD	$LN4@InitFont2D
$LN4@InitFont2D:
	DD	-32					; ffffffe0H
	DD	28					; 0000001cH
	DD	$LN3@InitFont2D
$LN3@InitFont2D:
	DB	118					; 00000076H
	DB	0
?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ENDP ; InitFont2DVertex
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR4@@QAE@XZ				; D3DXVECTOR4::D3DXVECTOR4
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0FONT2DVERTEX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0FONT2DVERTEX@@QAE@XZ PROC				; FONT2DVERTEX::FONT2DVERTEX, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXVECTOR4@@QAE@XZ			; D3DXVECTOR4::D3DXVECTOR4
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0FONT2DVERTEX@@QAE@XZ ENDP				; FONT2DVERTEX::FONT2DVERTEX
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.h
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXVECTOR4@@QAE@XZ PROC				; D3DXVECTOR4::D3DXVECTOR4, COMDAT
; _this$ = ecx

; 133  :     D3DXVECTOR4() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR4@@QAE@XZ ENDP				; D3DXVECTOR4::D3DXVECTOR4
_TEXT	ENDS
PUBLIC	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z		; CD3DFont::DrawTextA
PUBLIC	__real@3f000000
PUBLIC	?DrawTextBox@CD3DFont@@QAEJMMMKKPBDK@Z		; CD3DFont::DrawTextBox
EXTRN	_memcpy:PROC
;	COMDAT __real@3f000000
; File d:\vice-players-master\client\d3d8\d3dfont.cpp
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?DrawTextBox@CD3DFont@@QAEJMMMKKPBDK@Z
_TEXT	SEGMENT
_square_verts$ = -124					; size = 80
_sz$ = -36						; size = 8
_vb_verts$ = -20					; size = 4
_this$ = -8						; size = 4
_xTop$ = 8						; size = 4
_yTop$ = 12						; size = 4
_pad$ = 16						; size = 4
_dwColorBox$ = 20					; size = 4
_dwColorTxt$ = 24					; size = 4
_strText$ = 28						; size = 4
_dwFlags$ = 32						; size = 4
?DrawTextBox@CD3DFont@@QAEJMMMKKPBDK@Z PROC		; CD3DFont::DrawTextBox, COMDAT
; _this$ = ecx

; 719  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-320]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 720  :     // Setup renderstate
; 721  :     char *vb_verts = 0;

	mov	DWORD PTR _vb_verts$[ebp], 0

; 722  :     SIZE sz;
; 723  :     
; 724  :     GetTextExtent(strText,&sz);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _sz$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z ; CD3DFont::GetTextExtent

; 725  :     my_vertex square_verts[] ={
; 726  :         { xTop-pad,  yTop+sz.cy+pad, 0.5f, 1.0f, dwColorBox }, // x, y, z, rhw, color

	fld	DWORD PTR _xTop$[ebp]
	fsub	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp]
	fild	DWORD PTR _sz$[ebp+4]
	fadd	DWORD PTR _yTop$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+4]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+8]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+12]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+16], eax

; 727  :         { xTop-pad,  yTop-pad,  0.5f, 1.0f, dwColorBox },

	fld	DWORD PTR _xTop$[ebp]
	fsub	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+20]
	fld	DWORD PTR _yTop$[ebp]
	fsub	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+24]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+28]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+32]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+36], eax

; 728  :         { xTop+sz.cx+pad,  yTop+sz.cy+pad, 0.5f, 1.0f, dwColorBox },

	fild	DWORD PTR _sz$[ebp]
	fadd	DWORD PTR _xTop$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+40]
	fild	DWORD PTR _sz$[ebp+4]
	fadd	DWORD PTR _yTop$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+44]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+48]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+52]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+56], eax

; 729  :         { xTop+sz.cx+pad,  yTop-pad,  0.5f, 1.0f, dwColorBox }

	fild	DWORD PTR _sz$[ebp]
	fadd	DWORD PTR _xTop$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+60]
	fld	DWORD PTR _yTop$[ebp]
	fsub	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+64]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+68]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+72]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+76], eax

; 730  :     };
; 731  :     m_pd3dDevice->CaptureStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 732  :     m_pd3dDevice->ApplyStateBlock( m_dwDrawBoxStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1656]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 733  :     m_pd3dDevice->SetVertexShader( D3DFVF_XYZRHW|D3DFVF_DIFFUSE );

	mov	esi, esp
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 734  :     m_pd3dDevice->SetStreamSource( 0, m_pVB, sizeof(my_vertex) );

	mov	esi, esp
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 735  : 
; 736  :     m_pVB->Lock( 0, 0, (BYTE**)&vb_verts, 0  );

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _vb_verts$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 737  :     memcpy(vb_verts,square_verts,sizeof(square_verts));

	push	80					; 00000050H
	lea	eax, DWORD PTR _square_verts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vb_verts$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 738  :     m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 739  :     m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLESTRIP, 0, 2 );

	mov	esi, esp
	push	2
	push	0
	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 740  :     m_pd3dDevice->ApplyStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 741  :     DrawText(xTop,yTop,dwColorTxt,strText,dwFlags);

	push	0
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strText$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwColorTxt$[ebp]
	push	edx
	push	ecx
	fld	DWORD PTR _yTop$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _xTop$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z	; CD3DFont::DrawTextA

; 742  :     return 0;

	xor	eax, eax

; 743  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@DrawTextBo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
$LN7@DrawTextBo:
	DD	3
	DD	$LN6@DrawTextBo
$LN6@DrawTextBo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@DrawTextBo
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN4@DrawTextBo
	DD	-124					; ffffff84H
	DD	80					; 00000050H
	DD	$LN5@DrawTextBo
$LN5@DrawTextBo:
	DB	115					; 00000073H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN4@DrawTextBo:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
$LN3@DrawTextBo:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?DrawTextBox@CD3DFont@@QAEJMMMKKPBDK@Z ENDP		; CD3DFont::DrawTextBox
_TEXT	ENDS
PUBLIC	?DrawBox@CD3DFont@@QAEJMMMMMK@Z			; CD3DFont::DrawBox
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DrawBox@CD3DFont@@QAEJMMMMMK@Z
_TEXT	SEGMENT
_square_verts$ = -108					; size = 80
_vb_verts$ = -20					; size = 4
_this$ = -8						; size = 4
_xTop$ = 8						; size = 4
_yTop$ = 12						; size = 4
_fWidth$ = 16						; size = 4
_fHeight$ = 20						; size = 4
_pad$ = 24						; size = 4
_dwColorBox$ = 28					; size = 4
?DrawBox@CD3DFont@@QAEJMMMMMK@Z PROC			; CD3DFont::DrawBox, COMDAT
; _this$ = ecx

; 746  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 747  :     // Setup renderstate
; 748  : 	char *vb_verts = 0;

	mov	DWORD PTR _vb_verts$[ebp], 0

; 749  : 
; 750  : 	//xTop -= fWidth/2;
; 751  : 	my_vertex square_verts[] ={
; 752  : 		{ xTop-pad,  yTop+fHeight+pad, 0.5f, 1.0f, dwColorBox }, // x, y, z, rhw, color

	fld	DWORD PTR _xTop$[ebp]
	fsub	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp]
	fld	DWORD PTR _yTop$[ebp]
	fadd	DWORD PTR _fHeight$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+4]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+8]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+12]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+16], eax

; 753  : 		{ xTop-pad,  yTop,  0.5f, 1.0f, dwColorBox },

	fld	DWORD PTR _xTop$[ebp]
	fsub	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+20]
	fld	DWORD PTR _yTop$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+24]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+28]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+32]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+36], eax

; 754  : 		{ xTop+fWidth+pad,  yTop+fHeight+pad, 0.5f, 1.0f, dwColorBox },

	fld	DWORD PTR _xTop$[ebp]
	fadd	DWORD PTR _fWidth$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+40]
	fld	DWORD PTR _yTop$[ebp]
	fadd	DWORD PTR _fHeight$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+44]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+48]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+52]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+56], eax

; 755  : 		{ xTop+fWidth+pad,  yTop,  0.5f, 1.0f, dwColorBox }

	fld	DWORD PTR _xTop$[ebp]
	fadd	DWORD PTR _fWidth$[ebp]
	fadd	DWORD PTR _pad$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+60]
	fld	DWORD PTR _yTop$[ebp]
	fstp	DWORD PTR _square_verts$[ebp+64]
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR _square_verts$[ebp+68]
	fld1
	fstp	DWORD PTR _square_verts$[ebp+72]
	mov	eax, DWORD PTR _dwColorBox$[ebp]
	mov	DWORD PTR _square_verts$[ebp+76], eax

; 756  : 	};
; 757  : 	m_pd3dDevice->CaptureStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 758  : 	m_pd3dDevice->ApplyStateBlock( m_dwDrawBoxStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1656]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 759  : 	m_pd3dDevice->SetVertexShader( D3DFVF_XYZRHW|D3DFVF_DIFFUSE );

	mov	esi, esp
	push	68					; 00000044H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 760  : 	m_pd3dDevice->SetStreamSource( 0, m_pVB, sizeof(my_vertex) );

	mov	esi, esp
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 761  : 
; 762  : 	m_pVB->Lock( 0, 0, (BYTE**)&vb_verts, 0  );

	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _vb_verts$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 763  : 	memcpy(vb_verts,square_verts,sizeof(square_verts));

	push	80					; 00000050H
	lea	eax, DWORD PTR _square_verts$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vb_verts$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 764  : 	m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 765  : 	m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLESTRIP, 0, 2 );

	mov	esi, esp
	push	2
	push	0
	push	5
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+280]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 766  : 	m_pd3dDevice->ApplyStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 767  :     return 0;

	xor	eax, eax

; 768  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@DrawBox
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN6@DrawBox:
	DD	2
	DD	$LN5@DrawBox
$LN5@DrawBox:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@DrawBox
	DD	-108					; ffffff94H
	DD	80					; 00000050H
	DD	$LN4@DrawBox
$LN4@DrawBox:
	DB	115					; 00000073H
	DB	113					; 00000071H
	DB	117					; 00000075H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN3@DrawBox:
	DB	118					; 00000076H
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
?DrawBox@CD3DFont@@QAEJMMMMMK@Z ENDP			; CD3DFont::DrawBox
_TEXT	ENDS
PUBLIC	__real@3f666666
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z
_TEXT	SEGMENT
tv734 = -932						; size = 4
tv709 = -932						; size = 4
tv684 = -932						; size = 4
tv659 = -932						; size = 4
tv634 = -932						; size = 4
tv609 = -932						; size = 4
tv602 = -932						; size = 8
tv593 = -932						; size = 8
tv577 = -932						; size = 8
tv733 = -928						; size = 4
tv708 = -928						; size = 4
tv683 = -928						; size = 4
tv658 = -928						; size = 4
tv633 = -928						; size = 4
tv608 = -928						; size = 4
$T96108 = -920						; size = 28
$T96109 = -884						; size = 16
$T96110 = -860						; size = 28
$T96111 = -824						; size = 28
$T96112 = -788						; size = 16
$T96113 = -764						; size = 28
$T96114 = -728						; size = 28
$T96115 = -692						; size = 16
$T96116 = -668						; size = 28
$T96117 = -632						; size = 28
$T96118 = -596						; size = 16
$T96119 = -572						; size = 28
$T96120 = -536						; size = 28
$T96121 = -500						; size = 16
$T96122 = -476						; size = 28
$T96123 = -440						; size = 28
$T96124 = -404						; size = 16
$T96125 = -380						; size = 28
_h$95753 = -152						; size = 4
_w$95752 = -140						; size = 4
_ty2$95751 = -128					; size = 4
_tx2$95750 = -116					; size = 4
_ty1$95749 = -104					; size = 4
_tx1$95748 = -92					; size = 4
_c$95742 = -77						; size = 1
_tabs$ = -68						; size = 4
_dwNumTriangles$ = -56					; size = 4
_pVertices$ = -44					; size = 4
_fStartX$ = -32						; size = 4
_dwSColor$ = -20					; size = 4
_this$ = -8						; size = 4
_sx$ = 8						; size = 4
_sy$ = 12						; size = 4
_dwColor$ = 16						; size = 4
_strText$ = 20						; size = 4
_dwFlags$ = 24						; size = 4
_bIgnoreCodes$ = 28					; size = 4
?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z PROC		; CD3DFont::DrawTextA, COMDAT
; _this$ = ecx

; 776  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 932				; 000003a4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-932]
	mov	ecx, 233				; 000000e9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 777  :     DWORD dwSColor = dwColor;

	mov	eax, DWORD PTR _dwColor$[ebp]
	mov	DWORD PTR _dwSColor$[ebp], eax

; 778  :     if( m_pd3dDevice == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	jne	SHORT $LN12@DrawTextA

; 779  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN13@DrawTextA
$LN12@DrawTextA:

; 780  :     
; 781  :     // Setup renderstate
; 782  :     m_pd3dDevice->CaptureStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 783  :     m_pd3dDevice->ApplyStateBlock( m_dwDrawTextStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1652]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 784  :     m_pd3dDevice->SetVertexShader( D3DFVF_FONT2DVERTEX );

	mov	esi, esp
	push	324					; 00000144H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 785  :     m_pd3dDevice->SetPixelShader( NULL );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+352]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 786  :     m_pd3dDevice->SetStreamSource( 0, m_pVB, sizeof(FONT2DVERTEX) );

	mov	esi, esp
	push	28					; 0000001cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 787  : 
; 788  :     // Set filter states
; 789  :     if( dwFlags & D3DFONT_FILTERED )

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 4
	je	SHORT $LN11@DrawTextA

; 790  :     {
; 791  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 792  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@DrawTextA:

; 793  :     }
; 794  : 
; 795  :     FLOAT fStartX = sx;

	fld	DWORD PTR _sx$[ebp]
	fstp	DWORD PTR _fStartX$[ebp]

; 796  : 
; 797  :     // Fill vertex buffer
; 798  :     FONT2DVERTEX* pVertices = NULL;

	mov	DWORD PTR _pVertices$[ebp], 0

; 799  :     DWORD         dwNumTriangles = 0;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0

; 800  :     m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 801  : 	int tabs = 1;

	mov	DWORD PTR _tabs$[ebp], 1
$LN17@DrawTextA:

; 802  : 
; 803  :     while( *strText )

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN9@DrawTextA

; 804  :     {
; 805  :         TCHAR c = *strText++;

	mov	eax, DWORD PTR _strText$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$95742[ebp], cl
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 806  :         if( c == '\01')

	movsx	eax, BYTE PTR _c$95742[ebp]
	cmp	eax, 1
	jne	SHORT $LN8@DrawTextA

; 807  :         {
; 808  : 			if(!bIgnoreCodes) {

	cmp	DWORD PTR _bIgnoreCodes$[ebp], 0
	jne	SHORT $LN7@DrawTextA

; 809  : 				memcpy(&dwSColor,strText,4);

	push	4
	mov	eax, DWORD PTR _strText$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwSColor$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN7@DrawTextA:

; 810  : 			}
; 811  :             strText+=4;

	mov	eax, DWORD PTR _strText$[ebp]
	add	eax, 4
	mov	DWORD PTR _strText$[ebp], eax

; 812  :             continue;

	jmp	SHORT $LN17@DrawTextA
$LN8@DrawTextA:

; 813  :         }
; 814  : 		if( c == '\t' )

	movsx	eax, BYTE PTR _c$95742[ebp]
	cmp	eax, 9
	jne	SHORT $LN6@DrawTextA

; 815  : 		{
; 816  : 			sx = fStartX + tabs*50.0f;

	fild	DWORD PTR _tabs$[ebp]
	fmul	QWORD PTR __real@4049000000000000
	fadd	DWORD PTR _fStartX$[ebp]
	fstp	DWORD PTR _sx$[ebp]

; 817  : 			tabs++;

	mov	eax, DWORD PTR _tabs$[ebp]
	add	eax, 1
	mov	DWORD PTR _tabs$[ebp], eax

; 818  : 			continue;

	jmp	SHORT $LN17@DrawTextA
$LN6@DrawTextA:

; 819  : 		}
; 820  : 
; 821  :         if( c == '\n' )

	movsx	eax, BYTE PTR _c$95742[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN5@DrawTextA

; 822  :         {
; 823  : 			sx = fStartX;

	fld	DWORD PTR _fStartX$[ebp]
	fstp	DWORD PTR _sx$[ebp]

; 824  : 			sy += (m_fTexCoords[0][3]-m_fTexCoords[0][1])*m_dwTexHeight;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR tv577[ebp], eax
	mov	DWORD PTR tv577[ebp+4], 0
	fild	QWORD PTR tv577[ebp]
	fmulp	ST(1), ST(0)
	fadd	DWORD PTR _sy$[ebp]
	fstp	DWORD PTR _sy$[ebp]

; 825  : 			tabs = 1;

	mov	DWORD PTR _tabs$[ebp], 1
$LN5@DrawTextA:

; 826  :         }
; 827  : 
; 828  :         if( c < ' ' )

	movsx	eax, BYTE PTR _c$95742[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN4@DrawTextA

; 829  : 			continue;

	jmp	$LN17@DrawTextA
$LN4@DrawTextA:

; 830  : 
; 831  :         FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$95742[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95748[ebp]

; 832  :         FLOAT ty1 = m_fTexCoords[c-32][1];

	movsx	eax, BYTE PTR _c$95742[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+116]
	fstp	DWORD PTR _ty1$95749[ebp]

; 833  :         FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$95742[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95750[ebp]

; 834  :         FLOAT ty2 = m_fTexCoords[c-32][3];

	movsx	eax, BYTE PTR _c$95742[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+124]
	fstp	DWORD PTR _ty2$95751[ebp]

; 835  : 
; 836  :         FLOAT w = (tx2-tx1) *  m_dwTexWidth / m_fTextScale;

	fld	DWORD PTR _tx2$95750[ebp]
	fsub	DWORD PTR _tx1$95748[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv593[ebp], ecx
	mov	DWORD PTR tv593[ebp+4], 0
	fild	QWORD PTR tv593[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+108]
	fstp	DWORD PTR _w$95752[ebp]

; 837  :         FLOAT h = (ty2-ty1) * m_dwTexHeight / m_fTextScale;

	fld	DWORD PTR _ty2$95751[ebp]
	fsub	DWORD PTR _ty1$95749[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR tv602[ebp], ecx
	mov	DWORD PTR tv602[ebp+4], 0
	fild	QWORD PTR tv602[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fdiv	DWORD PTR [edx+108]
	fstp	DWORD PTR _h$95753[ebp]

; 838  : 
; 839  :         if( c != _T(' ') )

	movsx	eax, BYTE PTR _c$95742[ebp]
	cmp	eax, 32					; 00000020H
	je	$LN2@DrawTextA

; 840  :         {
; 841  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+0-0.5f,sy+h-0.5f,0.9f,1.0f), dwSColor, tx1, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95751[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95748[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwSColor$[ebp]
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f666666
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _h$95753[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv608[ebp]
	fld	DWORD PTR tv608[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv609[ebp]
	fld	DWORD PTR tv609[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96109[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96110[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96108[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96108[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 842  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+0-0.5f,sy+0-0.5f,0.9f,1.0f), dwSColor, tx1, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95749[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95748[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwSColor$[ebp]
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f666666
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv633[ebp]
	fld	DWORD PTR tv633[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv634[ebp]
	fld	DWORD PTR tv634[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96112[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96113[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96111[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96111[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 843  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+w-0.5f,sy+h-0.5f,0.9f,1.0f), dwSColor, tx2, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95751[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95750[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwSColor$[ebp]
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f666666
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _h$95753[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv658[ebp]
	fld	DWORD PTR tv658[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95752[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv659[ebp]
	fld	DWORD PTR tv659[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96115[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96116[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96114[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96114[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 844  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+w-0.5f,sy+0-0.5f,0.9f,1.0f), dwSColor, tx2, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95749[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95750[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwSColor$[ebp]
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f666666
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv683[ebp]
	fld	DWORD PTR tv683[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95752[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv684[ebp]
	fld	DWORD PTR tv684[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96118[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96119[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96117[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96117[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 845  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+w-0.5f,sy+h-0.5f,0.9f,1.0f), dwSColor, tx2, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95751[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95750[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwSColor$[ebp]
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f666666
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	DWORD PTR _h$95753[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv708[ebp]
	fld	DWORD PTR tv708[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95752[ebp]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv709[ebp]
	fld	DWORD PTR tv709[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96121[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96122[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96120[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96120[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 846  :             *pVertices++ = InitFont2DVertex( D3DXVECTOR4(sx+0-0.5f,sy+0-0.5f,0.9f,1.0f), dwSColor, tx1, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95749[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95748[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _dwSColor$[ebp]
	push	eax
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f666666
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sy$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv733[ebp]
	fld	DWORD PTR tv733[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _sx$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv734[ebp]
	fld	DWORD PTR tv734[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96124[ebp]
	call	??0D3DXVECTOR4@@QAE@MMMM@Z		; D3DXVECTOR4::D3DXVECTOR4
	push	eax
	lea	ecx, DWORD PTR $T96125[ebp]
	push	ecx
	call	?InitFont2DVertex@@YA?AUFONT2DVERTEX@@ABUD3DXVECTOR4@@KMM@Z ; InitFont2DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 7
	mov	esi, eax
	lea	edi, DWORD PTR $T96123[ebp]
	rep movsd
	mov	ecx, 7
	lea	esi, DWORD PTR $T96123[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	edx, DWORD PTR _pVertices$[ebp]
	add	edx, 28					; 0000001cH
	mov	DWORD PTR _pVertices$[ebp], edx

; 847  :             dwNumTriangles += 2;

	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	add	eax, 2
	mov	DWORD PTR _dwNumTriangles$[ebp], eax

; 848  : 
; 849  :             if( dwNumTriangles*3 > (MAX_NUM_VERTICES-6) )

	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	imul	eax, 3
	cmp	eax, 294				; 00000126H
	jbe	SHORT $LN2@DrawTextA

; 850  :             {
; 851  :                 // Unlock, render, and relock the vertex buffer
; 852  :                 m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 853  :                 m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 854  :                 pVertices = NULL;

	mov	DWORD PTR _pVertices$[ebp], 0

; 855  :                 m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 856  :                 dwNumTriangles = 0L;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0
$LN2@DrawTextA:

; 857  :             }
; 858  :         }
; 859  : 
; 860  :         sx += w;

	fld	DWORD PTR _sx$[ebp]
	fadd	DWORD PTR _w$95752[ebp]
	fstp	DWORD PTR _sx$[ebp]

; 861  :     }

	jmp	$LN17@DrawTextA
$LN9@DrawTextA:

; 862  : 
; 863  :     // Unlock and render the vertex buffer
; 864  :     m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 865  :     if( dwNumTriangles > 0 )

	cmp	DWORD PTR _dwNumTriangles$[ebp], 0
	jbe	SHORT $LN1@DrawTextA

; 866  :         m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@DrawTextA:

; 867  : 
; 868  :     // Restore the modified renderstates
; 869  :     m_pd3dDevice->ApplyStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 870  :     return S_OK;

	xor	eax, eax
$LN13@DrawTextA:

; 871  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@DrawTextA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 932				; 000003a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN21@DrawTextA:
	DD	2
	DD	$LN20@DrawTextA
$LN20@DrawTextA:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN18@DrawTextA
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN19@DrawTextA
$LN19@DrawTextA:
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN18@DrawTextA:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	83					; 00000053H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?DrawTextA@CD3DFont@@QAEJMMKPBDKH@Z ENDP		; CD3DFont::DrawTextA
_TEXT	ENDS
PUBLIC	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	__real@bf800000
PUBLIC	__real@406fe00000000000
PUBLIC	__real@4024000000000000
PUBLIC	?Render3DText@CD3DFont@@QAEJPADKMMMM@Z		; CD3DFont::Render3DText
EXTRN	?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z:PROC ; D3DUtil_InitMaterial
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@406fe00000000000
CONST	SEGMENT
__real@406fe00000000000 DQ 0406fe00000000000r	; 255
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Render3DText@CD3DFont@@QAEJPADKMMMM@Z
_TEXT	SEGMENT
tv1009 = -1228						; size = 4
tv980 = -1228						; size = 4
tv951 = -1228						; size = 4
tv922 = -1228						; size = 4
tv893 = -1228						; size = 4
tv864 = -1228						; size = 4
tv848 = -1228						; size = 8
tv837 = -1228						; size = 8
tv765 = -1228						; size = 8
tv1008 = -1224						; size = 4
tv979 = -1224						; size = 4
tv950 = -1224						; size = 4
tv921 = -1224						; size = 4
tv892 = -1224						; size = 4
tv863 = -1224						; size = 4
tv806 = -1224						; size = 4
tv800 = -1224						; size = 4
tv794 = -1224						; size = 4
tv788 = -1224						; size = 4
tv241 = -1221						; size = 1
$T96137 = -1216						; size = 32
$T96138 = -1176						; size = 12
$T96139 = -1156						; size = 12
$T96140 = -1136						; size = 32
$T96141 = -1096						; size = 32
$T96142 = -1056						; size = 12
$T96143 = -1036						; size = 12
$T96144 = -1016						; size = 32
$T96145 = -976						; size = 32
$T96146 = -936						; size = 12
$T96147 = -916						; size = 12
$T96148 = -896						; size = 32
$T96149 = -856						; size = 32
$T96150 = -816						; size = 12
$T96151 = -796						; size = 12
$T96152 = -776						; size = 32
$T96153 = -736						; size = 32
$T96154 = -696						; size = 12
$T96155 = -676						; size = 12
$T96156 = -656						; size = 32
$T96157 = -616						; size = 32
$T96158 = -576						; size = 12
$T96159 = -556						; size = 12
$T96160 = -536						; size = 32
_h$95822 = -304						; size = 4
_w$95821 = -292						; size = 4
_ty2$95820 = -280					; size = 4
_tx2$95819 = -268					; size = 4
_ty1$95818 = -256					; size = 4
_tx1$95817 = -244					; size = 4
_a1$95813 = -232					; size = 4
_r1$95810 = -220					; size = 4
_b1$95807 = -208					; size = 4
_g1$95804 = -196					; size = 4
_dwNumTriangles$ = -184					; size = 4
_dwVertex$ = -172					; size = 4
_pVertices$ = -160					; size = 4
_c$ = -145						; size = 1
_fStartX$ = -136					; size = 4
_sz$95788 = -124					; size = 8
_y$ = -108						; size = 4
_x$ = -96						; size = 4
_mtrl$ = -84						; size = 68
_this$ = -8						; size = 4
_strText$ = 8						; size = 4
_dwFlags$ = 12						; size = 4
_r$ = 16						; size = 4
_g$ = 20						; size = 4
_b$ = 24						; size = 4
_a$ = 28						; size = 4
?Render3DText@CD3DFont@@QAEJPADKMMMM@Z PROC		; CD3DFont::Render3DText, COMDAT
; _this$ = ecx

; 881  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1228				; 000004ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-1228]
	mov	ecx, 307				; 00000133H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 882  :     D3DMATERIAL8 mtrl;
; 883  :     if( m_pd3dDevice == NULL )

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+84], 0
	jne	SHORT $LN12@Render3DTe

; 884  :         return E_FAIL;

	mov	eax, -2147467259			; 80004005H
	jmp	$LN13@Render3DTe
$LN12@Render3DTe:

; 885  : 
; 886  :     // Setup renderstate
; 887  :     m_pd3dDevice->CaptureStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+220]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 888  :     m_pd3dDevice->ApplyStateBlock( m_dwDrawTextStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1652]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 889  :     m_pd3dDevice->SetVertexShader( D3DFVF_FONT3DVERTEX );

	mov	esi, esp
	push	274					; 00000112H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+304]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 890  :     m_pd3dDevice->SetPixelShader( NULL );

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+352]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 891  :     m_pd3dDevice->SetStreamSource( 0, m_pVB, sizeof(FONT3DVERTEX) );

	mov	esi, esp
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+332]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 892  : 	m_pd3dDevice->SetRenderState( D3DRS_ZENABLE, TRUE );

	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 893  : 	m_pd3dDevice->SetRenderState( D3DRS_ZFUNC, D3DCMP_LESSEQUAL );

	mov	esi, esp
	push	4
	push	23					; 00000017H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 894  : 
; 895  :     D3DUtil_InitMaterial( mtrl, r, g, b, a );

	push	ecx
	fld	DWORD PTR _a$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _b$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _g$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _r$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _mtrl$[ebp]
	push	eax
	call	?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z ; D3DUtil_InitMaterial
	add	esp, 20					; 00000014H

; 896  :     m_pd3dDevice->SetMaterial(&mtrl);

	mov	esi, esp
	lea	eax, DWORD PTR _mtrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 897  : 
; 898  :     // Set filter states
; 899  :     if( dwFlags & D3DFONT_FILTERED )

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 4
	je	SHORT $LN11@Render3DTe

; 900  :     {
; 901  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MINFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	17					; 00000011H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 902  :         m_pd3dDevice->SetTextureStageState( 0, D3DTSS_MAGFILTER, D3DTEXF_LINEAR );

	mov	esi, esp
	push	2
	push	16					; 00000010H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+252]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@Render3DTe:

; 903  :     }
; 904  : 
; 905  :     // Position for each text element
; 906  :     FLOAT x = 0.0f;

	fldz
	fstp	DWORD PTR _x$[ebp]

; 907  :     FLOAT y = 0.0f;

	fldz
	fstp	DWORD PTR _y$[ebp]

; 908  : 
; 909  :     // Center the text block at the origin
; 910  :     if( dwFlags & D3DFONT_CENTERED )

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 1
	je	SHORT $LN10@Render3DTe

; 911  :     {
; 912  :         SIZE sz;
; 913  :         GetTextExtent( strText, &sz );

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _sz$95788[ebp]
	push	eax
	mov	ecx, DWORD PTR _strText$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTextExtent@CD3DFont@@QAEJPBDPAUtagSIZE@@M@Z ; CD3DFont::GetTextExtent

; 914  :         x = -(((FLOAT)sz.cx)/10.0f)/2.0f;

	fild	DWORD PTR _sz$95788[ebp]
	fdiv	QWORD PTR __real@4024000000000000
	fchs
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _x$[ebp]

; 915  :         y = -(((FLOAT)sz.cy)/10.0f)/2.0f;

	fild	DWORD PTR _sz$95788[ebp+4]
	fdiv	QWORD PTR __real@4024000000000000
	fchs
	fdiv	QWORD PTR __real@4000000000000000
	fstp	DWORD PTR _y$[ebp]
$LN10@Render3DTe:

; 916  :     }
; 917  : 
; 918  :     // Turn off culling for two-sided text
; 919  :     if( dwFlags & D3DFONT_TWOSIDED )

	mov	eax, DWORD PTR _dwFlags$[ebp]
	and	eax, 2
	je	SHORT $LN9@Render3DTe

; 920  :         m_pd3dDevice->SetRenderState( D3DRS_CULLMODE, D3DCULL_NONE );

	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+200]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@Render3DTe:

; 921  : 
; 922  :     FLOAT fStartX = x;

	fld	DWORD PTR _x$[ebp]
	fstp	DWORD PTR _fStartX$[ebp]

; 923  :     TCHAR c;
; 924  : 
; 925  :     // Fill vertex buffer
; 926  :     FONT3DVERTEX* pVertices;
; 927  :     DWORD         dwVertex       = 0L;

	mov	DWORD PTR _dwVertex$[ebp], 0

; 928  :     DWORD         dwNumTriangles = 0L;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0

; 929  :     m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@Render3DTe:

; 930  : 
; 931  :     while( c = *strText++ )

	mov	eax, DWORD PTR _strText$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$[ebp], cl
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR tv241[ebp], dl
	mov	eax, DWORD PTR _strText$[ebp]
	add	eax, 1
	mov	DWORD PTR _strText$[ebp], eax
	movsx	ecx, BYTE PTR tv241[ebp]
	test	ecx, ecx
	je	$LN7@Render3DTe

; 932  :     {
; 933  :         if( c == '\n' )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 10					; 0000000aH
	jne	SHORT $LN6@Render3DTe

; 934  :         {
; 935  :             x = fStartX;

	fld	DWORD PTR _fStartX$[ebp]
	fstp	DWORD PTR _x$[ebp]

; 936  :             y -= (m_fTexCoords[0][3]-m_fTexCoords[0][1])*m_dwTexHeight/10.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+124]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR tv765[ebp], eax
	mov	DWORD PTR tv765[ebp+4], 0
	fild	QWORD PTR tv765[ebp]
	fmulp	ST(1), ST(0)
	fdiv	QWORD PTR __real@4024000000000000
	fsubr	DWORD PTR _y$[ebp]
	fstp	DWORD PTR _y$[ebp]
$LN6@Render3DTe:

; 937  :         }
; 938  : 
; 939  :         if( c == _T('\01'))

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 1
	jne	$LN5@Render3DTe

; 940  :         {
; 941  :             // Unlock, render, and relock the vertex buffer
; 942  :             m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 943  :             m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 944  :             m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 945  :             dwNumTriangles = 0L;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0

; 946  : 
; 947  : 			float g1 = (float)((int)(0xFF&*strText++) / 255.f);

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv788[ebp], ecx
	fild	DWORD PTR tv788[ebp]
	fdiv	QWORD PTR __real@406fe00000000000
	fstp	DWORD PTR _g1$95804[ebp]
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 948  : 			float b1 = (float)((int)(0xFF&*strText++) / 255.f);

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv794[ebp], ecx
	fild	DWORD PTR tv794[ebp]
	fdiv	QWORD PTR __real@406fe00000000000
	fstp	DWORD PTR _b1$95807[ebp]
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 949  : 			float r1 = (float)((int)(0xFF&*strText++) / 255.f);

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv800[ebp], ecx
	fild	DWORD PTR tv800[ebp]
	fdiv	QWORD PTR __real@406fe00000000000
	fstp	DWORD PTR _r1$95810[ebp]
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 950  : 			float a1 = (float)((int)(0xFF&*strText++) / 255.f);

	mov	eax, DWORD PTR _strText$[ebp]
	movsx	ecx, BYTE PTR [eax]
	and	ecx, 255				; 000000ffH
	mov	DWORD PTR tv806[ebp], ecx
	fild	DWORD PTR tv806[ebp]
	fdiv	QWORD PTR __real@406fe00000000000
	fstp	DWORD PTR _a1$95813[ebp]
	mov	edx, DWORD PTR _strText$[ebp]
	add	edx, 1
	mov	DWORD PTR _strText$[ebp], edx

; 951  : 			
; 952  : 			D3DUtil_InitMaterial( mtrl, r1,b1,g1,a1 );/*((float)(*strText++))/255.0f, ((float)(*strText++))/255.0f, 

	push	ecx
	fld	DWORD PTR _a1$95813[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _g1$95804[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _b1$95807[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _r1$95810[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _mtrl$[ebp]
	push	eax
	call	?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL8@@MMMM@Z ; D3DUtil_InitMaterial
	add	esp, 20					; 00000014H

; 953  : 									//	((float)(*strText++))/255.0f, ((float)(*strText++))/255.0f );*/
; 954  : 			m_pd3dDevice->SetMaterial(&mtrl);

	mov	esi, esp
	lea	eax, DWORD PTR _mtrl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+168]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 955  : 			continue;

	jmp	$LN16@Render3DTe
$LN5@Render3DTe:

; 956  :         }
; 957  : 
; 958  :         if( c < 32 )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN4@Render3DTe

; 959  :             continue;

	jmp	$LN16@Render3DTe
$LN4@Render3DTe:

; 960  : 
; 961  :         FLOAT tx1 = m_fTexCoords[c-32][0];

	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+112]
	fstp	DWORD PTR _tx1$95817[ebp]

; 962  :         FLOAT ty1 = m_fTexCoords[c-32][1];

	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+116]
	fstp	DWORD PTR _ty1$95818[ebp]

; 963  :         FLOAT tx2 = m_fTexCoords[c-32][2];

	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+120]
	fstp	DWORD PTR _tx2$95819[ebp]

; 964  :         FLOAT ty2 = m_fTexCoords[c-32][3];

	movsx	eax, BYTE PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	shl	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [ecx+eax+124]
	fstp	DWORD PTR _ty2$95820[ebp]

; 965  : 
; 966  :         FLOAT w = (tx2-tx1) * m_dwTexWidth  / ( 10.0f * m_fTextScale );

	fld	DWORD PTR _tx2$95819[ebp]
	fsub	DWORD PTR _tx1$95817[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv837[ebp], ecx
	mov	DWORD PTR tv837[ebp+4], 0
	fild	QWORD PTR tv837[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+108]
	fmul	QWORD PTR __real@4024000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _w$95821[ebp]

; 967  :         FLOAT h = (ty2-ty1) * m_dwTexHeight / ( 10.0f * m_fTextScale );

	fld	DWORD PTR _ty2$95820[ebp]
	fsub	DWORD PTR _ty1$95818[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR tv848[ebp], ecx
	mov	DWORD PTR tv848[ebp+4], 0
	fild	QWORD PTR tv848[ebp]
	fmulp	ST(1), ST(0)
	mov	edx, DWORD PTR _this$[ebp]
	fld	DWORD PTR [edx+108]
	fmul	QWORD PTR __real@4024000000000000
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _h$95822[ebp]

; 968  : 
; 969  :         if( c != _T(' ') )

	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 32					; 00000020H
	je	$LN2@Render3DTe

; 970  :         {
; 971  :             *pVertices++ = InitFont3DVertex( D3DXVECTOR3(x+0,y+0,0), D3DXVECTOR3(0,0,-1), tx1, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95820[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95817[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96138[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _y$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fstp	DWORD PTR tv863[ebp]
	fld	DWORD PTR tv863[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fstp	DWORD PTR tv864[ebp]
	fld	DWORD PTR tv864[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96139[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	eax, DWORD PTR $T96140[ebp]
	push	eax
	call	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR $T96137[ebp]
	rep movsd
	mov	ecx, 8
	lea	esi, DWORD PTR $T96137[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _pVertices$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pVertices$[ebp], ecx

; 972  :             *pVertices++ = InitFont3DVertex( D3DXVECTOR3(x+0,y+h,0), D3DXVECTOR3(0,0,-1), tx1, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95818[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95817[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96142[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _h$95822[ebp]
	fstp	DWORD PTR tv892[ebp]
	fld	DWORD PTR tv892[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fstp	DWORD PTR tv893[ebp]
	fld	DWORD PTR tv893[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96143[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	eax, DWORD PTR $T96144[ebp]
	push	eax
	call	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR $T96141[ebp]
	rep movsd
	mov	ecx, 8
	lea	esi, DWORD PTR $T96141[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _pVertices$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pVertices$[ebp], ecx

; 973  :             *pVertices++ = InitFont3DVertex( D3DXVECTOR3(x+w,y+0,0), D3DXVECTOR3(0,0,-1), tx2, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95820[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95819[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96146[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _y$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fstp	DWORD PTR tv921[ebp]
	fld	DWORD PTR tv921[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _w$95821[ebp]
	fstp	DWORD PTR tv922[ebp]
	fld	DWORD PTR tv922[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96147[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	eax, DWORD PTR $T96148[ebp]
	push	eax
	call	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR $T96145[ebp]
	rep movsd
	mov	ecx, 8
	lea	esi, DWORD PTR $T96145[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _pVertices$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pVertices$[ebp], ecx

; 974  :             *pVertices++ = InitFont3DVertex( D3DXVECTOR3(x+w,y+h,0), D3DXVECTOR3(0,0,-1), tx2, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95818[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95819[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96150[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _h$95822[ebp]
	fstp	DWORD PTR tv950[ebp]
	fld	DWORD PTR tv950[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _w$95821[ebp]
	fstp	DWORD PTR tv951[ebp]
	fld	DWORD PTR tv951[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96151[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	eax, DWORD PTR $T96152[ebp]
	push	eax
	call	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR $T96149[ebp]
	rep movsd
	mov	ecx, 8
	lea	esi, DWORD PTR $T96149[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _pVertices$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pVertices$[ebp], ecx

; 975  :             *pVertices++ = InitFont3DVertex( D3DXVECTOR3(x+w,y+0,0), D3DXVECTOR3(0,0,-1), tx2, ty2 );

	push	ecx
	fld	DWORD PTR _ty2$95820[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx2$95819[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96154[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _y$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fstp	DWORD PTR tv979[ebp]
	fld	DWORD PTR tv979[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _w$95821[ebp]
	fstp	DWORD PTR tv980[ebp]
	fld	DWORD PTR tv980[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96155[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	eax, DWORD PTR $T96156[ebp]
	push	eax
	call	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR $T96153[ebp]
	rep movsd
	mov	ecx, 8
	lea	esi, DWORD PTR $T96153[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _pVertices$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pVertices$[ebp], ecx

; 976  :             *pVertices++ = InitFont3DVertex( D3DXVECTOR3(x+0,y+h,0), D3DXVECTOR3(0,0,-1), tx1, ty1 );

	push	ecx
	fld	DWORD PTR _ty1$95818[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tx1$95817[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf800000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96158[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _y$[ebp]
	fadd	DWORD PTR _h$95822[ebp]
	fstp	DWORD PTR tv1008[ebp]
	fld	DWORD PTR tv1008[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	fld	DWORD PTR _x$[ebp]
	fadd	QWORD PTR __real@0000000000000000
	fstp	DWORD PTR tv1009[ebp]
	fld	DWORD PTR tv1009[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T96159[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	push	eax
	lea	eax, DWORD PTR $T96160[ebp]
	push	eax
	call	?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ; InitFont3DVertex
	add	esp, 20					; 00000014H
	mov	ecx, 8
	mov	esi, eax
	lea	edi, DWORD PTR $T96157[ebp]
	rep movsd
	mov	ecx, 8
	lea	esi, DWORD PTR $T96157[ebp]
	mov	edi, DWORD PTR _pVertices$[ebp]
	rep movsd
	mov	ecx, DWORD PTR _pVertices$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _pVertices$[ebp], ecx

; 977  :             dwNumTriangles += 2;

	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	add	eax, 2
	mov	DWORD PTR _dwNumTriangles$[ebp], eax

; 978  : 
; 979  :             if( dwNumTriangles*3 > (MAX_NUM_VERTICES-6) )

	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	imul	eax, 3
	cmp	eax, 294				; 00000126H
	jbe	SHORT $LN2@Render3DTe

; 980  :             {
; 981  :                 // Unlock, render, and relock the vertex buffer
; 982  :                 m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 983  :                 m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 984  :                 m_pVB->Lock( 0, 0, (BYTE**)&pVertices, D3DLOCK_DISCARD );

	mov	esi, esp
	push	8192					; 00002000H
	lea	eax, DWORD PTR _pVertices$[ebp]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp

; 985  :                 dwNumTriangles = 0L;

	mov	DWORD PTR _dwNumTriangles$[ebp], 0
$LN2@Render3DTe:

; 986  :             }
; 987  :         }
; 988  : 
; 989  :         x += w;

	fld	DWORD PTR _x$[ebp]
	fadd	DWORD PTR _w$95821[ebp]
	fstp	DWORD PTR _x$[ebp]

; 990  :     }

	jmp	$LN16@Render3DTe
$LN7@Render3DTe:

; 991  : 
; 992  :     // Unlock and render the vertex buffer
; 993  :     m_pVB->Unlock();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 994  :     if( dwNumTriangles > 0 )

	cmp	DWORD PTR _dwNumTriangles$[ebp], 0
	jbe	SHORT $LN1@Render3DTe

; 995  :         m_pd3dDevice->DrawPrimitive( D3DPT_TRIANGLELIST, 0, dwNumTriangles );

	mov	esi, esp
	mov	eax, DWORD PTR _dwNumTriangles$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+280]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Render3DTe:

; 996  : 
; 997  :     // Restore the modified renderstates
; 998  :     m_pd3dDevice->ApplyStateBlock( m_dwSavedStateBlock );

	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+1648]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+216]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp

; 999  : 
; 1000 :     return S_OK;

	xor	eax, eax
$LN13@Render3DTe:

; 1001 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Render3DTe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 1228				; 000004ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
$LN21@Render3DTe:
	DD	3
	DD	$LN20@Render3DTe
$LN20@Render3DTe:
	DD	-84					; ffffffacH
	DD	68					; 00000044H
	DD	$LN17@Render3DTe
	DD	-124					; ffffff84H
	DD	8
	DD	$LN18@Render3DTe
	DD	-160					; ffffff60H
	DD	4
	DD	$LN19@Render3DTe
$LN19@Render3DTe:
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN18@Render3DTe:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
$LN17@Render3DTe:
	DB	109					; 0000006dH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	108					; 0000006cH
	DB	0
?Render3DText@CD3DFont@@QAEJPADKMMMM@Z ENDP		; CD3DFont::Render3DText
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.inl
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 179  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 180  :     x = fx;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]

; 181  :     y = fy;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]

; 182  :     z = fz;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]

; 183  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0FONT3DVERTEX@@QAE@XZ				; FONT3DVERTEX::FONT3DVERTEX
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\d3dfont.cpp
;	COMDAT ?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z
_TEXT	SEGMENT
_v$ = -36						; size = 32
$T96178 = 8						; size = 4
_p$ = 12						; size = 4
_n$ = 16						; size = 4
_tu$ = 20						; size = 4
_tv$ = 24						; size = 4
?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z PROC ; InitFont3DVertex, COMDAT

; 43   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 44   :     FONT3DVERTEX v;   v.p = p;   v.n = n;   v.tu = tu;   v.tv = tv;

	lea	ecx, DWORD PTR _v$[ebp]
	call	??0FONT3DVERTEX@@QAE@XZ
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+8], eax
	mov	eax, DWORD PTR _n$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _v$[ebp+12], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _v$[ebp+16], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR _v$[ebp+20], eax
	fld	DWORD PTR _tu$[ebp]
	fstp	DWORD PTR _v$[ebp+24]
	fld	DWORD PTR _tv$[ebp]
	fstp	DWORD PTR _v$[ebp+28]

; 45   :     return v;

	mov	ecx, 8
	lea	esi, DWORD PTR _v$[ebp]
	mov	edi, DWORD PTR $T96178[ebp]
	rep movsd
	mov	eax, DWORD PTR $T96178[ebp]

; 46   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@InitFont3D
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@InitFont3D:
	DD	1
	DD	$LN4@InitFont3D
$LN4@InitFont3D:
	DD	-36					; ffffffdcH
	DD	32					; 00000020H
	DD	$LN3@InitFont3D
$LN3@InitFont3D:
	DB	118					; 00000076H
	DB	0
?InitFont3DVertex@@YA?AUFONT3DVERTEX@@ABUD3DXVECTOR3@@0MM@Z ENDP ; InitFont3DVertex
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0FONT3DVERTEX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0FONT3DVERTEX@@QAE@XZ PROC				; FONT3DVERTEX::FONT3DVERTEX, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0D3DXVECTOR3@@QAE@XZ			; D3DXVECTOR3::D3DXVECTOR3
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0FONT3DVERTEX@@QAE@XZ ENDP				; FONT3DVERTEX::FONT3DVERTEX
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\d3d8\include\d3dx8math.h
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXVECTOR3@@QAE@XZ PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 89   :     D3DXVECTOR3() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
END
