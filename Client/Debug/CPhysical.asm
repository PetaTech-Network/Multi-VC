; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\CPhysical.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetPhysical@CPhysical@@QAEPAU_PHYSICAL_TYPE@@XZ ; CPhysical::GetPhysical
EXTRN	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ:PROC	; CEntity::GetEntity
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\game\cphysical.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?GetPhysical@CPhysical@@QAEPAU_PHYSICAL_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPhysical@CPhysical@@QAEPAU_PHYSICAL_TYPE@@XZ PROC	; CPhysical::GetPhysical, COMDAT
; _this$ = ecx

; 17   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 18   : 	return (PHYSICAL_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity

; 19   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPhysical@CPhysical@@QAEPAU_PHYSICAL_TYPE@@XZ ENDP	; CPhysical::GetPhysical
_TEXT	ENDS
PUBLIC	?GetMoveSpeed@CPhysical@@QAEXPAUVector3@@@Z	; CPhysical::GetMoveSpeed
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetMoveSpeed@CPhysical@@QAEXPAUVector3@@@Z
_TEXT	SEGMENT
_pPhysical$ = -20					; size = 4
_this$ = -8						; size = 4
_vecMoveSpeed$ = 8					; size = 4
?GetMoveSpeed@CPhysical@@QAEXPAUVector3@@@Z PROC	; CPhysical::GetMoveSpeed, COMDAT
; _this$ = ecx

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 25   : 	PHYSICAL_TYPE * pPhysical = (PHYSICAL_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPhysical$[ebp], eax

; 26   : 
; 27   : 	if(pPhysical)

	cmp	DWORD PTR _pPhysical$[ebp], 0
	je	SHORT $LN2@GetMoveSpe

; 28   : 	{
; 29   : 		memcpy(vecMoveSpeed, &pPhysical->vecMoveSpeed, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pPhysical$[ebp]
	add	eax, 112				; 00000070H
	push	eax
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@GetMoveSpe:

; 30   : 	}
; 31   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMoveSpeed@CPhysical@@QAEXPAUVector3@@@Z ENDP	; CPhysical::GetMoveSpeed
_TEXT	ENDS
PUBLIC	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z	; CPhysical::SetMoveSpeed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z
_TEXT	SEGMENT
_pPhysical$ = -20					; size = 4
_this$ = -8						; size = 4
_vecMoveSpeed$ = 8					; size = 12
?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z PROC		; CPhysical::SetMoveSpeed, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 	PHYSICAL_TYPE * pPhysical = (PHYSICAL_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPhysical$[ebp], eax

; 38   : 
; 39   : 	if(pPhysical)

	cmp	DWORD PTR _pPhysical$[ebp], 0
	je	SHORT $LN2@SetMoveSpe

; 40   : 	{
; 41   : 		memcpy(&pPhysical->vecMoveSpeed, &vecMoveSpeed, sizeof(Vector3));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPhysical$[ebp]
	add	ecx, 112				; 00000070H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@SetMoveSpe:

; 42   : 	}
; 43   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z ENDP		; CPhysical::SetMoveSpeed
_TEXT	ENDS
PUBLIC	?GetTurnSpeed@CPhysical@@QAEXPAUVector3@@@Z	; CPhysical::GetTurnSpeed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTurnSpeed@CPhysical@@QAEXPAUVector3@@@Z
_TEXT	SEGMENT
_pPhysical$ = -20					; size = 4
_this$ = -8						; size = 4
_vecTurnSpeed$ = 8					; size = 4
?GetTurnSpeed@CPhysical@@QAEXPAUVector3@@@Z PROC	; CPhysical::GetTurnSpeed, COMDAT
; _this$ = ecx

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 49   : 	PHYSICAL_TYPE * pPhysical = (PHYSICAL_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPhysical$[ebp], eax

; 50   : 
; 51   : 	if(pPhysical)

	cmp	DWORD PTR _pPhysical$[ebp], 0
	je	SHORT $LN2@GetTurnSpe

; 52   : 	{
; 53   : 		memcpy(vecTurnSpeed, &pPhysical->vecTurnSpeed, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pPhysical$[ebp]
	add	eax, 124				; 0000007cH
	push	eax
	mov	ecx, DWORD PTR _vecTurnSpeed$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@GetTurnSpe:

; 54   : 	}
; 55   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetTurnSpeed@CPhysical@@QAEXPAUVector3@@@Z ENDP	; CPhysical::GetTurnSpeed
_TEXT	ENDS
PUBLIC	?SetTurnSpeed@CPhysical@@QAEXUVector3@@@Z	; CPhysical::SetTurnSpeed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetTurnSpeed@CPhysical@@QAEXUVector3@@@Z
_TEXT	SEGMENT
_pPhysical$ = -20					; size = 4
_this$ = -8						; size = 4
_vecTurnSpeed$ = 8					; size = 12
?SetTurnSpeed@CPhysical@@QAEXUVector3@@@Z PROC		; CPhysical::SetTurnSpeed, COMDAT
; _this$ = ecx

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 61   : 	PHYSICAL_TYPE * pPhysical = (PHYSICAL_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPhysical$[ebp], eax

; 62   : 
; 63   : 	if(pPhysical)

	cmp	DWORD PTR _pPhysical$[ebp], 0
	je	SHORT $LN2@SetTurnSpe

; 64   : 	{
; 65   : 		memcpy(&pPhysical->vecTurnSpeed, &vecTurnSpeed, sizeof(Vector3));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _vecTurnSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pPhysical$[ebp]
	add	ecx, 124				; 0000007cH
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@SetTurnSpe:

; 66   : 	}
; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetTurnSpeed@CPhysical@@QAEXUVector3@@@Z ENDP		; CPhysical::SetTurnSpeed
_TEXT	ENDS
END
