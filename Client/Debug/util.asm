; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\util.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?dwPlayerPedPtrs@@3PAKA				; dwPlayerPedPtrs
PUBLIC	?dwHudColors@@3PAKA				; dwHudColors
_BSS	SEGMENT
?dwPlayerPedPtrs@@3PAKA DD 032H DUP (?)			; dwPlayerPedPtrs
_BSS	ENDS
_DATA	SEGMENT
?dwHudColors@@3PAKA DD 0778899ffH			; dwHudColors
	DD	0ff8c13ffH
	DD	0c715ffffH
	DD	020b2aaffH
	DD	0ffd720ffH
	DD	0dc143cffH
	DD	06495edffH
	DD	0ff1493ffH
	DD	0f4a460ffH
	DD	0ee82eeffH
	DD	08b4513ffH
	DD	0f0e68cffH
	DD	0148b8bffH
	DD	014ff7fffH
	DD	0556b2fffH
	DD	0191970ffH
_DATA	ENDS
PUBLIC	?Unprotect@@YAXKI@Z				; Unprotect
PUBLIC	__$ArrayPad$
PUBLIC	?GameToggleCheatCodes@@YGX_N@Z			; GameToggleCheatCodes
EXTRN	_memset:PROC
EXTRN	_memcpy:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\game\util.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?GameToggleCheatCodes@@YGX_N@Z
_TEXT	SEGMENT
_byteOriginalCode$209250 = -16				; size = 5
__$ArrayPad$ = -4					; size = 4
_bToggle$ = 8						; size = 1
?GameToggleCheatCodes@@YGX_N@Z PROC			; GameToggleCheatCodes, COMDAT

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-212]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 19   : 	Unprotect(0x602BDC, 16);

	push	16					; 00000010H
	push	6302684					; 00602bdcH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 20   : 
; 21   : 	if(bToggle)

	movzx	eax, BYTE PTR _bToggle$[ebp]
	test	eax, eax
	je	SHORT $LN2@GameToggle

; 22   : 	{
; 23   : 		BYTE byteOriginalCode[5] = { 0xE8, 0x34, 0x91, 0xEA, 0xFF };

	mov	BYTE PTR _byteOriginalCode$209250[ebp], 232 ; 000000e8H
	mov	BYTE PTR _byteOriginalCode$209250[ebp+1], 52 ; 00000034H
	mov	BYTE PTR _byteOriginalCode$209250[ebp+2], 145 ; 00000091H
	mov	BYTE PTR _byteOriginalCode$209250[ebp+3], 234 ; 000000eaH
	mov	BYTE PTR _byteOriginalCode$209250[ebp+4], 255 ; 000000ffH

; 24   : 		*(BYTE *)0x602BDC = 0x50;

	mov	BYTE PTR ds:6302684, 80			; 00000050H

; 25   : 		memcpy((void *)0x602BE7, byteOriginalCode, sizeof(byteOriginalCode));

	push	5
	lea	eax, DWORD PTR _byteOriginalCode$209250[ebp]
	push	eax
	push	6302695					; 00602be7H
	call	_memcpy
	add	esp, 12					; 0000000cH

; 26   : 	}
; 27   : 	else

	jmp	SHORT $LN3@GameToggle
$LN2@GameToggle:

; 28   : 	{
; 29   : 		*(BYTE *)0x602BDC = 0x90;

	mov	BYTE PTR ds:6302684, 144		; 00000090H

; 30   : 		memset((void *)0x602BE7, 0x90, 5);

	push	5
	push	144					; 00000090H
	push	6302695					; 00602be7H
	call	_memset
	add	esp, 12					; 0000000cH
$LN3@GameToggle:

; 31   : 	}
; 32   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@GameToggle
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN7@GameToggle:
	DD	1
	DD	$LN6@GameToggle
$LN6@GameToggle:
	DD	-16					; fffffff0H
	DD	5
	DD	$LN5@GameToggle
$LN5@GameToggle:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	79					; 0000004fH
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?GameToggleCheatCodes@@YGX_N@Z ENDP			; GameToggleCheatCodes
_TEXT	ENDS
PUBLIC	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ	; GamePool_FindPlayerPed
EXTRN	?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z:PROC ; CPools::GetPlayerPedFromIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ
_TEXT	SEGMENT
?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ PROC	; GamePool_FindPlayerPed, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 39   : 	return CPools::GetPlayerPedFromIndex(0);

	push	0
	call	?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z ; CPools::GetPlayerPedFromIndex

; 40   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ENDP	; GamePool_FindPlayerPed
_TEXT	ENDS
PUBLIC	?GameGetWeaponModelFromWeapon@@YGHH@Z		; GameGetWeaponModelFromWeapon
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GameGetWeaponModelFromWeapon@@YGHH@Z
_TEXT	SEGMENT
tv64 = -196						; size = 4
_iWeaponID$ = 8						; size = 4
?GameGetWeaponModelFromWeapon@@YGHH@Z PROC		; GameGetWeaponModelFromWeapon, COMDAT

; 46   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 47   : 	switch(iWeaponID)

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 35			; 00000023H
	ja	$LN36@GameGetWea
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN40@GameGetWea[edx*4]
$LN35@GameGetWea:

; 48   : 	{
; 49   : 	case WEAPON_BRASSKNUCKLE:
; 50   : 		return WEAPON_MODEL_BRASSKNUCKLE;

	mov	eax, 259				; 00000103H
	jmp	$LN38@GameGetWea
$LN34@GameGetWea:

; 51   : 
; 52   : 	case WEAPON_SCREWDRIVER:
; 53   : 		return WEAPON_MODEL_SCREWDRIVER;

	mov	eax, 260				; 00000104H
	jmp	$LN38@GameGetWea
$LN33@GameGetWea:

; 54   : 
; 55   : 	case WEAPON_GOLFCLUB:
; 56   : 		return WEAPON_MODEL_GOLFCLUB;

	mov	eax, 261				; 00000105H
	jmp	$LN38@GameGetWea
$LN32@GameGetWea:

; 57   : 
; 58   : 	case WEAPON_NITESTICK:
; 59   : 		return WEAPON_MODEL_NITESTICK;

	mov	eax, 262				; 00000106H
	jmp	$LN38@GameGetWea
$LN31@GameGetWea:

; 60   : 
; 61   : 	case WEAPON_KNIFECUR:
; 62   : 		return WEAPON_MODEL_KNIFECUR;

	mov	eax, 263				; 00000107H
	jmp	$LN38@GameGetWea
$LN30@GameGetWea:

; 63   : 
; 64   : 	case WEAPON_BASEBALL_BAT:
; 65   : 		return WEAPON_MODEL_BASEBALL_BAT;

	mov	eax, 264				; 00000108H
	jmp	$LN38@GameGetWea
$LN29@GameGetWea:

; 66   : 
; 67   : 	case WEAPON_HAMMER:
; 68   : 		return WEAPON_MODEL_HAMMER;

	mov	eax, 265				; 00000109H
	jmp	$LN38@GameGetWea
$LN28@GameGetWea:

; 69   : 
; 70   : 	case WEAPON_CLEAVER:
; 71   : 		return WEAPON_MODEL_CLEAVER;

	mov	eax, 266				; 0000010aH
	jmp	$LN38@GameGetWea
$LN27@GameGetWea:

; 72   : 
; 73   : 	case WEAPON_MACHETE:
; 74   : 		return WEAPON_MODEL_MACHETE;

	mov	eax, 267				; 0000010bH
	jmp	$LN38@GameGetWea
$LN26@GameGetWea:

; 75   : 
; 76   : 	case WEAPON_KATANA:
; 77   : 		return WEAPON_MODEL_KATANA;

	mov	eax, 268				; 0000010cH
	jmp	$LN38@GameGetWea
$LN25@GameGetWea:

; 78   : 
; 79   : 	case WEAPON_CHAINSAW:
; 80   : 		return WEAPON_MODEL_CHAINSAW;

	mov	eax, 269				; 0000010dH
	jmp	$LN38@GameGetWea
$LN24@GameGetWea:

; 81   : 
; 82   : 	case WEAPON_GRENADE:
; 83   : 		return WEAPON_MODEL_GRENADE;

	mov	eax, 270				; 0000010eH
	jmp	$LN38@GameGetWea
$LN23@GameGetWea:

; 84   : 
; 85   : 	case WEAPON_TEARGAS:
; 86   : 		return WEAPON_MODEL_TEARGAS;

	mov	eax, 271				; 0000010fH
	jmp	$LN38@GameGetWea
$LN22@GameGetWea:

; 87   : 
; 88   : 	case WEAPON_MOLOTOV:
; 89   : 		return WEAPON_MODEL_MOLOTOV;

	mov	eax, 272				; 00000110H
	jmp	$LN38@GameGetWea
$LN21@GameGetWea:

; 90   : 
; 91   : 	case WEAPON_MISSILE:
; 92   : 		return WEAPON_MODEL_MISSILE;

	mov	eax, 273				; 00000111H
	jmp	$LN38@GameGetWea
$LN20@GameGetWea:

; 93   : 
; 94   : 	case WEAPON_COLT45:
; 95   : 		return WEAPON_MODEL_COLT45;

	mov	eax, 274				; 00000112H
	jmp	$LN38@GameGetWea
$LN19@GameGetWea:

; 96   : 
; 97   : 	case WEAPON_PYTHON:
; 98   : 		return WEAPON_MODEL_PYTHON;

	mov	eax, 275				; 00000113H
	jmp	$LN38@GameGetWea
$LN18@GameGetWea:

; 99   : 
; 100  : 	case WEAPON_CHROMEGUN:
; 101  : 		return WEAPON_MODEL_CHROMEGUN;

	mov	eax, 277				; 00000115H
	jmp	SHORT $LN38@GameGetWea
$LN17@GameGetWea:

; 102  : 
; 103  : 	case WEAPON_SHOTGSPA:
; 104  : 		return WEAPON_MODEL_SHOTGSPA;

	mov	eax, 278				; 00000116H
	jmp	SHORT $LN38@GameGetWea
$LN16@GameGetWea:

; 105  : 
; 106  : 	case WEAPON_BUDDYSHOT:
; 107  : 		return WEAPON_MODEL_BUDDYSHOT;

	mov	eax, 279				; 00000117H
	jmp	SHORT $LN38@GameGetWea
$LN15@GameGetWea:

; 108  : 
; 109  : 	case WEAPON_TEC9:
; 110  : 		return WEAPON_MODEL_TEC9;

	mov	eax, 281				; 00000119H
	jmp	SHORT $LN38@GameGetWea
$LN14@GameGetWea:

; 111  : 
; 112  : 	case WEAPON_UZI:
; 113  : 		return WEAPON_MODEL_UZI;

	mov	eax, 282				; 0000011aH
	jmp	SHORT $LN38@GameGetWea
$LN13@GameGetWea:

; 114  : 
; 115  : 	case WEAPON_INGRAMSL:
; 116  : 		return WEAPON_MODEL_INGRAMSL;

	mov	eax, 283				; 0000011bH
	jmp	SHORT $LN38@GameGetWea
$LN12@GameGetWea:

; 117  : 
; 118  : 	case WEAPON_MP5LNG:
; 119  : 		return WEAPON_MODEL_MP5LNG;

	mov	eax, 284				; 0000011cH
	jmp	SHORT $LN38@GameGetWea
$LN11@GameGetWea:

; 120  : 
; 121  : 	case WEAPON_M4:
; 122  : 		return WEAPON_MODEL_M4;

	mov	eax, 280				; 00000118H
	jmp	SHORT $LN38@GameGetWea
$LN10@GameGetWea:

; 123  : 
; 124  : 	case WEAPON_RUGER:
; 125  : 		return WEAPON_MODEL_RUGER;

	mov	eax, 276				; 00000114H
	jmp	SHORT $LN38@GameGetWea
$LN9@GameGetWea:

; 126  : 
; 127  : 	case WEAPON_SNIPER:
; 128  : 		return WEAPON_MODEL_SNIPER;

	mov	eax, 285				; 0000011dH
	jmp	SHORT $LN38@GameGetWea
$LN8@GameGetWea:

; 129  : 
; 130  : 	case WEAPON_LASER:
; 131  : 		return WEAPON_MODEL_LASER;

	mov	eax, 286				; 0000011eH
	jmp	SHORT $LN38@GameGetWea
$LN7@GameGetWea:

; 132  : 
; 133  : 	case WEAPON_ROCKETLA:
; 134  : 		return WEAPON_MODEL_ROCKETLA;

	mov	eax, 287				; 0000011fH
	jmp	SHORT $LN38@GameGetWea
$LN6@GameGetWea:

; 135  : 
; 136  : 	case WEAPON_FLAME:
; 137  : 		return WEAPON_MODEL_FLAME;

	mov	eax, 288				; 00000120H
	jmp	SHORT $LN38@GameGetWea
$LN5@GameGetWea:

; 138  : 
; 139  : 	case WEAPON_M60:
; 140  : 		return WEAPON_MODEL_M60;

	mov	eax, 289				; 00000121H
	jmp	SHORT $LN38@GameGetWea
$LN4@GameGetWea:

; 141  : 
; 142  : 	case WEAPON_MINIGUN:
; 143  : 		return WEAPON_MODEL_MINIGUN;

	mov	eax, 290				; 00000122H
	jmp	SHORT $LN38@GameGetWea
$LN3@GameGetWea:

; 144  : 
; 145  : 	case WEAPON_BOMB:
; 146  : 		return WEAPON_MODEL_BOMB;

	mov	eax, 291				; 00000123H
	jmp	SHORT $LN38@GameGetWea
$LN2@GameGetWea:

; 147  : 
; 148  : 	case WEAPON_HELICANNON:
; 149  : 		return WEAPON_MODEL_M60;

	mov	eax, 289				; 00000121H
	jmp	SHORT $LN38@GameGetWea
$LN1@GameGetWea:

; 150  : 
; 151  : 	case WEAPON_CAMERA:
; 152  : 		return WEAPON_MODEL_CAMERA;

	mov	eax, 292				; 00000124H
	jmp	SHORT $LN38@GameGetWea
$LN36@GameGetWea:

; 153  : 	}
; 154  : 
; 155  : 	return -1;

	or	eax, -1
$LN38@GameGetWea:

; 156  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN40@GameGetWea:
	DD	$LN35@GameGetWea
	DD	$LN34@GameGetWea
	DD	$LN33@GameGetWea
	DD	$LN32@GameGetWea
	DD	$LN31@GameGetWea
	DD	$LN30@GameGetWea
	DD	$LN29@GameGetWea
	DD	$LN28@GameGetWea
	DD	$LN27@GameGetWea
	DD	$LN26@GameGetWea
	DD	$LN25@GameGetWea
	DD	$LN24@GameGetWea
	DD	$LN36@GameGetWea
	DD	$LN23@GameGetWea
	DD	$LN22@GameGetWea
	DD	$LN21@GameGetWea
	DD	$LN20@GameGetWea
	DD	$LN19@GameGetWea
	DD	$LN18@GameGetWea
	DD	$LN17@GameGetWea
	DD	$LN16@GameGetWea
	DD	$LN15@GameGetWea
	DD	$LN14@GameGetWea
	DD	$LN13@GameGetWea
	DD	$LN12@GameGetWea
	DD	$LN11@GameGetWea
	DD	$LN10@GameGetWea
	DD	$LN9@GameGetWea
	DD	$LN8@GameGetWea
	DD	$LN7@GameGetWea
	DD	$LN6@GameGetWea
	DD	$LN5@GameGetWea
	DD	$LN4@GameGetWea
	DD	$LN3@GameGetWea
	DD	$LN2@GameGetWea
	DD	$LN1@GameGetWea
?GameGetWeaponModelFromWeapon@@YGHH@Z ENDP		; GameGetWeaponModelFromWeapon
_TEXT	ENDS
PUBLIC	?TranslateColorCodeToRGBA@@YGKH@Z		; TranslateColorCodeToRGBA
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TranslateColorCodeToRGBA@@YGKH@Z
_TEXT	SEGMENT
_iCode$ = 8						; size = 4
?TranslateColorCodeToRGBA@@YGKH@Z PROC			; TranslateColorCodeToRGBA, COMDAT

; 181  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 182  : 	if(iCode < sizeof(dwHudColors)) {

	cmp	DWORD PTR _iCode$[ebp], 64		; 00000040H
	jae	SHORT $LN1@TranslateC

; 183  : 		return dwHudColors[iCode];

	mov	eax, DWORD PTR _iCode$[ebp]
	mov	eax, DWORD PTR ?dwHudColors@@3PAKA[eax*4]
	jmp	SHORT $LN2@TranslateC
$LN1@TranslateC:

; 184  : 	}
; 185  : 
; 186  : 	return 0xFFFFFFFF;

	or	eax, -1
$LN2@TranslateC:

; 187  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?TranslateColorCodeToRGBA@@YGKH@Z ENDP			; TranslateColorCodeToRGBA
_TEXT	ENDS
PUBLIC	?InitPlayerPedPtrRecords@@YGXXZ			; InitPlayerPedPtrRecords
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InitPlayerPedPtrRecords@@YGXXZ
_TEXT	SEGMENT
?InitPlayerPedPtrRecords@@YGXXZ PROC			; InitPlayerPedPtrRecords, COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 193  : 	memset(&dwPlayerPedPtrs[0], 0, sizeof(DWORD) * MAX_PLAYERS);

	push	200					; 000000c8H
	push	0
	push	OFFSET ?dwPlayerPedPtrs@@3PAKA		; dwPlayerPedPtrs
	call	_memset
	add	esp, 12					; 0000000cH

; 194  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?InitPlayerPedPtrRecords@@YGXXZ ENDP			; InitPlayerPedPtrRecords
_TEXT	ENDS
PUBLIC	?SetPlayerPedPtrRecord@@YGXEK@Z			; SetPlayerPedPtrRecord
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetPlayerPedPtrRecord@@YGXEK@Z
_TEXT	SEGMENT
_bytePlayer$ = 8					; size = 1
_dwPedPtr$ = 12						; size = 4
?SetPlayerPedPtrRecord@@YGXEK@Z PROC			; SetPlayerPedPtrRecord, COMDAT

; 199  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 200  : 	dwPlayerPedPtrs[bytePlayer] = dwPedPtr;

	movzx	eax, BYTE PTR _bytePlayer$[ebp]
	mov	ecx, DWORD PTR _dwPedPtr$[ebp]
	mov	DWORD PTR ?dwPlayerPedPtrs@@3PAKA[eax*4], ecx

; 201  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?SetPlayerPedPtrRecord@@YGXEK@Z ENDP			; SetPlayerPedPtrRecord
_TEXT	ENDS
PUBLIC	?FindPlayerNumFromPedPtr@@YGEK@Z		; FindPlayerNumFromPedPtr
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FindPlayerNumFromPedPtr@@YGEK@Z
_TEXT	SEGMENT
_x$209315 = -5						; size = 1
_dwPedPtr$ = 8						; size = 4
?FindPlayerNumFromPedPtr@@YGEK@Z PROC			; FindPlayerNumFromPedPtr, COMDAT

; 206  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 207  : 	for(BYTE x = 0; x < MAX_PLAYERS; x++)

	mov	BYTE PTR _x$209315[ebp], 0
	jmp	SHORT $LN4@FindPlayer
$LN3@FindPlayer:
	mov	al, BYTE PTR _x$209315[ebp]
	add	al, 1
	mov	BYTE PTR _x$209315[ebp], al
$LN4@FindPlayer:
	movzx	eax, BYTE PTR _x$209315[ebp]
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN2@FindPlayer

; 208  : 	{
; 209  : 		if(dwPlayerPedPtrs[x] == dwPedPtr)

	movzx	eax, BYTE PTR _x$209315[ebp]
	mov	ecx, DWORD PTR ?dwPlayerPedPtrs@@3PAKA[eax*4]
	cmp	ecx, DWORD PTR _dwPedPtr$[ebp]
	jne	SHORT $LN1@FindPlayer

; 210  : 		{
; 211  : 			return x;

	mov	al, BYTE PTR _x$209315[ebp]
	jmp	SHORT $LN5@FindPlayer
$LN1@FindPlayer:

; 212  : 		}
; 213  : 	}

	jmp	SHORT $LN3@FindPlayer
$LN2@FindPlayer:

; 214  : 
; 215  : 	return 0;

	xor	al, al
$LN5@FindPlayer:

; 216  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?FindPlayerNumFromPedPtr@@YGEK@Z ENDP			; FindPlayerNumFromPedPtr
_TEXT	ENDS
EXTRN	__imp__VirtualProtect@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Unprotect@@YAXKI@Z
_TEXT	SEGMENT
_dwOldProt$ = -8					; size = 4
_dwAddress$ = 8						; size = 4
_sSize$ = 12						; size = 4
?Unprotect@@YAXKI@Z PROC				; Unprotect, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 222  : 	DWORD dwOldProt;
; 223  : 	VirtualProtect((LPVOID)dwAddress, sSize, PAGE_EXECUTE_READWRITE, &dwOldProt);

	mov	esi, esp
	lea	eax, DWORD PTR _dwOldProt$[ebp]
	push	eax
	push	64					; 00000040H
	mov	ecx, DWORD PTR _sSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwAddress$[ebp]
	push	edx
	call	DWORD PTR __imp__VirtualProtect@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 224  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Unprotect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Unprotect:
	DD	1
	DD	$LN4@Unprotect
$LN4@Unprotect:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Unprotect
$LN3@Unprotect:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	0
?Unprotect@@YAXKI@Z ENDP				; Unprotect
_TEXT	ENDS
END
