; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\net\CTextManager.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??0CTextManager@@QAE@XZ				; CTextManager::CTextManager
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\net\ctextmanager.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CTextManager@@QAE@XZ
_TEXT	SEGMENT
_textID$209249 = -17					; size = 1
_this$ = -8						; size = 4
??0CTextManager@@QAE@XZ PROC				; CTextManager::CTextManager, COMDAT
; _this$ = ecx

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 19   : 	for(EntityId textID = 0; textID < MAX_TEXTS; textID++) 

	mov	BYTE PTR _textID$209249[ebp], 0
	jmp	SHORT $LN3@CTextManag
$LN2@CTextManag:
	mov	al, BYTE PTR _textID$209249[ebp]
	add	al, 1
	mov	BYTE PTR _textID$209249[ebp], al
$LN3@CTextManag:
	movzx	eax, BYTE PTR _textID$209249[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@CTextManag

; 20   : 	{
; 21   : 		m_bTextSlotState[textID] = FALSE;

	movzx	eax, BYTE PTR _textID$209249[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 22   : 		m_pTexts[textID] = NULL;

	movzx	eax, BYTE PTR _textID$209249[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+512], 0
	jmp	SHORT $LN2@CTextManag
$LN4@CTextManag:

; 23   : 	}
; 24   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CTextManager@@QAE@XZ ENDP				; CTextManager::CTextManager
_TEXT	ENDS
PUBLIC	?Delete@CTextManager@@QAE_NE@Z			; CTextManager::Delete
PUBLIC	??1CTextManager@@QAE@XZ				; CTextManager::~CTextManager
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CTextManager@@QAE@XZ
_TEXT	SEGMENT
_i$209256 = -17						; size = 1
_this$ = -8						; size = 4
??1CTextManager@@QAE@XZ PROC				; CTextManager::~CTextManager, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 28   : 	for(EntityId i = 0; i < MAX_TEXTS; i++)

	mov	BYTE PTR _i$209256[ebp], 0
	jmp	SHORT $LN3@CTextManag@2
$LN2@CTextManag@2:
	mov	al, BYTE PTR _i$209256[ebp]
	add	al, 1
	mov	BYTE PTR _i$209256[ebp], al
$LN3@CTextManag@2:
	movzx	eax, BYTE PTR _i$209256[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@CTextManag@2

; 29   : 	{
; 30   : 		Delete(i);

	movzx	eax, BYTE PTR _i$209256[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@CTextManager@@QAE_NE@Z		; CTextManager::Delete
	jmp	SHORT $LN2@CTextManag@2
$LN4@CTextManag@2:

; 31   : 	}
; 32   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CTextManager@@QAE@XZ ENDP				; CTextManager::~CTextManager
_TEXT	ENDS
PUBLIC	?New@CTextManager@@QAEEEKPADHMM0@Z		; CTextManager::New
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0CText@@QAE@EKPADHMM0@Z:PROC			; CText::CText
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?New@CTextManager@@QAEEEKPADHMM0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?New@CTextManager@@QAEEEKPADHMM0@Z$0
__ehfuncinfo$?New@CTextManager@@QAEEEKPADHMM0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?New@CTextManager@@QAEEEKPADHMM0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?New@CTextManager@@QAEEEKPADHMM0@Z
_TEXT	SEGMENT
tv84 = -244						; size = 4
$T209330 = -236						; size = 4
$T209331 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_TextID$ = 8						; size = 1
_color$ = 12						; size = 4
_szFontName$ = 16					; size = 4
_iSize$ = 20						; size = 4
_posX$ = 24						; size = 4
_posY$ = 28						; size = 4
_szText$ = 32						; size = 4
?New@CTextManager@@QAEEEKPADHMM0@Z PROC			; CTextManager::New, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?New@CTextManager@@QAEEEKPADHMM0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 36   : 	if(TextID == MAX_TEXTS) return -1;		

	movzx	eax, BYTE PTR _TextID$[ebp]
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN2@New
	or	al, 255					; 000000ffH
	jmp	$LN3@New
$LN2@New:

; 37   : 
; 38   : 	m_pTexts[TextID] = new CText(TextID, color, szFontName, iSize, posX, posY, szText);

	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209331[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209331[ebp], 0
	je	SHORT $LN5@New
	mov	eax, DWORD PTR _szText$[ebp]
	push	eax
	push	ecx
	fld	DWORD PTR _posY$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _posX$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _iSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szFontName$[ebp]
	push	edx
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _TextID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T209331[ebp]
	call	??0CText@@QAE@EKPADHMM0@Z		; CText::CText
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN6@New
$LN5@New:
	mov	DWORD PTR tv84[ebp], 0
$LN6@New:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T209330[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T209330[ebp]
	mov	DWORD PTR [ecx+eax*4+512], edx

; 39   : 
; 40   : 	if(m_pTexts[TextID])

	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+512], 0
	je	SHORT $LN1@New

; 41   : 	{
; 42   : 		m_bTextSlotState[TextID] = TRUE;

	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 1

; 43   : 		return TextID;

	mov	al, BYTE PTR _TextID$[ebp]
	jmp	SHORT $LN3@New
$LN1@New:

; 44   : 	}
; 45   : 	return -1;

	or	al, 255					; 000000ffH
$LN3@New:

; 46   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?New@CTextManager@@QAEEEKPADHMM0@Z$0:
	mov	eax, DWORD PTR $T209331[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?New@CTextManager@@QAEEEKPADHMM0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?New@CTextManager@@QAEEEKPADHMM0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?New@CTextManager@@QAEEEKPADHMM0@Z ENDP			; CTextManager::New
PUBLIC	?GetFreeSlot@CTextManager@@QAEEXZ		; CTextManager::GetFreeSlot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetFreeSlot@CTextManager@@QAEEXZ
_TEXT	SEGMENT
_id$209279 = -17					; size = 1
_this$ = -8						; size = 4
?GetFreeSlot@CTextManager@@QAEEXZ PROC			; CTextManager::GetFreeSlot, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	for(EntityId id = 0; id < MAX_TEXTS; id++)

	mov	BYTE PTR _id$209279[ebp], 0
	jmp	SHORT $LN4@GetFreeSlo
$LN3@GetFreeSlo:
	mov	al, BYTE PTR _id$209279[ebp]
	add	al, 1
	mov	BYTE PTR _id$209279[ebp], al
$LN4@GetFreeSlo:
	movzx	eax, BYTE PTR _id$209279[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN2@GetFreeSlo

; 51   : 	{
; 52   : 		if(m_pTexts[id] == NULL)

	movzx	eax, BYTE PTR _id$209279[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+512], 0
	jne	SHORT $LN1@GetFreeSlo

; 53   : 			return id;

	mov	al, BYTE PTR _id$209279[ebp]
	jmp	SHORT $LN5@GetFreeSlo
$LN1@GetFreeSlo:

; 54   : 	}

	jmp	SHORT $LN3@GetFreeSlo
$LN2@GetFreeSlo:

; 55   : 	return false;

	xor	al, al
$LN5@GetFreeSlo:

; 56   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFreeSlot@CTextManager@@QAEEXZ ENDP			; CTextManager::GetFreeSlot
_TEXT	ENDS
PUBLIC	?Process@CTextManager@@QAEXXZ			; CTextManager::Process
EXTRN	?Process@CText@@QAEXXZ:PROC			; CText::Process
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Process@CTextManager@@QAEXXZ
_TEXT	SEGMENT
_id$209287 = -17					; size = 1
_this$ = -8						; size = 4
?Process@CTextManager@@QAEXXZ PROC			; CTextManager::Process, COMDAT
; _this$ = ecx

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 60   : 	for(EntityId id = 0; id < MAX_TEXTS; id++)

	mov	BYTE PTR _id$209287[ebp], 0
	jmp	SHORT $LN4@Process
$LN3@Process:
	mov	al, BYTE PTR _id$209287[ebp]
	add	al, 1
	mov	BYTE PTR _id$209287[ebp], al
$LN4@Process:
	movzx	eax, BYTE PTR _id$209287[ebp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN5@Process

; 61   : 	{
; 62   : 		if(m_pTexts[id] == NULL)

	movzx	eax, BYTE PTR _id$209287[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+512], 0
	jne	SHORT $LN1@Process

; 63   : 			continue;

	jmp	SHORT $LN3@Process
$LN1@Process:

; 64   : 
; 65   : 		m_pTexts[id]->Process();

	movzx	eax, BYTE PTR _id$209287[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+eax*4+512]
	call	?Process@CText@@QAEXXZ			; CText::Process
	jmp	SHORT $LN3@Process
$LN5@Process:

; 66   : 	}
; 67   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Process@CTextManager@@QAEXXZ ENDP			; CTextManager::Process
_TEXT	ENDS
PUBLIC	??_GCText@@QAEPAXI@Z				; CText::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Delete@CTextManager@@QAE_NE@Z
_TEXT	SEGMENT
tv82 = -232						; size = 4
$T209353 = -224						; size = 4
$T209354 = -212						; size = 4
_this$ = -8						; size = 4
_TextID$ = 8						; size = 1
?Delete@CTextManager@@QAE_NE@Z PROC			; CTextManager::Delete, COMDAT
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 	if(TextID > MAX_TEXTS || !m_pTexts[TextID])

	movzx	eax, BYTE PTR _TextID$[ebp]
	cmp	eax, 128				; 00000080H
	jg	SHORT $LN1@Delete
	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+512], 0
	jne	SHORT $LN2@Delete
$LN1@Delete:

; 72   : 	{
; 73   : 		return false;

	xor	al, al
	jmp	SHORT $LN3@Delete
$LN2@Delete:

; 74   : 	}
; 75   : 
; 76   : 	m_bTextSlotState[TextID] = false;

	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0

; 77   : 	delete m_pTexts[TextID];

	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+512]
	mov	DWORD PTR $T209354[ebp], edx
	mov	eax, DWORD PTR $T209354[ebp]
	mov	DWORD PTR $T209353[ebp], eax
	cmp	DWORD PTR $T209353[ebp], 0
	je	SHORT $LN5@Delete
	push	1
	mov	ecx, DWORD PTR $T209353[ebp]
	call	??_GCText@@QAEPAXI@Z
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN6@Delete
$LN5@Delete:
	mov	DWORD PTR tv82[ebp], 0
$LN6@Delete:

; 78   : 	m_pTexts[TextID] = NULL;

	movzx	eax, BYTE PTR _TextID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+512], 0

; 79   : 
; 80   : 	return true;

	mov	al, 1
$LN3@Delete:

; 81   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@CTextManager@@QAE_NE@Z ENDP			; CTextManager::Delete
_TEXT	ENDS
EXTRN	??1CText@@QAE@XZ:PROC				; CText::~CText
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCText@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCText@@QAEPAXI@Z PROC				; CText::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CText@@QAE@XZ			; CText::~CText
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCText@@QAEPAXI@Z ENDP				; CText::`scalar deleting destructor'
_TEXT	ENDS
END
