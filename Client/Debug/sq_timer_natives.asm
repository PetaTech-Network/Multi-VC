; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\scripting\sq_timer_natives.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ	; CScripts::GetTimerPool
PUBLIC	??0SQObjectPtr@@QAE@ABU0@@Z			; SQObjectPtr::SQObjectPtr
PUBLIC	??1SQObjectPtr@@QAE@XZ				; SQObjectPtr::~SQObjectPtr
PUBLIC	??4SQObjectPtr@@QAEAAU0@ABU0@@Z			; SQObjectPtr::operator=
PUBLIC	?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z	; stack_get
PUBLIC	??0SQObjectPtr@@QAE@XZ				; SQObjectPtr::SQObjectPtr
PUBLIC	?sq_setTimer@@YAHPAUSQVM@@@Z			; sq_setTimer
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_sq_pushinteger:PROC
EXTRN	?Set@CTimerPool@@QAEHPAUSQVM@@USQObjectPtr@@HHHPAU3@@Z:PROC ; CTimerPool::Set
EXTRN	?pScripts@@3PAVCScripts@@A:DWORD		; pScripts
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	_sq_pushbool:PROC
EXTRN	_sq_getinteger:PROC
EXTRN	_sq_gettop:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT xdata$x
; File d:\vice-players-master\client\scripting\sq_timer_natives.cpp
xdata$x	SEGMENT
__unwindtable$?sq_setTimer@@YAHPAUSQVM@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?sq_setTimer@@YAHPAUSQVM@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?sq_setTimer@@YAHPAUSQVM@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?sq_setTimer@@YAHPAUSQVM@@@Z$2
__ehfuncinfo$?sq_setTimer@@YAHPAUSQVM@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?sq_setTimer@@YAHPAUSQVM@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?sq_setTimer@@YAHPAUSQVM@@@Z
_TEXT	SEGMENT
tv195 = -388						; size = 4
tv194 = -384						; size = 4
tv198 = -380						; size = 4
tv147 = -380						; size = 4
$T209306 = -372						; size = 4
$T209307 = -360						; size = 4
$T209308 = -348						; size = 4
$T209311 = -336						; size = 4
$T209312 = -324						; size = 4
$T209313 = -312						; size = 4
_iTimerId$ = -108					; size = 4
_i$209266 = -96						; size = 4
_pArguments$ = -84					; size = 4
_iArgCount$ = -72					; size = 4
_pFunction$ = -60					; size = 8
_repeations$ = -44					; size = 4
_interval$ = -32					; size = 4
_iTop$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pVM$ = 8						; size = 4
?sq_setTimer@@YAHPAUSQVM@@@Z PROC			; sq_setTimer, COMDAT

; 19   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?sq_setTimer@@YAHPAUSQVM@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 376				; 00000178H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-388]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 20   : 	int iTop = sq_gettop(pVM) - 1;

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_gettop
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _iTop$[ebp], eax

; 21   : 
; 22   : 	int interval;
; 23   : 	int repeations;
; 24   : 	sq_getinteger(pVM, -iTop + 1, &interval);

	lea	eax, DWORD PTR _interval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iTop$[ebp]
	neg	ecx
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _pVM$[ebp]
	push	edx
	call	_sq_getinteger
	add	esp, 12					; 0000000cH

; 25   : 	sq_getinteger(pVM, -iTop + 2, &repeations);

	lea	eax, DWORD PTR _repeations$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iTop$[ebp]
	neg	ecx
	add	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _pVM$[ebp]
	push	edx
	call	_sq_getinteger
	add	esp, 12					; 0000000cH

; 26   : 
; 27   : 	if(interval < 1 || repeations < -1 || repeations == 0)

	cmp	DWORD PTR _interval$[ebp], 1
	jl	SHORT $LN6@sq_setTime
	cmp	DWORD PTR _repeations$[ebp], -1
	jl	SHORT $LN6@sq_setTime
	cmp	DWORD PTR _repeations$[ebp], 0
	jne	SHORT $LN7@sq_setTime
$LN6@sq_setTime:

; 28   : 	{
; 29   : 		sq_pushbool(pVM, false);

	push	0
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushbool
	add	esp, 8

; 30   : 		return 1;

	mov	eax, 1
	jmp	$LN8@sq_setTime
$LN7@sq_setTime:

; 31   : 	}
; 32   : 
; 33   : 	SQObjectPtr pFunction;

	lea	ecx, DWORD PTR _pFunction$[ebp]
	call	??0SQObjectPtr@@QAE@XZ			; SQObjectPtr::SQObjectPtr
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 34   : 	pFunction = stack_get(pVM, -iTop);

	mov	eax, DWORD PTR _iTop$[ebp]
	neg	eax
	push	eax
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z ; stack_get
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _pFunction$[ebp]
	call	??4SQObjectPtr@@QAEAAU0@ABU0@@Z		; SQObjectPtr::operator=

; 35   : 
; 36   : 	int iArgCount = iTop - 3;

	mov	eax, DWORD PTR _iTop$[ebp]
	sub	eax, 3
	mov	DWORD PTR _iArgCount$[ebp], eax

; 37   : 	SQObjectPtr * pArguments = NULL;

	mov	DWORD PTR _pArguments$[ebp], 0

; 38   : 	if(iArgCount > 0)

	cmp	DWORD PTR _iArgCount$[ebp], 0
	jle	$LN5@sq_setTime

; 39   : 	{
; 40   : 		pArguments = new SQObjectPtr[iArgCount];

	mov	eax, DWORD PTR _iArgCount$[ebp]
	mov	DWORD PTR $T209306[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T209306[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T209308[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T209308[ebp], 0
	je	SHORT $LN10@sq_setTime
	mov	ecx, DWORD PTR $T209308[ebp]
	mov	edx, DWORD PTR $T209306[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1SQObjectPtr@@QAE@XZ		; SQObjectPtr::~SQObjectPtr
	push	OFFSET ??0SQObjectPtr@@QAE@XZ		; SQObjectPtr::SQObjectPtr
	mov	eax, DWORD PTR $T209306[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR $T209308[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T209308[ebp]
	add	edx, 4
	mov	DWORD PTR tv147[ebp], edx
	jmp	SHORT $LN11@sq_setTime
$LN10@sq_setTime:
	mov	DWORD PTR tv147[ebp], 0
$LN11@sq_setTime:
	mov	eax, DWORD PTR tv147[ebp]
	mov	DWORD PTR $T209307[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR $T209307[ebp]
	mov	DWORD PTR _pArguments$[ebp], ecx

; 41   : 
; 42   : 		for (int i = 3; i < iTop; i++)

	mov	DWORD PTR _i$209266[ebp], 3
	jmp	SHORT $LN4@sq_setTime
$LN3@sq_setTime:
	mov	eax, DWORD PTR _i$209266[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209266[ebp], eax
$LN4@sq_setTime:
	mov	eax, DWORD PTR _i$209266[ebp]
	cmp	eax, DWORD PTR _iTop$[ebp]
	jge	SHORT $LN5@sq_setTime

; 43   : 			pArguments[i - 3] = stack_get(pVM, -iTop + i);

	mov	eax, DWORD PTR _iTop$[ebp]
	neg	eax
	add	eax, DWORD PTR _i$209266[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z ; stack_get
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _i$209266[ebp]
	mov	eax, DWORD PTR _pArguments$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8-24]
	call	??4SQObjectPtr@@QAEAAU0@ABU0@@Z		; SQObjectPtr::operator=
	jmp	SHORT $LN3@sq_setTime
$LN5@sq_setTime:

; 44   : 	}
; 45   : 
; 46   : 	int iTimerId = pScripts->GetTimerPool()->Set(pVM, pFunction, interval, repeations, iArgCount, pArguments);

	mov	eax, DWORD PTR _pArguments$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iArgCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _repeations$[ebp]
	push	edx
	mov	eax, DWORD PTR _interval$[ebp]
	push	eax
	sub	esp, 8
	mov	ecx, esp
	mov	DWORD PTR $T209311[ebp], esp
	lea	edx, DWORD PTR _pFunction$[ebp]
	push	edx
	call	??0SQObjectPtr@@QAE@ABU0@@Z		; SQObjectPtr::SQObjectPtr
	mov	DWORD PTR tv198[ebp], eax
	mov	eax, DWORD PTR tv198[ebp]
	mov	DWORD PTR tv194[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ ; CScripts::GetTimerPool
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, eax
	call	?Set@CTimerPool@@QAEHPAUSQVM@@USQObjectPtr@@HHHPAU3@@Z ; CTimerPool::Set
	mov	DWORD PTR tv195[ebp], eax
	mov	edx, DWORD PTR tv195[ebp]
	mov	DWORD PTR _iTimerId$[ebp], edx

; 47   : 	if(iTimerId != -1)

	cmp	DWORD PTR _iTimerId$[ebp], -1
	je	SHORT $LN1@sq_setTime

; 48   : 	{
; 49   : 		sq_pushinteger(pVM, iTimerId);

	mov	eax, DWORD PTR _iTimerId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	_sq_pushinteger
	add	esp, 8

; 50   : 		return 1;

	mov	DWORD PTR $T209312[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pFunction$[ebp]
	call	??1SQObjectPtr@@QAE@XZ			; SQObjectPtr::~SQObjectPtr
	mov	eax, DWORD PTR $T209312[ebp]
	jmp	SHORT $LN8@sq_setTime
$LN1@sq_setTime:

; 51   : 	}
; 52   : 	sq_pushbool(pVM, false);

	push	0
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushbool
	add	esp, 8

; 53   : 	return 1;

	mov	DWORD PTR $T209313[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _pFunction$[ebp]
	call	??1SQObjectPtr@@QAE@XZ			; SQObjectPtr::~SQObjectPtr
	mov	eax, DWORD PTR $T209313[ebp]
$LN8@sq_setTime:

; 54   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@sq_setTime
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 388				; 00000184H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN20@sq_setTime:
	DD	3
	DD	$LN19@sq_setTime
$LN19@sq_setTime:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN15@sq_setTime
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN16@sq_setTime
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN17@sq_setTime
$LN17@sq_setTime:
	DB	112					; 00000070H
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
$LN16@sq_setTime:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN15@sq_setTime:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?sq_setTimer@@YAHPAUSQVM@@@Z$0:
	lea	ecx, DWORD PTR _pFunction$[ebp]
	jmp	??1SQObjectPtr@@QAE@XZ			; SQObjectPtr::~SQObjectPtr
__unwindfunclet$?sq_setTimer@@YAHPAUSQVM@@@Z$1:
	mov	eax, DWORD PTR $T209308[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__unwindfunclet$?sq_setTimer@@YAHPAUSQVM@@@Z$2:
	mov	ecx, DWORD PTR $T209311[ebp]
	jmp	??1SQObjectPtr@@QAE@XZ			; SQObjectPtr::~SQObjectPtr
__ehhandler$?sq_setTimer@@YAHPAUSQVM@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-392]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?sq_setTimer@@YAHPAUSQVM@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?sq_setTimer@@YAHPAUSQVM@@@Z ENDP			; sq_setTimer
PUBLIC	??_ESQObjectPtr@@QAEPAXI@Z			; SQObjectPtr::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_ESQObjectPtr@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ESQObjectPtr@@QAEPAXI@Z PROC				; SQObjectPtr::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1SQObjectPtr@@QAE@XZ		; SQObjectPtr::~SQObjectPtr
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SQObjectPtr@@QAE@XZ			; SQObjectPtr::~SQObjectPtr
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESQObjectPtr@@QAEPAXI@Z ENDP				; SQObjectPtr::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	?sq_isTimerActive@@YAHPAUSQVM@@@Z		; sq_isTimerActive
EXTRN	?IsActive@CTimerPool@@QAE_NH@Z:PROC		; CTimerPool::IsActive
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sq_isTimerActive@@YAHPAUSQVM@@@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_pVM$ = 8						; size = 4
?sq_isTimerActive@@YAHPAUSQVM@@@Z PROC			; sq_isTimerActive, COMDAT

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 59   : 	int id;
; 60   : 	sq_getinteger(pVM, -1, &id);

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	_sq_getinteger
	add	esp, 12					; 0000000cH

; 61   : 
; 62   : 	sq_pushbool(pVM, pScripts->GetTimerPool()->IsActive(id));

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ ; CScripts::GetTimerPool
	mov	ecx, eax
	call	?IsActive@CTimerPool@@QAE_NH@Z		; CTimerPool::IsActive
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _pVM$[ebp]
	push	edx
	call	_sq_pushbool
	add	esp, 8

; 63   : 	return 1;

	mov	eax, 1

; 64   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sq_isTimer
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@sq_isTimer:
	DD	1
	DD	$LN4@sq_isTimer
$LN4@sq_isTimer:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@sq_isTimer
$LN3@sq_isTimer:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?sq_isTimerActive@@YAHPAUSQVM@@@Z ENDP			; sq_isTimerActive
_TEXT	ENDS
PUBLIC	?sq_killTimer@@YAHPAUSQVM@@@Z			; sq_killTimer
EXTRN	?Kill@CTimerPool@@QAE_NH@Z:PROC			; CTimerPool::Kill
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sq_killTimer@@YAHPAUSQVM@@@Z
_TEXT	SEGMENT
_id$ = -8						; size = 4
_pVM$ = 8						; size = 4
?sq_killTimer@@YAHPAUSQVM@@@Z PROC			; sq_killTimer, COMDAT

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 69   : 	int id;
; 70   : 	sq_getinteger(pVM, -1, &id);

	lea	eax, DWORD PTR _id$[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	_sq_getinteger
	add	esp, 12					; 0000000cH

; 71   : 
; 72   : 	sq_pushbool(pVM, pScripts->GetTimerPool()->Kill(id));

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ ; CScripts::GetTimerPool
	mov	ecx, eax
	call	?Kill@CTimerPool@@QAE_NH@Z		; CTimerPool::Kill
	movzx	ecx, al
	push	ecx
	mov	edx, DWORD PTR _pVM$[ebp]
	push	edx
	call	_sq_pushbool
	add	esp, 8

; 73   : 	return 1;

	mov	eax, 1

; 74   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@sq_killTim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@sq_killTim:
	DD	1
	DD	$LN4@sq_killTim
$LN4@sq_killTim:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@sq_killTim
$LN3@sq_killTim:
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	0
?sq_killTimer@@YAHPAUSQVM@@@Z ENDP			; sq_killTimer
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\squirrel\sqobject.h
_TEXT	ENDS
;	COMDAT ??0SQObjectPtr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SQObjectPtr@@QAE@XZ PROC				; SQObjectPtr::SQObjectPtr, COMDAT
; _this$ = ecx

; 174  : 	SQObjectPtr()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	{
; 176  : 		SQ_OBJECT_RAWINIT()
; 177  : 		_type=OT_NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 16777217		; 01000001H

; 178  : 		_unVal.pUserPointer=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 179  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SQObjectPtr@@QAE@XZ ENDP				; SQObjectPtr::SQObjectPtr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0SQObjectPtr@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_o$ = 8							; size = 4
??0SQObjectPtr@@QAE@ABU0@@Z PROC			; SQObjectPtr::SQObjectPtr, COMDAT
; _this$ = ecx

; 180  : 	SQObjectPtr(const SQObjectPtr &o)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 181  : 	{
; 182  : 		SQ_OBJECT_RAWINIT()
; 183  : 		_type=o._type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _o$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 184  : 		_unVal=o._unVal;

	mov	eax, DWORD PTR _o$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 185  : 		__AddRef(_type,_unVal);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 134217728				; 08000000H
	je	SHORT $LN2@SQObjectPt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
$LN2@SQObjectPt:

; 186  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0SQObjectPtr@@QAE@ABU0@@Z ENDP			; SQObjectPtr::SQObjectPtr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1SQObjectPtr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SQObjectPtr@@QAE@XZ PROC				; SQObjectPtr::~SQObjectPtr, COMDAT
; _this$ = ecx

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 228  : 		__Release(_type,_unVal);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 134217728				; 08000000H
	je	SHORT $LN2@SQObjectPt@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@SQObjectPt@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SQObjectPt@2:

; 229  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SQObjectPtr@@QAE@XZ ENDP				; SQObjectPtr::~SQObjectPtr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4SQObjectPtr@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_unOldVal$ = -32					; size = 4
_tOldType$ = -20					; size = 4
_this$ = -8						; size = 4
_obj$ = 8						; size = 4
??4SQObjectPtr@@QAEAAU0@ABU0@@Z PROC			; SQObjectPtr::operator=, COMDAT
; _this$ = ecx

; 232  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 		SQObjectType tOldType;
; 234  : 		SQObjectValue unOldVal;
; 235  : 		tOldType=_type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tOldType$[ebp], ecx

; 236  : 		unOldVal=_unVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _unOldVal$[ebp], ecx

; 237  : 		_unVal = obj._unVal;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 238  : 		_type = obj._type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 239  : 		__AddRef(_type,_unVal);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 134217728				; 08000000H
	je	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
$LN2@operator:

; 240  : 		__Release(tOldType,unOldVal);

	mov	eax, DWORD PTR _tOldType$[ebp]
	and	eax, 134217728				; 08000000H
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _unOldVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _unOldVal$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _unOldVal$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@operator
	mov	eax, DWORD PTR _unOldVal$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _unOldVal$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:

; 241  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@operator:
	DD	1
	DD	$LN6@operator
$LN6@operator:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@operator
$LN5@operator:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
??4SQObjectPtr@@QAEAAU0@ABU0@@Z ENDP			; SQObjectPtr::operator=
_TEXT	ENDS
EXTRN	?GetUp@SQVM@@QAEAAUSQObjectPtr@@H@Z:PROC	; SQVM::GetUp
EXTRN	?GetAt@SQVM@@QAEAAUSQObjectPtr@@H@Z:PROC	; SQVM::GetAt
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\squirrel\sqvm.h
;	COMDAT ?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z
_TEXT	SEGMENT
tv74 = -208						; size = 4
$T209368 = -200						; size = 4
_v$ = 8							; size = 4
_idx$ = 12						; size = 4
?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z PROC		; stack_get, COMDAT

; 183  : inline SQObjectPtr &stack_get(HSQUIRRELVM v,SQInteger idx){return ((idx>=0)?(v->GetAt(idx+v->_stackbase-1)):(v->GetUp(idx)));}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN3@stack_get
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _idx$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?GetAt@SQVM@@QAEAAUSQObjectPtr@@H@Z	; SQVM::GetAt
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@stack_get
$LN3@stack_get:
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	?GetUp@SQVM@@QAEAAUSQObjectPtr@@H@Z	; SQVM::GetUp
	mov	DWORD PTR tv74[ebp], eax
$LN4@stack_get:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T209368[ebp], edx
	mov	eax, DWORD PTR $T209368[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z ENDP		; stack_get
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\scripting\cscripts.h
_TEXT	ENDS
;	COMDAT ?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ PROC	; CScripts::GetTimerPool, COMDAT
; _this$ = ecx

; 34   : 	CTimerPool * GetTimerPool() { return  m_pTimerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+2600]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ ENDP	; CScripts::GetTimerPool
_TEXT	ENDS
END
