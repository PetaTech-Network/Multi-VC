; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\net\CRemotePlayer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	__real@00000000
PUBLIC	??0_CAMERA_AIM@@QAE@XZ				; _CAMERA_AIM::_CAMERA_AIM
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	??0_MATRIX4X4@@QAE@XZ				; _MATRIX4X4::_MATRIX4X4
PUBLIC	??0CRemotePlayer@@QAE@XZ			; CRemotePlayer::CRemotePlayer
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT __real@00000000
; File d:\vice-players-master\client\net\cremoteplayer.cpp
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CRemotePlayer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CRemotePlayer@@QAE@XZ PROC				; CRemotePlayer::CRemotePlayer, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0_MATRIX4X4@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	call	??0_CAMERA_AIM@@QAE@XZ

; 24   : 	m_byteUpdateFromNetwork = UPDATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0

; 25   : 	m_playerID = INVALID_ENTITY_ID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 255			; 000000ffH

; 26   : 	m_bIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 27   : 	m_bIsWasted = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 28   : 	m_pPlayerPed = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 29   : 	m_wKeys = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+18], ax

; 30   : 	m_byteUpdateFromNetwork = UPDATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0

; 31   : 	m_iJustSpawned = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+155], 0

; 32   : 	m_fRotation = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+108]

; 33   : 	m_vehicleID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+128], 0

; 34   : 	m_bytePassengerSeat = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+129], 0

; 35   : 	m_bHasAim = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0

; 36   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRemotePlayer@@QAE@XZ ENDP				; CRemotePlayer::CRemotePlayer
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_MATRIX4X4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_MATRIX4X4@@QAE@XZ PROC				; _MATRIX4X4::_MATRIX4X4, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_MATRIX4X4@@QAE@XZ ENDP				; _MATRIX4X4::_MATRIX4X4
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0_CAMERA_AIM@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_CAMERA_AIM@@QAE@XZ PROC				; _CAMERA_AIM::_CAMERA_AIM, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_CAMERA_AIM@@QAE@XZ ENDP				; _CAMERA_AIM::_CAMERA_AIM
_TEXT	ENDS
PUBLIC	??_GCPlayerPed@@QAEPAXI@Z			; CPlayerPed::`scalar deleting destructor'
PUBLIC	??1CRemotePlayer@@QAE@XZ			; CRemotePlayer::~CRemotePlayer
EXTRN	?Destroy@CPlayerPed@@QAEXXZ:PROC		; CPlayerPed::Destroy
EXTRN	?SetHealth@CPlayerPed@@QAEXM@Z:PROC		; CPlayerPed::SetHealth
EXTRN	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z:PROC ; CPlayerPed::RemoveFromVehicleAndPutAt
EXTRN	?IsInVehicle@CPlayerPed@@QAEHXZ:PROC		; CPlayerPed::IsInVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CRemotePlayer@@QAE@XZ
_TEXT	SEGMENT
tv79 = -232						; size = 4
$T209503 = -224						; size = 4
$T209504 = -212						; size = 4
_this$ = -8						; size = 4
??1CRemotePlayer@@QAE@XZ PROC				; CRemotePlayer::~CRemotePlayer, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   : 	if(m_pPlayerPed) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN6@CRemotePla

; 43   : 		if(m_pPlayerPed->IsInVehicle()) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN1@CRemotePla

; 44   : 			m_pPlayerPed->RemoveFromVehicleAndPutAt(0.0f,0.0f,0.0f);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt
$LN1@CRemotePla:

; 45   : 		}
; 46   : 		m_pPlayerPed->SetHealth(0.0f);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 47   : 		m_pPlayerPed->Destroy();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Destroy@CPlayerPed@@QAEXXZ		; CPlayerPed::Destroy

; 48   : 		delete m_pPlayerPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T209504[ebp], ecx
	mov	edx, DWORD PTR $T209504[ebp]
	mov	DWORD PTR $T209503[ebp], edx
	cmp	DWORD PTR $T209503[ebp], 0
	je	SHORT $LN5@CRemotePla
	push	1
	mov	ecx, DWORD PTR $T209503[ebp]
	call	??_GCPlayerPed@@QAEPAXI@Z
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN6@CRemotePla
$LN5@CRemotePla:
	mov	DWORD PTR tv79[ebp], 0
$LN6@CRemotePla:

; 49   : 	}
; 50   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CRemotePlayer@@QAE@XZ ENDP				; CRemotePlayer::~CRemotePlayer
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1CPlayerPed@@QAE@XZ:PROC			; CPlayerPed::~CPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCPlayerPed@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCPlayerPed@@QAEPAXI@Z PROC				; CPlayerPed::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPlayerPed@@QAE@XZ			; CPlayerPed::~CPlayerPed
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPlayerPed@@QAEPAXI@Z ENDP				; CPlayerPed::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@42c80000
PUBLIC	?UpdateInCarMatrixAndSpeed@CRemotePlayer@@QAEXPAU_MATRIX4X4@@PAUVector3@@1@Z ; CRemotePlayer::UpdateInCarMatrixAndSpeed
PUBLIC	?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z	; CVehicleManager::GetAt
PUBLIC	?UpdateOnFootPosition@CRemotePlayer@@QAEXUVector3@@@Z ; CRemotePlayer::UpdateOnFootPosition
PUBLIC	?HandleVehicleEntryExit@CRemotePlayer@@QAEXXZ	; CRemotePlayer::HandleVehicleEntryExit
PUBLIC	?GetLocalPlayer@CPlayerManager@@QAEPAVCLocalPlayer@@XZ ; CPlayerManager::GetLocalPlayer
PUBLIC	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
PUBLIC	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
PUBLIC	?Process@CRemotePlayer@@QAEXXZ			; CRemotePlayer::Process
EXTRN	?SetArmour@CPlayerPed@@QAEXM@Z:PROC		; CPlayerPed::SetArmour
EXTRN	?SetRotation@CPlayerPed@@QAEXM@Z:PROC		; CPlayerPed::SetRotation
EXTRN	?SetHealth@CVehicle@@QAEXM@Z:PROC		; CVehicle::SetHealth
EXTRN	?SetShootingFlags@CPlayerPed@@QAEXE@Z:PROC	; CPlayerPed::SetShootingFlags
EXTRN	?GiveWeapon@CPlayerPed@@QAEHHH@Z:PROC		; CPlayerPed::GiveWeapon
EXTRN	?SetArmedWeapon@CPlayerPed@@QAEHH@Z:PROC	; CPlayerPed::SetArmedWeapon
EXTRN	?GetCurrentWeapon@CPlayerPed@@QAEHXZ:PROC	; CPlayerPed::GetCurrentWeapon
EXTRN	?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z:PROC ; CPlayerPed::SetCurrentAim
EXTRN	?SetKeys@CPlayerPed@@QAEXG@Z:PROC		; CPlayerPed::SetKeys
EXTRN	?pNetowkManager@@3PAVCNetworkManager@@A:DWORD	; pNetowkManager
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Process@CRemotePlayer@@QAEXXZ
_TEXT	SEGMENT
_pVehicle$209283 = -56					; size = 4
_pLocalPlayer$ = -44					; size = 4
_pVehicleManager$ = -32					; size = 4
_pPool$ = -20						; size = 4
_this$ = -8						; size = 4
?Process@CRemotePlayer@@QAEXXZ PROC			; CRemotePlayer::Process, COMDAT
; _this$ = ecx

; 55   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   : 	CPlayerManager *pPool = pNetowkManager->GetPlayerManager();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	DWORD PTR _pPool$[ebp], eax

; 57   : 	CVehicleManager *pVehicleManager = pNetowkManager->GetVehicleManager();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
	mov	DWORD PTR _pVehicleManager$[ebp], eax

; 58   : 	CLocalPlayer *pLocalPlayer = pPool->GetLocalPlayer();

	mov	ecx, DWORD PTR _pPool$[ebp]
	call	?GetLocalPlayer@CPlayerManager@@QAEPAVCLocalPlayer@@XZ ; CPlayerManager::GetLocalPlayer
	mov	DWORD PTR _pLocalPlayer$[ebp], eax

; 59   : 
; 60   : 	if(m_bIsActive)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN12@Process

; 61   : 	{
; 62   : 		if(m_pPlayerPed != NULL)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN11@Process

; 63   : 		{
; 64   : 			// skip these frames if they've only just spawned.
; 65   : 			if(m_iJustSpawned != 0) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+155]
	test	ecx, ecx
	je	SHORT $LN10@Process

; 66   : 				m_iJustSpawned--;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+155]
	sub	cl, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+155], cl

; 67   : 				return;

	jmp	$LN13@Process
$LN10@Process:

; 68   : 			}
; 69   : 
; 70   : 			HandleVehicleEntryExit();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HandleVehicleEntryExit@CRemotePlayer@@QAEXXZ ; CRemotePlayer::HandleVehicleEntryExit

; 71   : 
; 72   : 			if(m_byteUpdateFromNetwork == UPDATE_TYPE_FULL_ONFOOT)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	cmp	ecx, 1
	jne	$LN9@Process

; 73   : 			{					
; 74   : 				//m_pPlayerPed->CheckAndRepairInvisProblems();
; 75   : 
; 76   : 				// Handle dead shit
; 77   : 				if(m_byteHealth == 0) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN8@Process

; 78   : 
; 79   : 					//pChatWindow->AddDebugMessage("%s has 0 health so killing\n",
; 80   : 						//pNetowkManager->GetPlayerManager()->GetAt(m_playerID));
; 81   : 
; 82   : 					m_wKeys = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+18], ax

; 83   : 					m_vehicleID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+128], 0

; 84   : 					m_pPlayerPed->SetKeys(m_wKeys);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+18]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetKeys@CPlayerPed@@QAEXG@Z		; CPlayerPed::SetKeys

; 85   : 					m_pPlayerPed->SetHealth(0.0f);

	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 86   : 					m_bIsWasted = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 1

; 87   : 					m_bIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 88   : 					return;

	jmp	$LN13@Process
$LN8@Process:

; 89   : 				}
; 90   : 
; 91   : 				// Update the ingame player.
; 92   : 				UpdateOnFootPosition(m_matWorld.vPos);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateOnFootPosition@CRemotePlayer@@QAEXUVector3@@@Z ; CRemotePlayer::UpdateOnFootPosition

; 93   : 
; 94   : 				if(m_bHasAim)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+156]
	test	ecx, ecx
	je	SHORT $LN7@Process

; 95   : 				{
; 96   : 					// Update aiming.
; 97   : 					m_pPlayerPed->SetCurrentAim(&m_Aim);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 160				; 000000a0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z ; CPlayerPed::SetCurrentAim

; 98   : 					m_bHasAim = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 0
$LN7@Process:

; 99   : 				}
; 100  : 
; 101  : 				// update current weapon
; 102  : 				if(m_pPlayerPed->GetCurrentWeapon() != m_byteCurrentWeapon) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEHXZ	; CPlayerPed::GetCurrentWeapon
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+118]
	cmp	eax, edx
	je	SHORT $LN5@Process

; 103  : 					m_pPlayerPed->SetArmedWeapon(m_byteCurrentWeapon);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+118]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetArmedWeapon@CPlayerPed@@QAEHH@Z	; CPlayerPed::SetArmedWeapon

; 104  : 
; 105  : 					// they don't have the new weapon, give it to them
; 106  : 					if(m_pPlayerPed->GetCurrentWeapon() != m_byteCurrentWeapon) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?GetCurrentWeapon@CPlayerPed@@QAEHXZ	; CPlayerPed::GetCurrentWeapon
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+118]
	cmp	eax, edx
	je	SHORT $LN5@Process

; 107  : 						m_pPlayerPed->GiveWeapon(m_byteCurrentWeapon, 9999);

	push	9999					; 0000270fH
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+118]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?GiveWeapon@CPlayerPed@@QAEHHH@Z	; CPlayerPed::GiveWeapon

; 108  : 						m_pPlayerPed->SetArmedWeapon(m_byteCurrentWeapon);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+118]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetArmedWeapon@CPlayerPed@@QAEHH@Z	; CPlayerPed::SetArmedWeapon
$LN5@Process:

; 109  : 					}
; 110  : 				}
; 111  : 
; 112  : 				m_pPlayerPed->SetShootingFlags(m_byteShootingFlags);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+130]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetShootingFlags@CPlayerPed@@QAEXE@Z	; CPlayerPed::SetShootingFlags

; 113  : 
; 114  : 				m_byteUpdateFromNetwork = UPDATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0
	jmp	SHORT $LN3@Process
$LN9@Process:

; 115  : 			}
; 116  : 			else if(m_byteUpdateFromNetwork == UPDATE_TYPE_FULL_INCAR)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	cmp	ecx, 3
	jne	SHORT $LN3@Process

; 117  : 			{
; 118  : 				CVehicle *pVehicle = pVehicleManager->GetAt(m_vehicleID);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _pVehicleManager$[ebp]
	call	?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z ; CVehicleManager::GetAt
	mov	DWORD PTR _pVehicle$209283[ebp], eax

; 119  : 				
; 120  : 				if(pVehicle) {

	cmp	DWORD PTR _pVehicle$209283[ebp], 0
	je	SHORT $LN2@Process

; 121  : 					UpdateInCarMatrixAndSpeed(&m_matWorld, &m_vecMoveSpeed, &m_vecTurnSpeed);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 20					; 00000014H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateInCarMatrixAndSpeed@CRemotePlayer@@QAEXPAU_MATRIX4X4@@PAUVector3@@1@Z ; CRemotePlayer::UpdateInCarMatrixAndSpeed

; 122  : 					pVehicle->SetHealth(m_fVehicleHealth);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+112]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pVehicle$209283[ebp]
	call	?SetHealth@CVehicle@@QAEXM@Z		; CVehicle::SetHealth
$LN2@Process:

; 123  : 				}
; 124  : 
; 125  : 				m_byteUpdateFromNetwork = UPDATE_TYPE_NONE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 0
$LN3@Process:

; 126  : 			}
; 127  : 
; 128  : 			m_pPlayerPed->SetKeys(m_wKeys);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+18]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetKeys@CPlayerPed@@QAEXG@Z		; CPlayerPed::SetKeys

; 129  : 			m_pPlayerPed->SetRotation(m_fRotation);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+108]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?SetRotation@CPlayerPed@@QAEXM@Z	; CPlayerPed::SetRotation

; 130  : 			m_pPlayerPed->SetHealth(100.0f);

	push	ecx
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetHealth@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetHealth

; 131  : 			m_pPlayerPed->SetArmour(100.0f);

	push	ecx
	fld	DWORD PTR __real@42c80000
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?SetArmour@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetArmour
$LN11@Process:

; 132  : 		}
; 133  : 	}
; 134  : 	else {

	jmp	SHORT $LN1@Process
$LN12@Process:

; 135  : 		m_vehicleID = 0; // make sure that's always reset.

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+128], 0
$LN1@Process:
$LN13@Process:

; 136  : 	}
; 137  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Process@CRemotePlayer@@QAEXXZ ENDP			; CRemotePlayer::Process
_TEXT	ENDS
PUBLIC	__real@0000000000000000
EXTRN	?ForceIntoPassengerSeat@CPlayerPed@@QAEXII@Z:PROC ; CPlayerPed::ForceIntoPassengerSeat
EXTRN	?PutDirectlyInVehicle@CPlayerPed@@QAEXH@Z:PROC	; CPlayerPed::PutDirectlyInVehicle
EXTRN	?FindGtaIDFromID@CVehicleManager@@QAEHE@Z:PROC	; CVehicleManager::FindGtaIDFromID
EXTRN	?GetHealth@CVehicle@@QAEMXZ:PROC		; CVehicle::GetHealth
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?HandleVehicleEntryExit@CRemotePlayer@@QAEXXZ
_TEXT	SEGMENT
_pVehicle$209293 = -32					; size = 4
_pVehicleManager$ = -20					; size = 4
_this$ = -8						; size = 4
?HandleVehicleEntryExit@CRemotePlayer@@QAEXXZ PROC	; CRemotePlayer::HandleVehicleEntryExit, COMDAT
; _this$ = ecx

; 142  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 143  : 	CVehicleManager *pVehicleManager = pNetowkManager->GetVehicleManager();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
	mov	DWORD PTR _pVehicleManager$[ebp], eax

; 144  : 
; 145  : 	if(m_vehicleID == 0 && m_pPlayerPed->IsInVehicle())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	test	ecx, ecx
	jne	SHORT $LN6@HandleVehi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	je	SHORT $LN6@HandleVehi

; 146  : 	{
; 147  : 		m_pPlayerPed->RemoveFromVehicleAndPutAt(m_matWorld.vPos.X,
; 148  : 			m_matWorld.vPos.Y,m_matWorld.vPos.Z);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [eax+76]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+72]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	push	ecx
	fld	DWORD PTR [edx+68]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt
	jmp	$LN1@HandleVehi
$LN6@HandleVehi:

; 149  : 	}	
; 150  : 	else if((m_vehicleID != 0) && !m_pPlayerPed->IsInVehicle())

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	test	ecx, ecx
	je	$LN1@HandleVehi
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?IsInVehicle@CPlayerPed@@QAEHXZ		; CPlayerPed::IsInVehicle
	test	eax, eax
	jne	$LN1@HandleVehi

; 151  : 	{
; 152  : 		// must force in
; 153  : 		CVehicle * pVehicle = pVehicleManager->GetAt(m_vehicleID);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _pVehicleManager$[ebp]
	call	?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z ; CVehicleManager::GetAt
	mov	DWORD PTR _pVehicle$209293[ebp], eax

; 154  : 
; 155  : 		if(pVehicle && pVehicle->GetHealth() > 0.0f) {

	cmp	DWORD PTR _pVehicle$209293[ebp], 0
	je	SHORT $LN1@HandleVehi
	mov	ecx, DWORD PTR _pVehicle$209293[ebp]
	call	?GetHealth@CVehicle@@QAEMXZ		; CVehicle::GetHealth
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@HandleVehi

; 156  : 			if(!m_bIsAPassenger) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+124], 0
	jne	SHORT $LN2@HandleVehi

; 157  : 				m_pPlayerPed->PutDirectlyInVehicle(pVehicleManager->FindGtaIDFromID(m_vehicleID));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR _pVehicleManager$[ebp]
	call	?FindGtaIDFromID@CVehicleManager@@QAEHE@Z ; CVehicleManager::FindGtaIDFromID
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?PutDirectlyInVehicle@CPlayerPed@@QAEXH@Z ; CPlayerPed::PutDirectlyInVehicle

; 158  : 			} else {

	jmp	SHORT $LN1@HandleVehi
$LN2@HandleVehi:

; 159  : 				m_pPlayerPed->ForceIntoPassengerSeat(pVehicleManager->FindGtaIDFromID(m_vehicleID),m_bytePassengerSeat);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+129]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+128]
	push	eax
	mov	ecx, DWORD PTR _pVehicleManager$[ebp]
	call	?FindGtaIDFromID@CVehicleManager@@QAEHE@Z ; CVehicleManager::FindGtaIDFromID
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?ForceIntoPassengerSeat@CPlayerPed@@QAEXII@Z ; CPlayerPed::ForceIntoPassengerSeat
$LN1@HandleVehi:

; 160  : 			}
; 161  : 		}
; 162  : 	}
; 163  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HandleVehicleEntryExit@CRemotePlayer@@QAEXXZ ENDP	; CRemotePlayer::HandleVehicleEntryExit
_TEXT	ENDS
EXTRN	?SetPosition@CEntity@@QAEXUVector3@@@Z:PROC	; CEntity::SetPosition
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UpdateOnFootPosition@CRemotePlayer@@QAEXUVector3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vPos$ = 8						; size = 12
?UpdateOnFootPosition@CRemotePlayer@@QAEXUVector3@@@Z PROC ; CRemotePlayer::UpdateOnFootPosition, COMDAT
; _this$ = ecx

; 168  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 169  : 	m_pPlayerPed->SetPosition(vPos);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vPos$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vPos$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vPos$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?SetPosition@CEntity@@QAEXUVector3@@@Z	; CEntity::SetPosition

; 170  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?UpdateOnFootPosition@CRemotePlayer@@QAEXUVector3@@@Z ENDP ; CRemotePlayer::UpdateOnFootPosition
_TEXT	ENDS
PUBLIC	?StoreOnFootFullSyncData@CRemotePlayer@@QAEXPAU_PLAYER_SYNC_DATA@@@Z ; CRemotePlayer::StoreOnFootFullSyncData
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StoreOnFootFullSyncData@CRemotePlayer@@QAEXPAU_PLAYER_SYNC_DATA@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pPlayerSyncData$ = 8					; size = 4
?StoreOnFootFullSyncData@CRemotePlayer@@QAEXPAU_PLAYER_SYNC_DATA@@@Z PROC ; CRemotePlayer::StoreOnFootFullSyncData, COMDAT
; _this$ = ecx

; 175  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 176  : 	m_vehicleID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+128], 0

; 177  : 	m_wKeys = pPlayerSyncData->wKeys;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayerSyncData$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax+18], dx

; 178  : 	memcpy(&m_matWorld.vPos, &pPlayerSyncData->vecPos, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pPlayerSyncData$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 179  : 	m_fRotation = pPlayerSyncData->fRotation;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayerSyncData$[ebp]
	fld	DWORD PTR [ecx+16]
	fstp	DWORD PTR [eax+108]

; 180  : 	m_byteCurrentWeapon = pPlayerSyncData->byteCurrentWeapon;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayerSyncData$[ebp]
	mov	dl, BYTE PTR [ecx+20]
	mov	BYTE PTR [eax+118], dl

; 181  : 	m_byteShootingFlags = pPlayerSyncData->byteShootingFlags;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayerSyncData$[ebp]
	mov	dl, BYTE PTR [ecx+21]
	mov	BYTE PTR [eax+130], dl

; 182  : 	m_byteHealth = pPlayerSyncData->byteHealth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayerSyncData$[ebp]
	mov	dl, BYTE PTR [ecx+22]
	mov	BYTE PTR [eax+116], dl

; 183  : 	m_byteArmour = pPlayerSyncData->byteArmour;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pPlayerSyncData$[ebp]
	mov	dl, BYTE PTR [ecx+23]
	mov	BYTE PTR [eax+117], dl

; 184  : 	m_byteUpdateFromNetwork = UPDATE_TYPE_FULL_ONFOOT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 1

; 185  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StoreOnFootFullSyncData@CRemotePlayer@@QAEXPAU_PLAYER_SYNC_DATA@@@Z ENDP ; CRemotePlayer::StoreOnFootFullSyncData
_TEXT	ENDS
PUBLIC	?StoreAimSyncData@CRemotePlayer@@QAEXPAU_CAMERA_AIM@@@Z ; CRemotePlayer::StoreAimSyncData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StoreAimSyncData@CRemotePlayer@@QAEXPAU_CAMERA_AIM@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pAim$ = 8						; size = 4
?StoreAimSyncData@CRemotePlayer@@QAEXPAU_CAMERA_AIM@@@Z PROC ; CRemotePlayer::StoreAimSyncData, COMDAT
; _this$ = ecx

; 190  : { 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 191  : 	m_bHasAim = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+156], 1

; 192  : 	memcpy(&m_Aim, pAim, sizeof(CAMERA_AIM));

	push	48					; 00000030H
	mov	eax, DWORD PTR _pAim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 160				; 000000a0H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 193  : };

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StoreAimSyncData@CRemotePlayer@@QAEXPAU_CAMERA_AIM@@@Z ENDP ; CRemotePlayer::StoreAimSyncData
_TEXT	ENDS
PUBLIC	__real@3fb99999a0000000
EXTRN	?SetTurnSpeed@CPhysical@@QAEXUVector3@@@Z:PROC	; CPhysical::SetTurnSpeed
EXTRN	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z:PROC	; CPhysical::SetMoveSpeed
EXTRN	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z:PROC	; CEntity::SetMatrix
EXTRN	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z:PROC	; CEntity::GetMatrix
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?UpdateInCarMatrixAndSpeed@CRemotePlayer@@QAEXPAU_MATRIX4X4@@PAUVector3@@1@Z
_TEXT	SEGMENT
_fDif$ = -104						; size = 4
_pVehicle$ = -92					; size = 4
_matVehicle$ = -80					; size = 64
_this$ = -8						; size = 4
_matWorld$ = 8						; size = 4
_vecMoveSpeed$ = 12					; size = 4
_vecTurnSpeed$ = 16					; size = 4
?UpdateInCarMatrixAndSpeed@CRemotePlayer@@QAEXPAU_MATRIX4X4@@PAUVector3@@1@Z PROC ; CRemotePlayer::UpdateInCarMatrixAndSpeed, COMDAT
; _this$ = ecx

; 198  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-300]
	mov	ecx, 75					; 0000004bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 199  : 	MATRIX4X4 matVehicle;

	lea	ecx, DWORD PTR _matVehicle$[ebp]
	call	??0_MATRIX4X4@@QAE@XZ

; 200  : 	CVehicle * pVehicle = pNetowkManager->GetVehicleManager()->GetAt(m_vehicleID);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	push	ecx
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
	mov	ecx, eax
	call	?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z ; CVehicleManager::GetAt
	mov	DWORD PTR _pVehicle$[ebp], eax

; 201  : 	float fDif;
; 202  : 
; 203  : 	if(pVehicle) {

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	$LN10@UpdateInCa

; 204  : 		pVehicle->GetMatrix(&matVehicle);

	lea	eax, DWORD PTR _matVehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?GetMatrix@CEntity@@QAEXPAU_MATRIX4X4@@@Z ; CEntity::GetMatrix

; 205  : 
; 206  : 		memcpy(&matVehicle.vLookRight, &matWorld->vLookRight, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _matWorld$[ebp]
	push	eax
	lea	ecx, DWORD PTR _matVehicle$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 207  : 		memcpy(&matVehicle.vLookUp, &matWorld->vLookUp, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _matWorld$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR _matVehicle$[ebp+16]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 208  : 
; 209  : 		if(matWorld->vPos.X >= matVehicle.vPos.X) {

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+48]
	fld	DWORD PTR _matVehicle$[ebp+48]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN9@UpdateInCa

; 210  : 			fDif = matWorld->vPos.X - matVehicle.vPos.X;

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+48]
	fsub	DWORD PTR _matVehicle$[ebp+48]
	fstp	DWORD PTR _fDif$[ebp]

; 211  : 		} else {

	jmp	SHORT $LN8@UpdateInCa
$LN9@UpdateInCa:

; 212  : 			fDif = matVehicle.vPos.X - matWorld->vPos.X;

	fld	DWORD PTR _matVehicle$[ebp+48]
	mov	eax, DWORD PTR _matWorld$[ebp]
	fsub	DWORD PTR [eax+48]
	fstp	DWORD PTR _fDif$[ebp]
$LN8@UpdateInCa:

; 213  : 		}
; 214  : 
; 215  : 		if(fDif > 0.1f) {		

	fld	DWORD PTR _fDif$[ebp]
	fcomp	QWORD PTR __real@3fb99999a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN7@UpdateInCa

; 216  : 			matVehicle.vPos.X = matWorld->vPos.X;

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+48]
	fstp	DWORD PTR _matVehicle$[ebp+48]
$LN7@UpdateInCa:

; 217  : 		}
; 218  : 		
; 219  : 		if(matWorld->vPos.Y >= matVehicle.vPos.Y) {

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+52]
	fld	DWORD PTR _matVehicle$[ebp+52]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN6@UpdateInCa

; 220  : 			fDif = matWorld->vPos.Y - matVehicle.vPos.Y;

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+52]
	fsub	DWORD PTR _matVehicle$[ebp+52]
	fstp	DWORD PTR _fDif$[ebp]

; 221  : 		} else {

	jmp	SHORT $LN5@UpdateInCa
$LN6@UpdateInCa:

; 222  : 			fDif = matVehicle.vPos.Y - matWorld->vPos.Y;

	fld	DWORD PTR _matVehicle$[ebp+52]
	mov	eax, DWORD PTR _matWorld$[ebp]
	fsub	DWORD PTR [eax+52]
	fstp	DWORD PTR _fDif$[ebp]
$LN5@UpdateInCa:

; 223  : 		}
; 224  : 
; 225  : 		if(fDif > 0.1f) {		

	fld	DWORD PTR _fDif$[ebp]
	fcomp	QWORD PTR __real@3fb99999a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN4@UpdateInCa

; 226  : 			matVehicle.vPos.Y = matWorld->vPos.Y;

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+52]
	fstp	DWORD PTR _matVehicle$[ebp+52]
$LN4@UpdateInCa:

; 227  : 		}
; 228  : 		
; 229  : 		if(matWorld->vPos.Z >= matVehicle.vPos.Z) {

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+56]
	fld	DWORD PTR _matVehicle$[ebp+56]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jp	SHORT $LN3@UpdateInCa

; 230  : 			fDif = matWorld->vPos.Z - matVehicle.vPos.Z;

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+56]
	fsub	DWORD PTR _matVehicle$[ebp+56]
	fstp	DWORD PTR _fDif$[ebp]

; 231  : 		} else {

	jmp	SHORT $LN2@UpdateInCa
$LN3@UpdateInCa:

; 232  : 			fDif = matVehicle.vPos.Z - matWorld->vPos.Z;

	fld	DWORD PTR _matVehicle$[ebp+56]
	mov	eax, DWORD PTR _matWorld$[ebp]
	fsub	DWORD PTR [eax+56]
	fstp	DWORD PTR _fDif$[ebp]
$LN2@UpdateInCa:

; 233  : 		}
; 234  : 
; 235  : 		if(fDif > 0.1f) {		

	fld	DWORD PTR _fDif$[ebp]
	fcomp	QWORD PTR __real@3fb99999a0000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@UpdateInCa

; 236  : 			matVehicle.vPos.Z = matWorld->vPos.Z;

	mov	eax, DWORD PTR _matWorld$[ebp]
	fld	DWORD PTR [eax+56]
	fstp	DWORD PTR _matVehicle$[ebp+56]
$LN1@UpdateInCa:

; 237  : 		}
; 238  : 
; 239  : 		pVehicle->SetMatrix(matVehicle);

	sub	esp, 64					; 00000040H
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matVehicle$[ebp]
	mov	edi, esp
	rep movsd
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?SetMatrix@CEntity@@QAEXU_MATRIX4X4@@@Z	; CEntity::SetMatrix

; 240  : 		pVehicle->SetMoveSpeed(*vecMoveSpeed);

	mov	eax, DWORD PTR _vecMoveSpeed$[ebp]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z ; CPhysical::SetMoveSpeed

; 241  : 		pVehicle->SetTurnSpeed(*vecTurnSpeed);

	mov	eax, DWORD PTR _vecTurnSpeed$[ebp]
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _pVehicle$[ebp]
	call	?SetTurnSpeed@CPhysical@@QAEXUVector3@@@Z ; CPhysical::SetTurnSpeed
$LN10@UpdateInCa:

; 242  : 	}
; 243  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@UpdateInCa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN15@UpdateInCa:
	DD	1
	DD	$LN14@UpdateInCa
$LN14@UpdateInCa:
	DD	-80					; ffffffb0H
	DD	64					; 00000040H
	DD	$LN13@UpdateInCa
$LN13@UpdateInCa:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?UpdateInCarMatrixAndSpeed@CRemotePlayer@@QAEXPAU_MATRIX4X4@@PAUVector3@@1@Z ENDP ; CRemotePlayer::UpdateInCarMatrixAndSpeed
_TEXT	ENDS
PUBLIC	__real@4010000000000000
PUBLIC	?StoreInCarFullSyncData@CRemotePlayer@@QAEXPAU_VEHICLE_SYNC_DATA@@@Z ; CRemotePlayer::StoreInCarFullSyncData
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?StoreInCarFullSyncData@CRemotePlayer@@QAEXPAU_VEHICLE_SYNC_DATA@@@Z
_TEXT	SEGMENT
tv158 = -208						; size = 4
_this$ = -8						; size = 4
_pVehicleSyncData$ = 8					; size = 4
?StoreInCarFullSyncData@CRemotePlayer@@QAEXPAU_VEHICLE_SYNC_DATA@@@Z PROC ; CRemotePlayer::StoreInCarFullSyncData, COMDAT
; _this$ = ecx

; 248  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 249  : 	m_vehicleID = pVehicleSyncData->vehicleID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVehicleSyncData$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax+128], dl

; 250  : 	m_wKeys = pVehicleSyncData->wKeys;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVehicleSyncData$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+18], dx

; 251  : 	memcpy(&m_matWorld.vLookRight, &pVehicleSyncData->vecRoll, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pVehicleSyncData$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 252  : 	memcpy(&m_matWorld.vLookUp, &pVehicleSyncData->vecDirection, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pVehicleSyncData$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 253  : 	memcpy(&m_matWorld.vPos, &pVehicleSyncData->vecPos, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pVehicleSyncData$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 254  : 	memcpy(&m_vecMoveSpeed, &pVehicleSyncData->vecMoveSpeed, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pVehicleSyncData$[ebp]
	add	eax, 40					; 00000028H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 255  : 	memcpy(&m_vecTurnSpeed, &pVehicleSyncData->vecTurnSpeed, sizeof(Vector3));

	push	12					; 0000000cH
	mov	eax, DWORD PTR _pVehicleSyncData$[ebp]
	add	eax, 52					; 00000034H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 256  : 	m_fVehicleHealth = UNPACK_VEHICLE_HEALTH(pVehicleSyncData->byteVehicleHealth);

	mov	eax, DWORD PTR _pVehicleSyncData$[ebp]
	movzx	ecx, BYTE PTR [eax+64]
	mov	DWORD PTR tv158[ebp], ecx
	fild	DWORD PTR tv158[ebp]
	fmul	QWORD PTR __real@4010000000000000
	mov	edx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [edx+112]

; 257  : 	m_byteHealth = pVehicleSyncData->bytePlayerHealth;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVehicleSyncData$[ebp]
	mov	dl, BYTE PTR [ecx+65]
	mov	BYTE PTR [eax+116], dl

; 258  : 	m_byteArmour = pVehicleSyncData->bytePlayerArmour;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pVehicleSyncData$[ebp]
	mov	dl, BYTE PTR [ecx+66]
	mov	BYTE PTR [eax+117], dl

; 259  : 	m_bIsInVehicle = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 1

; 260  : 	m_bIsAPassenger = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 0

; 261  : 	m_byteUpdateFromNetwork = UPDATE_TYPE_FULL_INCAR;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+5], 3

; 262  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?StoreInCarFullSyncData@CRemotePlayer@@QAEXPAU_VEHICLE_SYNC_DATA@@@Z ENDP ; CRemotePlayer::StoreInCarFullSyncData
_TEXT	ENDS
PUBLIC	?StorePassengerData@CRemotePlayer@@QAEXEE@Z	; CRemotePlayer::StorePassengerData
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StorePassengerData@CRemotePlayer@@QAEXEE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vehicleID$ = 8						; size = 1
_byteSeat$ = 12						; size = 1
?StorePassengerData@CRemotePlayer@@QAEXEE@Z PROC	; CRemotePlayer::StorePassengerData, COMDAT
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 268  : 	m_bIsInVehicle = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 1

; 269  : 	m_bIsAPassenger = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+124], 1

; 270  : 	m_vehicleID = vehicleID;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _vehicleID$[ebp]
	mov	BYTE PTR [eax+128], cl

; 271  : 	m_bytePassengerSeat = byteSeat;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteSeat$[ebp]
	mov	BYTE PTR [eax+129], cl

; 272  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?StorePassengerData@CRemotePlayer@@QAEXEE@Z ENDP	; CRemotePlayer::StorePassengerData
_TEXT	ENDS
PUBLIC	?SpawnPlayer@CRemotePlayer@@QAEHEEPAUVector3@@MHHHHHH@Z ; CRemotePlayer::SpawnPlayer
EXTRN	?ShowMarker@CPlayerPed@@QAEXH@Z:PROC		; CPlayerPed::ShowMarker
EXTRN	?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z:PROC ; CGame::NewPlayer
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SpawnPlayer@CRemotePlayer@@QAEHEEPAUVector3@@MHHHHHH@Z
_TEXT	SEGMENT
tv70 = -244						; size = 4
$T209539 = -236						; size = 4
$T209540 = -224						; size = 4
_pGamePlayer$ = -20					; size = 4
_this$ = -8						; size = 4
_byteTeam$ = 8						; size = 1
_byteSkin$ = 12						; size = 1
_vecPos$ = 16						; size = 4
_fRotation$ = 20					; size = 4
_iSpawnWeapon1$ = 24					; size = 4
_iSpawnWeapon1Ammo$ = 28				; size = 4
_iSpawnWeapon2$ = 32					; size = 4
_iSpawnWeapon2Ammo$ = 36				; size = 4
_iSpawnWeapon3$ = 40					; size = 4
_iSpawnWeapon3Ammo$ = 44				; size = 4
?SpawnPlayer@CRemotePlayer@@QAEHEEPAUVector3@@MHHHHHH@Z PROC ; CRemotePlayer::SpawnPlayer, COMDAT
; _this$ = ecx

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 282  : 	if(m_pPlayerPed != NULL) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN10@SpawnPlaye

; 283  : 		m_pPlayerPed->Destroy();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?Destroy@CPlayerPed@@QAEXXZ		; CPlayerPed::Destroy

; 284  : 		delete m_pPlayerPed;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T209540[ebp], ecx
	mov	edx, DWORD PTR $T209540[ebp]
	mov	DWORD PTR $T209539[ebp], edx
	cmp	DWORD PTR $T209539[ebp], 0
	je	SHORT $LN9@SpawnPlaye
	push	1
	mov	ecx, DWORD PTR $T209539[ebp]
	call	??_GCPlayerPed@@QAEPAXI@Z
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN10@SpawnPlaye
$LN9@SpawnPlaye:
	mov	DWORD PTR tv70[ebp], 0
$LN10@SpawnPlaye:

; 285  : 	}
; 286  : 
; 287  : 	CPlayerPed *pGamePlayer = pGame->NewPlayer(m_playerID+2,byteSkin,vecPos->X,
; 288  : 		vecPos->Y,vecPos->Z,fRotation);

	push	ecx
	fld	DWORD PTR _fRotation$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _vecPos$[ebp]
	push	ecx
	fld	DWORD PTR [eax+8]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _vecPos$[ebp]
	push	ecx
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _vecPos$[ebp]
	push	ecx
	fld	DWORD PTR [edx]
	fstp	DWORD PTR [esp]
	movzx	eax, BYTE PTR _byteSkin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+4]
	add	edx, 2
	push	edx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z ; CGame::NewPlayer
	mov	DWORD PTR _pGamePlayer$[ebp], eax

; 289  : 	
; 290  : 	if(pGamePlayer) 

	cmp	DWORD PTR _pGamePlayer$[ebp], 0
	je	$LN5@SpawnPlaye

; 291  : 	{
; 292  : 		if(pNetowkManager->m_byteShowOnRadar) {

	mov	eax, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	movzx	ecx, BYTE PTR [eax+357]
	test	ecx, ecx
	je	SHORT $LN4@SpawnPlaye

; 293  : 			pGamePlayer->ShowMarker(byteTeam);

	movzx	eax, BYTE PTR _byteTeam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGamePlayer$[ebp]
	call	?ShowMarker@CPlayerPed@@QAEXH@Z		; CPlayerPed::ShowMarker
$LN4@SpawnPlaye:

; 294  : 		}
; 295  : 
; 296  : 		m_pPlayerPed = pGamePlayer;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _pGamePlayer$[ebp]
	mov	DWORD PTR [eax], ecx

; 297  : 		m_bIsActive = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 1

; 298  : 		m_iJustSpawned = 30;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+155], 30			; 0000001eH

; 299  : 		m_vehicleID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+128], 0

; 300  : 		m_fRotation = fRotation;

	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fRotation$[ebp]
	fstp	DWORD PTR [eax+108]

; 301  : 		m_byteTeam = byteTeam;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _byteTeam$[ebp]
	mov	BYTE PTR [eax+16], cl

; 302  : 		m_byteHealth = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+116], 100			; 00000064H

; 303  : 
; 304  : 		if(iSpawnWeapon3 != (-1)) {

	cmp	DWORD PTR _iSpawnWeapon3$[ebp], -1
	je	SHORT $LN3@SpawnPlaye

; 305  : 			pGamePlayer->GiveWeapon(iSpawnWeapon3,9999);

	push	9999					; 0000270fH
	mov	eax, DWORD PTR _iSpawnWeapon3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGamePlayer$[ebp]
	call	?GiveWeapon@CPlayerPed@@QAEHHH@Z	; CPlayerPed::GiveWeapon
$LN3@SpawnPlaye:

; 306  : 		}
; 307  : 		if(iSpawnWeapon2 != (-1)) {

	cmp	DWORD PTR _iSpawnWeapon2$[ebp], -1
	je	SHORT $LN2@SpawnPlaye

; 308  : 			pGamePlayer->GiveWeapon(iSpawnWeapon2,9999);

	push	9999					; 0000270fH
	mov	eax, DWORD PTR _iSpawnWeapon2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGamePlayer$[ebp]
	call	?GiveWeapon@CPlayerPed@@QAEHHH@Z	; CPlayerPed::GiveWeapon
$LN2@SpawnPlaye:

; 309  : 		}		
; 310  : 		if(iSpawnWeapon1 != (-1)) {

	cmp	DWORD PTR _iSpawnWeapon1$[ebp], -1
	je	SHORT $LN1@SpawnPlaye

; 311  : 			pGamePlayer->GiveWeapon(iSpawnWeapon1,9999);

	push	9999					; 0000270fH
	mov	eax, DWORD PTR _iSpawnWeapon1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pGamePlayer$[ebp]
	call	?GiveWeapon@CPlayerPed@@QAEHHH@Z	; CPlayerPed::GiveWeapon
$LN1@SpawnPlaye:

; 312  : 		}
; 313  : 
; 314  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@SpawnPlaye
$LN5@SpawnPlaye:

; 315  : 	}
; 316  : 	return FALSE;

	xor	eax, eax
$LN7@SpawnPlaye:

; 317  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	40					; 00000028H
?SpawnPlayer@CRemotePlayer@@QAEHEEPAUVector3@@MHHHHHH@Z ENDP ; CRemotePlayer::SpawnPlayer
_TEXT	ENDS
PUBLIC	??_C@_0L@BEAEHDPP@?$DO?$DO?5?$CFs?5died?$AA@	; `string'
PUBLIC	??_C@_0O@MKJBPLIN@?$DO?$DO?5?$CFs?5drowned?$AA@	; `string'
PUBLIC	??_C@_0BK@FAOBAGIN@?$DO?$DO?5?$CFs?5killed?5team?9mate?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BH@MLCPDFMN@?$DO?$DO?5?$CFs?5was?5killed?5by?5?$CFs?$AA@ ; `string'
PUBLIC	?GetPlayerName@CPlayerManager@@QAEPADE@Z	; CPlayerManager::GetPlayerName
PUBLIC	?HandleDeath@CRemotePlayer@@QAEXEEE@Z		; CRemotePlayer::HandleDeath
EXTRN	?AddInfoMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddInfoMessage
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
EXTRN	__RTC_UninitUse:PROC
;	COMDAT ??_C@_0L@BEAEHDPP@?$DO?$DO?5?$CFs?5died?$AA@
CONST	SEGMENT
??_C@_0L@BEAEHDPP@?$DO?$DO?5?$CFs?5died?$AA@ DB '>> %s died', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MKJBPLIN@?$DO?$DO?5?$CFs?5drowned?$AA@
CONST	SEGMENT
??_C@_0O@MKJBPLIN@?$DO?$DO?5?$CFs?5drowned?$AA@ DB '>> %s drowned', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FAOBAGIN@?$DO?$DO?5?$CFs?5killed?5team?9mate?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BK@FAOBAGIN@?$DO?$DO?5?$CFs?5killed?5team?9mate?5?$CFs?$AA@ DB '>>'
	DB	' %s killed team-mate %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MLCPDFMN@?$DO?$DO?5?$CFs?5was?5killed?5by?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BH@MLCPDFMN@?$DO?$DO?5?$CFs?5was?5killed?5by?5?$CFs?$AA@ DB '>> %s'
	DB	' was killed by %s', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?HandleDeath@CRemotePlayer@@QAEXEEE@Z
_TEXT	SEGMENT
tv78 = -244						; size = 4
$T209545 = -233						; size = 1
_szWhoKilledName$ = -32					; size = 4
_szPlayerName$ = -20					; size = 4
_this$ = -8						; size = 4
_byteReason$ = 8					; size = 1
_byteWhoKilled$ = 12					; size = 1
_byteScoringModifier$ = 16				; size = 1
?HandleDeath@CRemotePlayer@@QAEXEEE@Z PROC		; CRemotePlayer::HandleDeath, COMDAT
; _this$ = ecx

; 322  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	BYTE PTR $T209545[ebp], 0

; 323  : 
; 324  : 	char * szPlayerName = pNetowkManager->GetPlayerManager()->GetPlayerName(m_playerID);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	ecx, eax
	call	?GetPlayerName@CPlayerManager@@QAEPADE@Z ; CPlayerManager::GetPlayerName
	mov	DWORD PTR _szPlayerName$[ebp], eax

; 325  : 	char * szWhoKilledName;
; 326  : 
; 327  : 	if(byteWhoKilled != INVALID_ENTITY_ID) {

	movzx	eax, BYTE PTR _byteWhoKilled$[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN9@HandleDeat

; 328  : 		szWhoKilledName = pNetowkManager->GetPlayerManager()->GetPlayerName(byteWhoKilled);

	movzx	eax, BYTE PTR _byteWhoKilled$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	ecx, eax
	call	?GetPlayerName@CPlayerManager@@QAEPADE@Z ; CPlayerManager::GetPlayerName
	mov	BYTE PTR $T209545[ebp], 1
	mov	DWORD PTR _szWhoKilledName$[ebp], eax
$LN9@HandleDeat:

; 329  : 	}
; 330  : 
; 331  : 	switch(byteScoringModifier) {

	mov	al, BYTE PTR _byteScoringModifier$[ebp]
	mov	BYTE PTR tv78[ebp], al
	cmp	BYTE PTR tv78[ebp], 1
	je	SHORT $LN6@HandleDeat
	cmp	BYTE PTR tv78[ebp], 2
	je	SHORT $LN5@HandleDeat
	cmp	BYTE PTR tv78[ebp], 3
	je	SHORT $LN4@HandleDeat
	jmp	$LN7@HandleDeat
$LN6@HandleDeat:

; 332  : 
; 333  : 		case VALID_KILL:
; 334  : 			pChatWindow->AddInfoMessage(">> %s was killed by %s",szPlayerName,szWhoKilledName);

	cmp	BYTE PTR $T209545[ebp], 0
	jne	SHORT $LN12@HandleDeat
	push	OFFSET $LN13@HandleDeat
	call	__RTC_UninitUse
	add	esp, 4
$LN12@HandleDeat:
	mov	eax, DWORD PTR _szWhoKilledName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szPlayerName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BH@MLCPDFMN@?$DO?$DO?5?$CFs?5was?5killed?5by?5?$CFs?$AA@
	mov	edx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	edx
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 16					; 00000010H

; 335  : 			break;

	jmp	SHORT $LN7@HandleDeat
$LN5@HandleDeat:

; 336  : 
; 337  : 		case TEAM_KILL:
; 338  : 			pChatWindow->AddInfoMessage(">> %s killed team-mate %s",szWhoKilledName,szPlayerName);

	cmp	BYTE PTR $T209545[ebp], 0
	jne	SHORT $LN14@HandleDeat
	push	OFFSET $LN13@HandleDeat
	call	__RTC_UninitUse
	add	esp, 4
$LN14@HandleDeat:
	mov	eax, DWORD PTR _szPlayerName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szWhoKilledName$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BK@FAOBAGIN@?$DO?$DO?5?$CFs?5killed?5team?9mate?5?$CFs?$AA@
	mov	edx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	edx
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 16					; 00000010H

; 339  : 			break;

	jmp	SHORT $LN7@HandleDeat
$LN4@HandleDeat:

; 340  : 
; 341  : 		case SELF_KILL:
; 342  : 			if(byteReason == WEAPON_DROWN) {

	movzx	eax, BYTE PTR _byteReason$[ebp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN3@HandleDeat

; 343  : 				pChatWindow->AddInfoMessage(">> %s drowned",szPlayerName);

	mov	eax, DWORD PTR _szPlayerName$[ebp]
	push	eax
	push	OFFSET ??_C@_0O@MKJBPLIN@?$DO?$DO?5?$CFs?5drowned?$AA@
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	ecx
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 12					; 0000000cH

; 344  : 			}
; 345  : 			else {

	jmp	SHORT $LN7@HandleDeat
$LN3@HandleDeat:

; 346  : 				pChatWindow->AddInfoMessage(">> %s died",szPlayerName);

	mov	eax, DWORD PTR _szPlayerName$[ebp]
	push	eax
	push	OFFSET ??_C@_0L@BEAEHDPP@?$DO?$DO?5?$CFs?5died?$AA@
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	ecx
	call	?AddInfoMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddInfoMessage
	add	esp, 12					; 0000000cH
$LN7@HandleDeat:

; 347  : 			}
; 348  : 			break;
; 349  : 	}
; 350  : 
; 351  : 	if(m_vehicleID != 0) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	test	ecx, ecx
	je	SHORT $LN10@HandleDeat

; 352  : 		m_bIsWasted = TRUE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 1

; 353  : 		m_bIsActive = FALSE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 354  : 		m_vehicleID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+128], 0
$LN10@HandleDeat:

; 355  : 	}
; 356  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN15@HandleDeat:
$LN13@HandleDeat:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	87					; 00000057H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	75					; 0000004bH
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
?HandleDeath@CRemotePlayer@@QAEXEEE@Z ENDP		; CRemotePlayer::HandleDeath
_TEXT	ENDS
PUBLIC	?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ	; CRemotePlayer::GetTeamColorAsARGB
PUBLIC	?Say@CRemotePlayer@@QAEXPAD@Z			; CRemotePlayer::Say
EXTRN	?AddChatMessage@CChatWindow@@QAEXPADK0@Z:PROC	; CChatWindow::AddChatMessage
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Say@CRemotePlayer@@QAEXPAD@Z
_TEXT	SEGMENT
_szPlayerName$ = -20					; size = 4
_this$ = -8						; size = 4
_szText$ = 8						; size = 4
?Say@CRemotePlayer@@QAEXPAD@Z PROC			; CRemotePlayer::Say, COMDAT
; _this$ = ecx

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 362  : 	char * szPlayerName = pNetowkManager->GetPlayerManager()->GetPlayerName(m_playerID);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	ecx, eax
	call	?GetPlayerName@CPlayerManager@@QAEPADE@Z ; CPlayerManager::GetPlayerName
	mov	DWORD PTR _szPlayerName$[ebp], eax

; 363  : 	pChatWindow->AddChatMessage(szPlayerName,GetTeamColorAsARGB(),szText);

	mov	eax, DWORD PTR _szText$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ ; CRemotePlayer::GetTeamColorAsARGB
	push	eax
	mov	ecx, DWORD PTR _szPlayerName$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	call	?AddChatMessage@CChatWindow@@QAEXPADK0@Z ; CChatWindow::AddChatMessage

; 364  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Say@CRemotePlayer@@QAEXPAD@Z ENDP			; CRemotePlayer::Say
_TEXT	ENDS
PUBLIC	?sqrt@@YAMM@Z					; sqrt
PUBLIC	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
PUBLIC	__real@461c4000
PUBLIC	?IsActive@CRemotePlayer@@QAEHXZ			; CRemotePlayer::IsActive
PUBLIC	?GetDistanceFromRemotePlayer@CRemotePlayer@@QAEMPAV1@@Z ; CRemotePlayer::GetDistanceFromRemotePlayer
EXTRN	?GetPosition@CEntity@@QAEXPAUVector3@@@Z:PROC	; CEntity::GetPosition
;	COMDAT __real@461c4000
CONST	SEGMENT
__real@461c4000 DD 0461c4000r			; 10000
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetDistanceFromRemotePlayer@CRemotePlayer@@QAEMPAV1@@Z
_TEXT	SEGMENT
tv156 = -272						; size = 4
_fSY$ = -72						; size = 4
_fSX$ = -60						; size = 4
_vecFromPlayer$ = -48					; size = 12
_vecThisPlayer$ = -28					; size = 12
_this$ = -8						; size = 4
_pFromPlayer$ = 8					; size = 4
?GetDistanceFromRemotePlayer@CRemotePlayer@@QAEMPAV1@@Z PROC ; CRemotePlayer::GetDistanceFromRemotePlayer, COMDAT
; _this$ = ecx

; 370  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 371  : 	Vector3 vecThisPlayer;

	lea	ecx, DWORD PTR _vecThisPlayer$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 372  : 	Vector3 vecFromPlayer;

	lea	ecx, DWORD PTR _vecFromPlayer$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 373  : 	float  fSX,fSY;
; 374  : 
; 375  : 	if(!pFromPlayer->IsActive()) return 10000.0f; // very far away

	mov	ecx, DWORD PTR _pFromPlayer$[ebp]
	call	?IsActive@CRemotePlayer@@QAEHXZ		; CRemotePlayer::IsActive
	test	eax, eax
	jne	SHORT $LN2@GetDistanc
	fld	DWORD PTR __real@461c4000
	jmp	SHORT $LN3@GetDistanc
$LN2@GetDistanc:

; 376  : 	if(!m_pPlayerPed) return 10000.0f; // very far away

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN1@GetDistanc
	fld	DWORD PTR __real@461c4000
	jmp	SHORT $LN3@GetDistanc
$LN1@GetDistanc:

; 377  : 	
; 378  : 	m_pPlayerPed->GetPosition(&vecThisPlayer);

	lea	eax, DWORD PTR _vecThisPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetPosition@CEntity@@QAEXPAUVector3@@@Z ; CEntity::GetPosition

; 379  : 	pFromPlayer->GetPlayerPed()->GetPosition(&vecFromPlayer);

	lea	eax, DWORD PTR _vecFromPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFromPlayer$[ebp]
	call	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
	mov	ecx, eax
	call	?GetPosition@CEntity@@QAEXPAUVector3@@@Z ; CEntity::GetPosition

; 380  : 	
; 381  : 	fSX = (vecThisPlayer.X - vecFromPlayer.X) * (vecThisPlayer.X - vecFromPlayer.X);

	fld	DWORD PTR _vecThisPlayer$[ebp]
	fsub	DWORD PTR _vecFromPlayer$[ebp]
	fld	DWORD PTR _vecThisPlayer$[ebp]
	fsub	DWORD PTR _vecFromPlayer$[ebp]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _fSX$[ebp]

; 382  : 	fSY = (vecThisPlayer.Y - vecFromPlayer.Y) * (vecThisPlayer.Y - vecFromPlayer.Y);

	fld	DWORD PTR _vecThisPlayer$[ebp+4]
	fsub	DWORD PTR _vecFromPlayer$[ebp+4]
	fld	DWORD PTR _vecThisPlayer$[ebp+4]
	fsub	DWORD PTR _vecFromPlayer$[ebp+4]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _fSY$[ebp]

; 383  : 	
; 384  : 	return (float)sqrt(fSX + fSY);	

	fld	DWORD PTR _fSX$[ebp]
	fadd	DWORD PTR _fSY$[ebp]
	fstp	DWORD PTR tv156[ebp]
	fld	DWORD PTR tv156[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
$LN3@GetDistanc:

; 385  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetDistanc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN8@GetDistanc:
	DD	2
	DD	$LN7@GetDistanc
$LN7@GetDistanc:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN5@GetDistanc
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN6@GetDistanc
$LN6@GetDistanc:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@GetDistanc:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?GetDistanceFromRemotePlayer@CRemotePlayer@@QAEMPAV1@@Z ENDP ; CRemotePlayer::GetDistanceFromRemotePlayer
_TEXT	ENDS
PUBLIC	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
PUBLIC	?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ ; CRemotePlayer::GetDistanceFromLocalPlayer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ
_TEXT	SEGMENT
tv159 = -296						; size = 4
_pLocalPlayerPed$ = -96					; size = 4
_pLocalPlayer$ = -84					; size = 4
_fSY$ = -72						; size = 4
_fSX$ = -60						; size = 4
_vecFromPlayer$ = -48					; size = 12
_vecThisPlayer$ = -28					; size = 12
_this$ = -8						; size = 4
?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ PROC	; CRemotePlayer::GetDistanceFromLocalPlayer, COMDAT
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-296]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 391  : 	Vector3 vecThisPlayer;

	lea	ecx, DWORD PTR _vecThisPlayer$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 392  : 	Vector3 vecFromPlayer;

	lea	ecx, DWORD PTR _vecFromPlayer$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 393  : 	float  fSX,fSY;
; 394  : 
; 395  : 	CLocalPlayer *pLocalPlayer = pNetowkManager->GetPlayerManager()->GetLocalPlayer();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	ecx, eax
	call	?GetLocalPlayer@CPlayerManager@@QAEPAVCLocalPlayer@@XZ ; CPlayerManager::GetLocalPlayer
	mov	DWORD PTR _pLocalPlayer$[ebp], eax

; 396  : 	CPlayerPed *pLocalPlayerPed = pLocalPlayer->GetPlayerPed();

	mov	ecx, DWORD PTR _pLocalPlayer$[ebp]
	call	?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ; CLocalPlayer::GetPlayerPed
	mov	DWORD PTR _pLocalPlayerPed$[ebp], eax

; 397  : 
; 398  : 	if(!m_pPlayerPed) return 10000.0f; // very far away

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@GetDistanc@2
	fld	DWORD PTR __real@461c4000
	jmp	SHORT $LN3@GetDistanc@2
$LN2@GetDistanc@2:

; 399  : 	if(!pLocalPlayerPed) return 10000.0f; // very far away

	cmp	DWORD PTR _pLocalPlayerPed$[ebp], 0
	jne	SHORT $LN1@GetDistanc@2
	fld	DWORD PTR __real@461c4000
	jmp	SHORT $LN3@GetDistanc@2
$LN1@GetDistanc@2:

; 400  : 	
; 401  : 	m_pPlayerPed->GetPosition(&vecThisPlayer);

	lea	eax, DWORD PTR _vecThisPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?GetPosition@CEntity@@QAEXPAUVector3@@@Z ; CEntity::GetPosition

; 402  : 	pLocalPlayerPed->GetPosition(&vecFromPlayer);

	lea	eax, DWORD PTR _vecFromPlayer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pLocalPlayerPed$[ebp]
	call	?GetPosition@CEntity@@QAEXPAUVector3@@@Z ; CEntity::GetPosition

; 403  : 	
; 404  : 	fSX = (vecThisPlayer.X - vecFromPlayer.X) * (vecThisPlayer.X - vecFromPlayer.X);

	fld	DWORD PTR _vecThisPlayer$[ebp]
	fsub	DWORD PTR _vecFromPlayer$[ebp]
	fld	DWORD PTR _vecThisPlayer$[ebp]
	fsub	DWORD PTR _vecFromPlayer$[ebp]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _fSX$[ebp]

; 405  : 	fSY = (vecThisPlayer.Y - vecFromPlayer.Y) * (vecThisPlayer.Y - vecFromPlayer.Y);

	fld	DWORD PTR _vecThisPlayer$[ebp+4]
	fsub	DWORD PTR _vecFromPlayer$[ebp+4]
	fld	DWORD PTR _vecThisPlayer$[ebp+4]
	fsub	DWORD PTR _vecFromPlayer$[ebp+4]
	fmulp	ST(1), ST(0)
	fstp	DWORD PTR _fSY$[ebp]

; 406  : 	
; 407  : 	return (float)sqrt(fSX + fSY);	

	fld	DWORD PTR _fSX$[ebp]
	fadd	DWORD PTR _fSY$[ebp]
	fstp	DWORD PTR tv159[ebp]
	fld	DWORD PTR tv159[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	call	?sqrt@@YAMM@Z				; sqrt
	add	esp, 4
$LN3@GetDistanc@2:

; 408  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@GetDistanc@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@GetDistanc@2:
	DD	2
	DD	$LN7@GetDistanc@2
$LN7@GetDistanc@2:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN5@GetDistanc@2
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN6@GetDistanc@2
$LN6@GetDistanc@2:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	70					; 00000046H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	109					; 0000006dH
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN5@GetDistanc@2:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?GetDistanceFromLocalPlayer@CRemotePlayer@@QAEMXZ ENDP	; CRemotePlayer::GetDistanceFromLocalPlayer
_TEXT	ENDS
PUBLIC	?GetTeamColorAsRGBA@CRemotePlayer@@QAEKXZ	; CRemotePlayer::GetTeamColorAsRGBA
EXTRN	?TranslateColorCodeToRGBA@@YGKH@Z:PROC		; TranslateColorCodeToRGBA
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTeamColorAsRGBA@CRemotePlayer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTeamColorAsRGBA@CRemotePlayer@@QAEKXZ PROC		; CRemotePlayer::GetTeamColorAsRGBA, COMDAT
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	return TranslateColorCodeToRGBA(m_byteTeam);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	push	ecx
	call	?TranslateColorCodeToRGBA@@YGKH@Z	; TranslateColorCodeToRGBA

; 415  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeamColorAsRGBA@CRemotePlayer@@QAEKXZ ENDP		; CRemotePlayer::GetTeamColorAsRGBA
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ PROC		; CRemotePlayer::GetTeamColorAsARGB, COMDAT
; _this$ = ecx

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 	return (TranslateColorCodeToRGBA(m_byteTeam) >> 8) | 0xFF000000;	

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	push	ecx
	call	?TranslateColorCodeToRGBA@@YGKH@Z	; TranslateColorCodeToRGBA
	shr	eax, 8
	or	eax, -16777216				; ff000000H

; 422  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTeamColorAsARGB@CRemotePlayer@@QAEKXZ ENDP		; CRemotePlayer::GetTeamColorAsARGB
_TEXT	ENDS
PUBLIC	?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z	; CPlayerManager::GetAt
PUBLIC	?InflictDamage@CRemotePlayer@@QAEX_NEHMHE@Z	; CRemotePlayer::InflictDamage
EXTRN	?bDamageDisabled@@3_NA:BYTE			; bDamageDisabled
EXTRN	?GetVehicle@CVehicle@@QAEPAU_VEHICLE_TYPE@@XZ:PROC ; CVehicle::GetVehicle
EXTRN	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ:PROC	; CEntity::GetEntity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InflictDamage@CRemotePlayer@@QAEX_NEHMHE@Z
_TEXT	SEGMENT
_dwFunc$ = -32						; size = 4
_dwEntity$ = -20					; size = 4
_this$ = -8						; size = 4
_bPlayerVehicleDamager$ = 8				; size = 1
_damagerID$ = 12					; size = 1
_iWeapon$ = 16						; size = 4
_fUnk$ = 20						; size = 4
_iPedPieces$ = 24					; size = 4
_byteUnk$ = 28						; size = 1
?InflictDamage@CRemotePlayer@@QAEX_NEHMHE@Z PROC	; CRemotePlayer::InflictDamage, COMDAT
; _this$ = ecx

; 429  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 430  : 	DWORD dwEntity;
; 431  : 
; 432  : 	if(bPlayerVehicleDamager)

	movzx	eax, BYTE PTR _bPlayerVehicleDamager$[ebp]
	test	eax, eax
	je	SHORT $LN2@InflictDam

; 433  : 	{
; 434  : 		dwEntity = (DWORD)pNetowkManager->GetPlayerManager()->GetAt(damagerID)->GetPlayerPed()->GetEntity();		

	movzx	eax, BYTE PTR _damagerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	ecx, eax
	call	?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z ; CPlayerManager::GetAt
	mov	ecx, eax
	call	?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ; CRemotePlayer::GetPlayerPed
	mov	ecx, eax
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _dwEntity$[ebp], eax

; 435  : 	}
; 436  : 	else

	jmp	SHORT $LN1@InflictDam
$LN2@InflictDam:

; 437  : 	{
; 438  : 		dwEntity = (DWORD)pNetowkManager->GetVehicleManager()->GetAt(damagerID)->GetVehicle();

	movzx	eax, BYTE PTR _damagerID$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
	mov	ecx, eax
	call	?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z ; CVehicleManager::GetAt
	mov	ecx, eax
	call	?GetVehicle@CVehicle@@QAEPAU_VEHICLE_TYPE@@XZ ; CVehicle::GetVehicle
	mov	DWORD PTR _dwEntity$[ebp], eax
$LN1@InflictDam:

; 439  : 	}
; 440  : 
; 441  : 	// Enable CPed::InflictDamage for remote players
; 442  : 	bDamageDisabled = false;

	mov	BYTE PTR ?bDamageDisabled@@3_NA, 0	; bDamageDisabled

; 443  : 
; 444  : 	// TODO: Move to CPlayerPed
; 445  : 	DWORD dwFunc = FUNC_CPed__InflictDamage;

	mov	DWORD PTR _dwFunc$[ebp], 5397280	; 00525b20H

; 446  : 	_asm
; 447  : 	{
; 448  : 		push byteUnk

	push	DWORD PTR _byteUnk$[ebp]

; 449  : 		push iPedPieces

	push	DWORD PTR _iPedPieces$[ebp]

; 450  : 		push fUnk

	push	DWORD PTR _fUnk$[ebp]

; 451  : 		push iWeapon

	push	DWORD PTR _iWeapon$[ebp]

; 452  : 		push dwEntity

	push	DWORD PTR _dwEntity$[ebp]

; 453  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 454  : 		add esp, 10h

	add	esp, 16					; 00000010H

; 455  : 	}
; 456  : 
; 457  : 	// Disable CPed::InflictDamage for remote players
; 458  : 	bDamageDisabled = true;

	mov	BYTE PTR ?bDamageDisabled@@3_NA, 1	; bDamageDisabled

; 459  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?InflictDamage@CRemotePlayer@@QAEX_NEHMHE@Z ENDP	; CRemotePlayer::InflictDamage
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 9.0\vc\include\math.h
;	COMDAT ?sqrt@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?sqrt@@YAMM@Z PROC					; sqrt, COMDAT

; 534  :         {return (sqrtf(_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	push	ecx
	fld	DWORD PTR __X$[ebp]
	fstp	DWORD PTR [esp]
	call	_sqrtf
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sqrt@@YAMM@Z ENDP					; sqrt
_TEXT	ENDS
EXTRN	_sqrt:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv73 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 423  :         {return ((float)sqrt((double)_X)); }

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-196]
	mov	ecx, 49					; 00000031H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	fld	DWORD PTR __X$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	call	_sqrt
	add	esp, 8
	fstp	DWORD PTR tv73[ebp]
	fld	DWORD PTR tv73[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sqrtf	ENDP
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\game\common.h
_TEXT	ENDS
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 34   : 	Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	{
; 36   : 		X = Y = Z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 37   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\clocalplayer.h
_TEXT	ENDS
;	COMDAT ?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ PROC	; CLocalPlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 104  : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CLocalPlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CLocalPlayer::GetPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cremoteplayer.h
_TEXT	ENDS
;	COMDAT ?IsActive@CRemotePlayer@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsActive@CRemotePlayer@@QAEHXZ PROC			; CRemotePlayer::IsActive, COMDAT
; _this$ = ecx

; 69   : 	BOOL IsActive() { return m_bIsActive; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsActive@CRemotePlayer@@QAEHXZ ENDP			; CRemotePlayer::IsActive
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ PROC	; CRemotePlayer::GetPlayerPed, COMDAT
; _this$ = ecx

; 80   : 	CPlayerPed * GetPlayerPed() { return m_pPlayerPed; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerPed@CRemotePlayer@@QAEPAVCPlayerPed@@XZ ENDP	; CRemotePlayer::GetPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cplayermanager.h
_TEXT	ENDS
;	COMDAT ?GetPlayerName@CPlayerManager@@QAEPADE@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerID$ = 8						; size = 1
?GetPlayerName@CPlayerManager@@QAEPADE@Z PROC		; CPlayerManager::GetPlayerName, COMDAT
; _this$ = ecx

; 37   : 	char * GetPlayerName(EntityId playerID) { return m_szPlayerNames[playerID]; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _playerID$[ebp]
	imul	eax, 25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax+433]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPlayerName@CPlayerManager@@QAEPADE@Z ENDP		; CPlayerManager::GetPlayerName
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetLocalPlayer@CPlayerManager@@QAEPAVCLocalPlayer@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetLocalPlayer@CPlayerManager@@QAEPAVCLocalPlayer@@XZ PROC ; CPlayerManager::GetLocalPlayer, COMDAT
; _this$ = ecx

; 39   : 	CLocalPlayer * GetLocalPlayer() { return m_pLocalPlayer; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+200]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetLocalPlayer@CPlayerManager@@QAEPAVCLocalPlayer@@XZ ENDP ; CPlayerManager::GetLocalPlayer
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_playerID$ = 8						; size = 1
?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z PROC	; CPlayerManager::GetAt, COMDAT
; _this$ = ecx

; 45   : 	CRemotePlayer* GetAt(EntityId playerID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		if(playerID > MAX_PLAYERS) { return NULL; }

	movzx	eax, BYTE PTR _playerID$[ebp]
	cmp	eax, 50					; 00000032H
	jle	SHORT $LN1@GetAt
	xor	eax, eax
	jmp	SHORT $LN2@GetAt
$LN1@GetAt:

; 47   : 		return m_pPlayers[playerID];

	movzx	eax, BYTE PTR _playerID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+208]
$LN2@GetAt:

; 48   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CPlayerManager@@QAEPAVCRemotePlayer@@E@Z ENDP	; CPlayerManager::GetAt
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cvehiclemanager.h
_TEXT	ENDS
;	COMDAT ?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vehicleID$ = 8						; size = 1
?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z PROC	; CVehicleManager::GetAt, COMDAT
; _this$ = ecx

; 45   : 	CVehicle* GetAt(EntityId vehicleID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   : 		if(vehicleID > MAX_VEHICLES) { return NULL; }

	movzx	eax, BYTE PTR _vehicleID$[ebp]
	cmp	eax, 200				; 000000c8H
	jle	SHORT $LN1@GetAt@2
	xor	eax, eax
	jmp	SHORT $LN2@GetAt@2
$LN1@GetAt@2:

; 47   : 		return m_pVehicles[vehicleID];

	movzx	eax, BYTE PTR _vehicleID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+800]
$LN2@GetAt@2:

; 48   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetAt@CVehicleManager@@QAEPAVCVehicle@@E@Z ENDP	; CVehicleManager::GetAt
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cnetworkmanager.h
_TEXT	ENDS
;	COMDAT ?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ PROC ; CNetworkManager::GetPlayerManager, COMDAT
; _this$ = ecx

; 79   : 	CPlayerManager * GetPlayerManager() { return m_pPlayerManager; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ENDP ; CNetworkManager::GetPlayerManager
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ PROC ; CNetworkManager::GetVehicleManager, COMDAT
; _this$ = ecx

; 80   : 	CVehicleManager * GetVehicleManager() { return m_pVehicleManager; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ENDP ; CNetworkManager::GetVehicleManager
_TEXT	ENDS
END
