; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\scripting\CScript.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	?printfunc@@YAXPAUSQVM@@PBDZZ			; printfunc
EXTRN	?logprintf@@YAXPADZZ:PROC			; logprintf
EXTRN	_vsprintf:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\scripting\cscript.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?printfunc@@YAXPAUSQVM@@PBDZZ
_TEXT	SEGMENT
_szBuffer$ = -532					; size = 512
_vl$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_pVM$ = 8						; size = 4
_szFormat$ = 12						; size = 4
?printfunc@@YAXPAUSQVM@@PBDZZ PROC			; printfunc, COMDAT

; 19   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 728				; 000002d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-728]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 20   : 	va_list vl;
; 21   : 	char szBuffer[512];
; 22   : 	va_start(vl, szFormat);

	lea	eax, DWORD PTR _szFormat$[ebp+4]
	mov	DWORD PTR _vl$[ebp], eax

; 23   : 	vsprintf(szBuffer, szFormat, vl);

	mov	eax, DWORD PTR _vl$[ebp]
	push	eax
	mov	ecx, DWORD PTR _szFormat$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szBuffer$[ebp]
	push	edx
	call	_vsprintf
	add	esp, 12					; 0000000cH

; 24   : 	va_end(vl);

	mov	DWORD PTR _vl$[ebp], 0

; 25   : 	logprintf(szBuffer);

	lea	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	call	?logprintf@@YAXPADZZ			; logprintf
	add	esp, 4

; 26   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@printfunc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 728				; 000002d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@printfunc:
	DD	1
	DD	$LN4@printfunc
$LN4@printfunc:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN3@printfunc
$LN3@printfunc:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?printfunc@@YAXPAUSQVM@@PBDZZ ENDP			; printfunc
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0BG@LEJGKMEH@vc?9p?1clientscripts?1?$CFs?$AA@ ; `string'
PUBLIC	__$ArrayPad$
PUBLIC	??0CScript@@QAE@PBD@Z				; CScript::CScript
EXTRN	_sq_pop:PROC
EXTRN	_sqstd_dofile:PROC
EXTRN	?sq_register_natives@@YAHPAUSQVM@@@Z:PROC	; sq_register_natives
EXTRN	_sqstd_register_systemlib:PROC
EXTRN	_sqstd_register_stringlib:PROC
EXTRN	_sqstd_register_mathlib:PROC
EXTRN	_sqstd_register_iolib:PROC
EXTRN	_sqstd_register_bloblib:PROC
EXTRN	_sq_pushroottable:PROC
EXTRN	_sq_setprintfunc:PROC
EXTRN	_sqstd_seterrorhandlers:PROC
EXTRN	_sq_open:PROC
EXTRN	_strcpy:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_sprintf:PROC
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LEJGKMEH@vc?9p?1clientscripts?1?$CFs?$AA@
CONST	SEGMENT
??_C@_0BG@LEJGKMEH@vc?9p?1clientscripts?1?$CFs?$AA@ DB 'vc-p/clientscript'
	DB	's/%s', 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ??0CScript@@QAE@PBD@Z
_TEXT	SEGMENT
_pVM$ = -556						; size = 4
_fp$ = -544						; size = 4
_szScriptPath$ = -532					; size = 512
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_szScriptName$ = 8					; size = 4
??0CScript@@QAE@PBD@Z PROC				; CScript::CScript, COMDAT
; _this$ = ecx

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 752				; 000002f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-752]
	mov	ecx, 188				; 000000bcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 30   : 	// get the script path
; 31   : 	char szScriptPath[512];
; 32   : 	sprintf(szScriptPath, "vc-p/clientscripts/%s", szScriptName);

	mov	eax, DWORD PTR _szScriptName$[ebp]
	push	eax
	push	OFFSET ??_C@_0BG@LEJGKMEH@vc?9p?1clientscripts?1?$CFs?$AA@
	lea	ecx, DWORD PTR _szScriptPath$[ebp]
	push	ecx
	call	_sprintf
	add	esp, 12					; 0000000cH

; 33   : 
; 34   : 	// make sure the script exists
; 35   : 	FILE * fp = fopen(szScriptPath, "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	lea	eax, DWORD PTR _szScriptPath$[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fp$[ebp], eax

; 36   : 
; 37   : 	if(!fp) {

	cmp	DWORD PTR _fp$[ebp], 0
	jne	SHORT $LN2@CScript

; 38   : 		// script does not exist
; 39   : 		return;

	jmp	$LN3@CScript
$LN2@CScript:

; 40   : 	}
; 41   : 
; 42   : 	fclose(fp);

	mov	eax, DWORD PTR _fp$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 43   : 
; 44   : 	// set the script name
; 45   : 	strcpy(m_szScriptName, szScriptName);

	mov	eax, DWORD PTR _szScriptName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	_strcpy
	add	esp, 8

; 46   : 
; 47   : 	// create the squirrel VM with an initial stack size of 1024 bytes
; 48   : 	m_pVM = sq_open(1024);

	push	1024					; 00000400H
	call	_sq_open
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 49   : 
; 50   : 	// get the script vm pointer
; 51   : 	SQVM * pVM = m_pVM;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pVM$[ebp], ecx

; 52   : 
; 53   : 	// register the default error handlers
; 54   : 	sqstd_seterrorhandlers(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sqstd_seterrorhandlers
	add	esp, 4

; 55   : 
; 56   : 	// set the print and error functions
; 57   : 	sq_setprintfunc(pVM, printfunc, printfunc);

	push	OFFSET ?printfunc@@YAXPAUSQVM@@PBDZZ	; printfunc
	push	OFFSET ?printfunc@@YAXPAUSQVM@@PBDZZ	; printfunc
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_setprintfunc
	add	esp, 12					; 0000000cH

; 58   : 
; 59   : 	// push the root table onto the stack
; 60   : 	sq_pushroottable(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushroottable
	add	esp, 4

; 61   : 
; 62   : 	// register the blob library
; 63   : 	sqstd_register_bloblib(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sqstd_register_bloblib
	add	esp, 4

; 64   : 
; 65   : 	// register the input/out library
; 66   : 	sqstd_register_iolib(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sqstd_register_iolib
	add	esp, 4

; 67   : 
; 68   : 	// register the math library
; 69   : 	sqstd_register_mathlib(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sqstd_register_mathlib
	add	esp, 4

; 70   : 
; 71   : 	// register the string library
; 72   : 	sqstd_register_stringlib(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sqstd_register_stringlib
	add	esp, 4

; 73   : 
; 74   : 	// register the system library
; 75   : 	sqstd_register_systemlib(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sqstd_register_systemlib
	add	esp, 4

; 76   : 
; 77   : 	// register the vcmp functions
; 78   : 	sq_register_natives(pVM);

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	?sq_register_natives@@YAHPAUSQVM@@@Z	; sq_register_natives
	add	esp, 4

; 79   : 
; 80   : 	// load and compile the script
; 81   : 	if(SQ_FAILED(sqstd_dofile(pVM, szScriptPath, SQFalse, SQTrue))) {

	push	1
	push	0
	lea	eax, DWORD PTR _szScriptPath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	_sqstd_dofile
	add	esp, 16					; 00000010H
	test	eax, eax
	jge	SHORT $LN1@CScript

; 82   : 		// script compilation failed
; 83   : 		return;

	jmp	SHORT $LN3@CScript
$LN1@CScript:

; 84   : 	}
; 85   : 
; 86   : 	// pop the root table from the stack
; 87   : 	sq_pop(pVM, 1);

	push	1
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pop
	add	esp, 8
$LN3@CScript:

; 88   : 
; 89   : 	// script loaded successfully
; 90   : 	return;
; 91   : }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@CScript
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 752				; 000002f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@CScript:
	DD	1
	DD	$LN6@CScript
$LN6@CScript:
	DD	-532					; fffffdecH
	DD	512					; 00000200H
	DD	$LN5@CScript
$LN5@CScript:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	0
??0CScript@@QAE@PBD@Z ENDP				; CScript::CScript
_TEXT	ENDS
PUBLIC	?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ	; CScripts::GetTimerPool
PUBLIC	??1CScript@@QAE@XZ				; CScript::~CScript
EXTRN	_sq_close:PROC
EXTRN	?HandleScriptUnload@CTimerPool@@QAEXPAUSQVM@@@Z:PROC ; CTimerPool::HandleScriptUnload
EXTRN	?pScripts@@3PAVCScripts@@A:DWORD		; pScripts
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CScript@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CScript@@QAE@XZ PROC					; CScript::~CScript, COMDAT
; _this$ = ecx

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 95   : 	// kill all timers
; 96   : 	pScripts->GetTimerPool()->HandleScriptUnload(m_pVM);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ ; CScripts::GetTimerPool
	mov	ecx, eax
	call	?HandleScriptUnload@CTimerPool@@QAEXPAUSQVM@@@Z ; CTimerPool::HandleScriptUnload

; 97   : 
; 98   : 	// close the script vm
; 99   : 	sq_close(m_pVM);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_sq_close
	add	esp, 4

; 100  : 
; 101  : 	// reset the script vm pointer
; 102  : 	m_pVM = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 103  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CScript@@QAE@XZ ENDP					; CScript::~CScript
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\scripting\cscripts.h
_TEXT	ENDS
;	COMDAT ?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ PROC	; CScripts::GetTimerPool, COMDAT
; _this$ = ecx

; 34   : 	CTimerPool * GetTimerPool() { return  m_pTimerPool; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+2600]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTimerPool@CScripts@@QAEPAVCTimerPool@@XZ ENDP	; CScripts::GetTimerPool
_TEXT	ENDS
END
