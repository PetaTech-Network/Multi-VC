; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?tSettings@@3U_GAME_SETTINGS@@A			; tSettings
PUBLIC	?pD3DDevice@@3PAUIDirect3DDevice8@@A		; pD3DDevice
PUBLIC	?pDirectInput@@3PAUIDirectInput8A@@A		; pDirectInput
PUBLIC	?g_hInstance@@3PAXA				; g_hInstance
PUBLIC	?pScoreBoard@@3PAVCScoreBoard@@A		; pScoreBoard
PUBLIC	?pNameTags@@3PAVCNameTags@@A			; pNameTags
PUBLIC	?pNetStats@@3PAVCNetStats@@A			; pNetStats
PUBLIC	?pGame@@3PAVCGame@@A				; pGame
PUBLIC	?pChatWindow@@3PAVCChatWindow@@A		; pChatWindow
PUBLIC	?pCmdWindow@@3PAVCCmdWindow@@A			; pCmdWindow
PUBLIC	?pNetowkManager@@3PAVCNetworkManager@@A		; pNetowkManager
PUBLIC	?bGameInited@@3HA				; bGameInited
PUBLIC	?bWindowedMode@@3HA				; bWindowedMode
PUBLIC	?bShowNameTags@@3HA				; bShowNameTags
PUBLIC	?bAntiCheat@@3HA				; bAntiCheat
PUBLIC	?D3DInited@@3_NA				; D3DInited
PUBLIC	?pGUI@@3PAVCGUI@@A				; pGUI
PUBLIC	?pScripts@@3PAVCScripts@@A			; pScripts
_BSS	SEGMENT
?tSettings@@3U_GAME_SETTINGS@@A DB 0208H DUP (?)	; tSettings
?pD3DDevice@@3PAUIDirect3DDevice8@@A DD 01H DUP (?)	; pD3DDevice
?pDirectInput@@3PAUIDirectInput8A@@A DD 01H DUP (?)	; pDirectInput
?g_hInstance@@3PAXA DD 01H DUP (?)			; g_hInstance
?pScoreBoard@@3PAVCScoreBoard@@A DD 01H DUP (?)		; pScoreBoard
?pNameTags@@3PAVCNameTags@@A DD 01H DUP (?)		; pNameTags
?pNetStats@@3PAVCNetStats@@A DD 01H DUP (?)		; pNetStats
?pGame@@3PAVCGame@@A DD 01H DUP (?)			; pGame
?pChatWindow@@3PAVCChatWindow@@A DD 01H DUP (?)		; pChatWindow
?pCmdWindow@@3PAVCCmdWindow@@A DD 01H DUP (?)		; pCmdWindow
?pNetowkManager@@3PAVCNetworkManager@@A DD 01H DUP (?)	; pNetowkManager
?bGameInited@@3HA DD 01H DUP (?)			; bGameInited
?bWindowedMode@@3HA DD 01H DUP (?)			; bWindowedMode
?bAntiCheat@@3HA DD 01H DUP (?)				; bAntiCheat
?D3DInited@@3_NA DB 01H DUP (?)				; D3DInited
	ALIGN	4

?pGUI@@3PAVCGUI@@A DD 01H DUP (?)			; pGUI
?pScripts@@3PAVCScripts@@A DD 01H DUP (?)		; pScripts
_BSS	ENDS
_DATA	SEGMENT
?bShowNameTags@@3HA DD 01H				; bShowNameTags
_DATA	ENDS
PUBLIC	?ProcessServerQuery@@YA_NIUSystemAddress@RakNet@@PADH@Z ; ProcessServerQuery
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\main.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?ProcessServerQuery@@YA_NIUSystemAddress@RakNet@@PADH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
___formal$ = 20						; size = 4
___formal$ = 24						; size = 4
?ProcessServerQuery@@YA_NIUSystemAddress@RakNet@@PADH@Z PROC ; ProcessServerQuery, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 53   : 	return false;

	xor	al, al

; 54   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessServerQuery@@YA_NIUSystemAddress@RakNet@@PADH@Z ENDP ; ProcessServerQuery
_TEXT	ENDS
PUBLIC	??_C@_0ED@DNNLPHMN@You?5are?5missing?5the?5vcpfnt?4png?1d@ ; `string'
PUBLIC	??_C@_0L@NNNBJHIC@vcpfnt?4dat?$AA@		; `string'
PUBLIC	??_C@_0L@GIBJFBOF@vcpfnt?4png?$AA@		; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_0GF@OJDKIGKF@Incorrect?5wellrolauncher?4exe?5ver@ ; `string'
PUBLIC	??_C@_0BG@HMAECNEL@WellRo?5Launcher?5Error?$AA@	; `string'
PUBLIC	?DetermineGTAVersion@@YAHXZ			; DetermineGTAVersion
PUBLIC	?InitSettings@@YAXXZ				; InitSettings
PUBLIC	_DllMain@12
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Shutdown@CNetworkManager@@QAEXXZ:PROC		; CNetworkManager::Shutdown
EXTRN	?onExit@CScripts@@QAEXXZ:PROC			; CScripts::onExit
EXTRN	?UninstallD3D8Hook@@YAXXZ:PROC			; UninstallD3D8Hook
EXTRN	?InstallD3D8Hook@@YAXXZ:PROC			; InstallD3D8Hook
EXTRN	??0CScripts@@QAE@XZ:PROC			; CScripts::CScripts
EXTRN	??0CGame@@QAE@XZ:PROC				; CGame::CGame
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
;	COMDAT ??_C@_0ED@DNNLPHMN@You?5are?5missing?5the?5vcpfnt?4png?1d@
CONST	SEGMENT
??_C@_0ED@DNNLPHMN@You?5are?5missing?5the?5vcpfnt?4png?1d@ DB 'You are mi'
	DB	'ssing the vcpfnt.png/dat file from your games directory.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNNBJHIC@vcpfnt?4dat?$AA@
CONST	SEGMENT
??_C@_0L@NNNBJHIC@vcpfnt?4dat?$AA@ DB 'vcpfnt.dat', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GIBJFBOF@vcpfnt?4png?$AA@
CONST	SEGMENT
??_C@_0L@GIBJFBOF@vcpfnt?4png?$AA@ DB 'vcpfnt.png', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@OJDKIGKF@Incorrect?5wellrolauncher?4exe?5ver@
CONST	SEGMENT
??_C@_0GF@OJDKIGKF@Incorrect?5wellrolauncher?4exe?5ver@ DB 'Incorrect wel'
	DB	'lrolauncher.exe version detected.', 0aH, 'You must have a val'
	DB	'id wellrolauncher.exe to play this', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HMAECNEL@WellRo?5Launcher?5Error?$AA@
CONST	SEGMENT
??_C@_0BG@HMAECNEL@WellRo?5Launcher?5Error?$AA@ DB 'WellRo Launcher Error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$_DllMain@12 DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_DllMain@12$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_DllMain@12$1
__ehfuncinfo$_DllMain@12 DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$_DllMain@12
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT _DllMain@12
_TEXT	SEGMENT
tv135 = -280						; size = 4
tv128 = -280						; size = 4
$T209497 = -272						; size = 4
$T209498 = -260						; size = 4
$T209501 = -248						; size = 4
$T209502 = -236						; size = 4
_fCheckDAT$209291 = -32					; size = 4
_fCheckPNG$209288 = -20					; size = 4
__$EHRec$ = -12						; size = 12
_hinstDLL$ = 8						; size = 4
_fdwReason$ = 12					; size = 4
_lpvReserved$ = 16					; size = 4
_DllMain@12 PROC					; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$_DllMain@12
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 268				; 0000010cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 67					; 00000043H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 61   : 	if(fdwReason == DLL_PROCESS_ATTACH)

	cmp	DWORD PTR _fdwReason$[ebp], 1
	jne	$LN7@DllMain

; 62   : 	{
; 63   : 		g_hInstance = hinstDLL;

	mov	eax, DWORD PTR _hinstDLL$[ebp]
	mov	DWORD PTR ?g_hInstance@@3PAXA, eax	; g_hInstance

; 64   : 		
; 65   : 		// Initialize the settings from the command line
; 66   : 		InitSettings();

	call	?InitSettings@@YAXXZ			; InitSettings

; 67   : 
; 68   : 		// Check the GTA version
; 69   : 		if(DetermineGTAVersion() != VICE_10)

	call	?DetermineGTAVersion@@YAHXZ		; DetermineGTAVersion
	cmp	eax, 1
	je	SHORT $LN6@DllMain

; 70   : 		{
; 71   : 			MessageBox(0,"Incorrect wellrolauncher.exe version detected.\nYou must have a valid wellrolauncher.exe to play this","WellRo Launcher Error",MB_OK);

	mov	esi, esp
	push	0
	push	OFFSET ??_C@_0BG@HMAECNEL@WellRo?5Launcher?5Error?$AA@
	push	OFFSET ??_C@_0GF@OJDKIGKF@Incorrect?5wellrolauncher?4exe?5ver@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 72   : 			SetForegroundWindow(HWND_DESKTOP);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetForegroundWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 73   : 			ExitProcess(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__ExitProcess@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@DllMain:

; 74   : 		}
; 75   : 
; 76   : 		// Ensure we have the font files
; 77   : 		FILE * fCheckPNG = fopen("vcpfnt.png", "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET ??_C@_0L@GIBJFBOF@vcpfnt?4png?$AA@
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fCheckPNG$209288[ebp], eax

; 78   : 		FILE * fCheckDAT = fopen("vcpfnt.dat", "rb");

	push	OFFSET ??_C@_02JDPG@rb?$AA@
	push	OFFSET ??_C@_0L@NNNBJHIC@vcpfnt?4dat?$AA@
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fCheckDAT$209291[ebp], eax

; 79   : 
; 80   : 		if(!fCheckPNG || !fCheckDAT)

	cmp	DWORD PTR _fCheckPNG$209288[ebp], 0
	je	SHORT $LN4@DllMain
	cmp	DWORD PTR _fCheckDAT$209291[ebp], 0
	jne	SHORT $LN5@DllMain
$LN4@DllMain:

; 81   : 		{
; 82   : 			MessageBox(0,"You are missing the vcpfnt.png/dat file from your games directory.","WellRo Launcher Error",MB_OK);

	mov	esi, esp
	push	0
	push	OFFSET ??_C@_0BG@HMAECNEL@WellRo?5Launcher?5Error?$AA@
	push	OFFSET ??_C@_0ED@DNNLPHMN@You?5are?5missing?5the?5vcpfnt?4png?1d@
	push	0
	call	DWORD PTR __imp__MessageBoxA@16
	cmp	esi, esp
	call	__RTC_CheckEsp

; 83   : 			SetForegroundWindow(HWND_DESKTOP);

	mov	esi, esp
	push	0
	call	DWORD PTR __imp__SetForegroundWindow@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 84   : 			ExitProcess(1);			

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__ExitProcess@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@DllMain:

; 85   : 		}
; 86   : 		
; 87   : 		fclose(fCheckPNG);

	mov	eax, DWORD PTR _fCheckPNG$209288[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 88   : 		fclose(fCheckDAT);

	mov	eax, DWORD PTR _fCheckDAT$209291[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 89   : 
; 90   : 		// Create the game instance
; 91   : 		pGame = new CGame();

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209498[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209498[ebp], 0
	je	SHORT $LN10@DllMain
	mov	ecx, DWORD PTR $T209498[ebp]
	call	??0CGame@@QAE@XZ			; CGame::CGame
	mov	DWORD PTR tv128[ebp], eax
	jmp	SHORT $LN11@DllMain
$LN10@DllMain:
	mov	DWORD PTR tv128[ebp], 0
$LN11@DllMain:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR $T209497[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T209497[ebp]
	mov	DWORD PTR ?pGame@@3PAVCGame@@A, ecx	; pGame

; 92   : 
; 93   : 		// Create the scripts instance (move to net game)
; 94   : 		pScripts = new CScripts();

	push	2604					; 00000a2cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209502[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T209502[ebp], 0
	je	SHORT $LN12@DllMain
	mov	ecx, DWORD PTR $T209502[ebp]
	call	??0CScripts@@QAE@XZ			; CScripts::CScripts
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN13@DllMain
$LN12@DllMain:
	mov	DWORD PTR tv135[ebp], 0
$LN13@DllMain:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR $T209501[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T209501[ebp]
	mov	DWORD PTR ?pScripts@@3PAVCScripts@@A, ecx ; pScripts

; 95   : 
; 96   : 		// Install the d3d8 hook
; 97   : 		InstallD3D8Hook();

	call	?InstallD3D8Hook@@YAXXZ			; InstallD3D8Hook
	jmp	SHORT $LN3@DllMain
$LN7@DllMain:

; 98   : 	}
; 99   : 	else if(fdwReason == DLL_PROCESS_DETACH)

	cmp	DWORD PTR _fdwReason$[ebp], 0
	jne	SHORT $LN3@DllMain

; 100  : 	{
; 101  : 		// Uninstall the d3d8 hook
; 102  : 		UninstallD3D8Hook();

	call	?UninstallD3D8Hook@@YAXXZ		; UninstallD3D8Hook

; 103  : 
; 104  : 		if(pNetowkManager)

	cmp	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, 0 ; pNetowkManager
	je	SHORT $LN3@DllMain

; 105  : 		{
; 106  : 			pScripts->onExit();

	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?onExit@CScripts@@QAEXXZ		; CScripts::onExit

; 107  : 			pNetowkManager->Shutdown();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?Shutdown@CNetworkManager@@QAEXXZ	; CNetworkManager::Shutdown
$LN3@DllMain:

; 108  : 		}
; 109  : 	}
; 110  : 
; 111  : 	return TRUE;

	mov	eax, 1
$LN9@DllMain:

; 112  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_DllMain@12$0:
	mov	eax, DWORD PTR $T209498[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$_DllMain@12$1:
	mov	eax, DWORD PTR $T209502[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$_DllMain@12:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-284]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$_DllMain@12
	jmp	___CxxFrameHandler3
text$x	ENDS
_DllMain@12 ENDP
PUBLIC	??0CScoreBoard@@QAE@XZ				; CScoreBoard::CScoreBoard
PUBLIC	__real@431b0000
PUBLIC	??_C@_0M@GDDLCFDG@TextColours?$AA@		; `string'
PUBLIC	??_C@_0DA@FEECGPGI@tl?3FFFFFFFF?5tr?3FFFFFFFF?5bl?3FFFFF@ ; `string'
PUBLIC	??_C@_04IEDBBIIG@Font?$AA@			; `string'
PUBLIC	??_C@_0M@LHNAIPKC@Tahoma?9Bold?$AA@		; `string'
PUBLIC	??_C@_0N@CCPGAGID@FrameEnabled?$AA@		; `string'
PUBLIC	??_C@_0BC@NDMEIEMB@BackgroundEnabled?$AA@	; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??1UDim@CEGUI@@QAE@XZ				; CEGUI::UDim::~UDim
PUBLIC	??1UVector2@CEGUI@@QAE@XZ			; CEGUI::UVector2::~UVector2
PUBLIC	??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z		; CEGUI::UVector2::UVector2
PUBLIC	??0UDim@CEGUI@@QAE@MM@Z				; CEGUI::UDim::UDim
PUBLIC	__real@00000000
PUBLIC	?getFontHeight@Font@CEGUI@@QBEMM@Z		; CEGUI::Font::getFontHeight
PUBLIC	__real@3f800000
PUBLIC	??0String@CEGUI@@QAE@PBD@Z			; CEGUI::String::String
PUBLIC	??_C@_0DO@GPPFHMOH@WellRo?5Launcher?5?9?5Development?5Ve@ ; `string'
PUBLIC	?InitD3DStuff@@YAXXZ				; InitD3DStuff
EXTRN	?SetupCommands@@YAXXZ:PROC			; SetupCommands
EXTRN	??0CNetStats@@QAE@XZ:PROC			; CNetStats::CNetStats
EXTRN	??0CNameTags@@QAE@PAUIDirect3DDevice8@@@Z:PROC	; CNameTags::CNameTags
EXTRN	??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z:PROC	; CCmdWindow::CCmdWindow
EXTRN	??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z:PROC ; CChatWindow::CChatWindow
EXTRN	?setVisible@Window@CEGUI@@QAEX_N@Z:PROC		; CEGUI::Window::setVisible
EXTRN	?setAlpha@Window@CEGUI@@QAEXM@Z:PROC		; CEGUI::Window::setAlpha
EXTRN	?setProperty@PropertySet@CEGUI@@QAEXABVString@2@0@Z:PROC ; CEGUI::PropertySet::setProperty
EXTRN	?setPosition@Window@CEGUI@@QAEXABVUVector2@2@@Z:PROC ; CEGUI::Window::setPosition
EXTRN	?setSize@Window@CEGUI@@QAEXABVUVector2@2@@Z:PROC ; CEGUI::Window::setSize
EXTRN	?getTextExtent@Font@CEGUI@@QBEMABVString@2@M@Z:PROC ; CEGUI::Font::getTextExtent
EXTRN	?GetTahomaBoldFont@CGUI@@QAEPAVFont@CEGUI@@XZ:PROC ; CGUI::GetTahomaBoldFont
EXTRN	??1String@CEGUI@@QAE@XZ:PROC			; CEGUI::String::~String
EXTRN	?setText@Window@CEGUI@@QAEXABVString@2@@Z:PROC	; CEGUI::Window::setText
EXTRN	?CreateGUIStaticText@CGUI@@QAEPAUCGUIStaticText@@PAVWindow@CEGUI@@@Z:PROC ; CGUI::CreateGUIStaticText
EXTRN	?Initialize@CGUI@@QAE_NXZ:PROC			; CGUI::Initialize
EXTRN	??0CGUI@@QAE@PAUIDirect3DDevice8@@@Z:PROC	; CGUI::CGUI
EXTRN	__fltused:DWORD
;	COMDAT __real@431b0000
CONST	SEGMENT
__real@431b0000 DD 0431b0000r			; 155
CONST	ENDS
;	COMDAT ??_C@_0M@GDDLCFDG@TextColours?$AA@
CONST	SEGMENT
??_C@_0M@GDDLCFDG@TextColours?$AA@ DB 'TextColours', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FEECGPGI@tl?3FFFFFFFF?5tr?3FFFFFFFF?5bl?3FFFFF@
CONST	SEGMENT
??_C@_0DA@FEECGPGI@tl?3FFFFFFFF?5tr?3FFFFFFFF?5bl?3FFFFF@ DB 'tl:FFFFFFFF'
	DB	' tr:FFFFFFFF bl:FFFFFFFF br:FFFFFFFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEDBBIIG@Font?$AA@
CONST	SEGMENT
??_C@_04IEDBBIIG@Font?$AA@ DB 'Font', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHNAIPKC@Tahoma?9Bold?$AA@
CONST	SEGMENT
??_C@_0M@LHNAIPKC@Tahoma?9Bold?$AA@ DB 'Tahoma-Bold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CCPGAGID@FrameEnabled?$AA@
CONST	SEGMENT
??_C@_0N@CCPGAGID@FrameEnabled?$AA@ DB 'FrameEnabled', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NDMEIEMB@BackgroundEnabled?$AA@
CONST	SEGMENT
??_C@_0BC@NDMEIEMB@BackgroundEnabled?$AA@ DB 'BackgroundEnabled', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT ??_C@_0DO@GPPFHMOH@WellRo?5Launcher?5?9?5Development?5Ve@
CONST	SEGMENT
??_C@_0DO@GPPFHMOH@WellRo?5Launcher?5?9?5Development?5Ve@ DB 'WellRo Laun'
	DB	'cher - Development Version (10:11:21, Jul  6 2019)', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?InitD3DStuff@@YAXXZ DD 019930522H
	DD	017H
	DD	FLAT:__unwindtable$?InitD3DStuff@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?InitD3DStuff@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$6
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$8
	DD	08H
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$10
	DD	0aH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$11
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$13
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$14
	DD	0eH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$15
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$16
	DD	010H
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$17
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$18
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$19
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$20
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$21
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?InitD3DStuff@@YAXXZ$22
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?InitD3DStuff@@YAXXZ
_TEXT	SEGMENT
tv318 = -2316						; size = 4
tv311 = -2316						; size = 4
tv367 = -2312						; size = 4
tv365 = -2312						; size = 4
tv316 = -2308						; size = 4
tv309 = -2308						; size = 4
tv366 = -2304						; size = 4
tv82 = -2304						; size = 4
tv314 = -2300						; size = 4
tv307 = -2300						; size = 4
tv303 = -2296						; size = 4
tv296 = -2296						; size = 4
tv288 = -2296						; size = 4
tv281 = -2296						; size = 4
tv273 = -2296						; size = 4
tv159 = -2296						; size = 4
tv92 = -2296						; size = 4
tv72 = -2296						; size = 4
$T209521 = -2288					; size = 4
$T209522 = -2276					; size = 4
$T209525 = -2264					; size = 152
$T209526 = -2104					; size = 152
$T209527 = -1944					; size = 16
$T209528 = -1920					; size = 8
$T209529 = -1904					; size = 8
$T209530 = -1888					; size = 152
$T209531 = -1728					; size = 16
$T209532 = -1704					; size = 8
$T209533 = -1688					; size = 8
$T209534 = -1672					; size = 152
$T209535 = -1512					; size = 152
$T209536 = -1352					; size = 152
$T209537 = -1192					; size = 152
$T209538 = -1032					; size = 152
$T209539 = -872						; size = 152
$T209540 = -712						; size = 152
$T209541 = -552						; size = 152
$T209542 = -392						; size = 4
$T209543 = -380						; size = 4
$T209546 = -368						; size = 4
$T209547 = -356						; size = 4
$T209550 = -344						; size = 4
$T209551 = -332						; size = 4
$T209554 = -320						; size = 4
$T209555 = -308						; size = 4
$T209558 = -296						; size = 4
$T209559 = -284						; size = 4
_fTextY$ = -80						; size = 4
_fTextX$ = -68						; size = 4
_fTextHeight$ = -56					; size = 4
_fTextWidth$ = -44					; size = 4
_pFont$ = -32						; size = 4
_pVersion$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
?InitD3DStuff@@YAXXZ PROC				; InitD3DStuff, COMDAT

; 117  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?InitD3DStuff@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 2304				; 00000900H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-2316]
	mov	ecx, 576				; 00000240H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 118  : 	pGUI = new CGUI(pD3DDevice);

	push	208					; 000000d0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209522[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209522[ebp], 0
	je	SHORT $LN3@InitD3DStu
	mov	eax, DWORD PTR ?pD3DDevice@@3PAUIDirect3DDevice8@@A ; pD3DDevice
	push	eax
	mov	ecx, DWORD PTR $T209522[ebp]
	call	??0CGUI@@QAE@PAUIDirect3DDevice8@@@Z	; CGUI::CGUI
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@InitD3DStu
$LN3@InitD3DStu:
	mov	DWORD PTR tv72[ebp], 0
$LN4@InitD3DStu:
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T209521[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209521[ebp]
	mov	DWORD PTR ?pGUI@@3PAVCGUI@@A, edx	; pGUI

; 119  : 	pGUI->Initialize();

	mov	ecx, DWORD PTR ?pGUI@@3PAVCGUI@@A	; pGUI
	call	?Initialize@CGUI@@QAE_NXZ		; CGUI::Initialize

; 120  : 
; 121  : 
; 122  : 	CGUIStaticText * pVersion = pGUI->CreateGUIStaticText();

	push	0
	mov	ecx, DWORD PTR ?pGUI@@3PAVCGUI@@A	; pGUI
	call	?CreateGUIStaticText@CGUI@@QAEPAUCGUIStaticText@@PAVWindow@CEGUI@@@Z ; CGUI::CreateGUIStaticText
	mov	DWORD PTR _pVersion$[ebp], eax

; 123  : 	pVersion->setText("WellRo Launcher - Development Version (" __TIME__ ", " __DATE__ ")");

	push	OFFSET ??_C@_0DO@GPPFHMOH@WellRo?5Launcher?5?9?5Development?5Ve@
	lea	ecx, DWORD PTR $T209525[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	lea	eax, DWORD PTR $T209525[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setText@Window@CEGUI@@QAEXABVString@2@@Z ; CEGUI::Window::setText
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209525[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 124  : 	CEGUI::Font * pFont = pGUI->GetTahomaBoldFont();

	mov	ecx, DWORD PTR ?pGUI@@3PAVCGUI@@A	; pGUI
	call	?GetTahomaBoldFont@CGUI@@QAEPAVFont@CEGUI@@XZ ; CGUI::GetTahomaBoldFont
	mov	DWORD PTR _pFont$[ebp], eax

; 125  : 	float fTextWidth = pFont->getTextExtent("WellRo Launcher - Development Version (" __TIME__ ", " __DATE__ ")");

	push	OFFSET ??_C@_0DO@GPPFHMOH@WellRo?5Launcher?5?9?5Development?5Ve@
	lea	ecx, DWORD PTR $T209526[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T209526[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFont$[ebp]
	call	?getTextExtent@Font@CEGUI@@QBEMABVString@2@M@Z ; CEGUI::Font::getTextExtent
	fstp	DWORD PTR _fTextWidth$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209526[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 126  : 	float fTextHeight = pFont->getFontHeight();

	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pFont$[ebp]
	call	?getFontHeight@Font@CEGUI@@QBEMM@Z	; CEGUI::Font::getFontHeight
	fstp	DWORD PTR _fTextHeight$[ebp]

; 127  : 	pVersion->setSize(CEGUI::UVector2(CEGUI::UDim(0, fTextWidth), CEGUI::UDim(0, fTextHeight)));

	push	ecx
	fld	DWORD PTR _fTextHeight$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T209528[ebp]
	call	??0UDim@CEGUI@@QAE@MM@Z			; CEGUI::UDim::UDim
	mov	DWORD PTR tv92[ebp], eax
	mov	eax, DWORD PTR tv92[ebp]
	mov	DWORD PTR tv307[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv307[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _fTextWidth$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T209529[ebp]
	call	??0UDim@CEGUI@@QAE@MM@Z			; CEGUI::UDim::UDim
	mov	DWORD PTR tv82[ebp], eax
	mov	edx, DWORD PTR tv82[ebp]
	mov	DWORD PTR tv309[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv309[ebp]
	push	eax
	lea	ecx, DWORD PTR $T209527[ebp]
	call	??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z	; CEGUI::UVector2::UVector2
	mov	DWORD PTR tv365[ebp], eax
	mov	ecx, DWORD PTR tv365[ebp]
	mov	DWORD PTR tv311[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR tv311[ebp]
	push	edx
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setSize@Window@CEGUI@@QAEXABVUVector2@2@@Z ; CEGUI::Window::setSize
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T209527[ebp]
	call	??1UVector2@CEGUI@@QAE@XZ		; CEGUI::UVector2::~UVector2
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T209529[ebp]
	call	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209528[ebp]
	call	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim

; 128  : 	float fTextX = pFont->getTextExtent("_");

	push	OFFSET ??_C@_01IDAFKMJL@_?$AA@
	lea	ecx, DWORD PTR $T209530[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 6
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T209530[ebp]
	push	eax
	mov	ecx, DWORD PTR _pFont$[ebp]
	call	?getTextExtent@Font@CEGUI@@QBEMABVString@2@M@Z ; CEGUI::Font::getTextExtent
	fstp	DWORD PTR _fTextX$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209530[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 129  : 	float fTextY = -(fTextX + fTextHeight);

	fld	DWORD PTR _fTextX$[ebp]
	fadd	DWORD PTR _fTextHeight$[ebp]
	fchs
	fstp	DWORD PTR _fTextY$[ebp]

; 130  : 	pVersion->setPosition(CEGUI::UVector2(CEGUI::UDim(0, fTextX), CEGUI::UDim(1, fTextY)));

	push	ecx
	fld	DWORD PTR _fTextY$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld1
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T209532[ebp]
	call	??0UDim@CEGUI@@QAE@MM@Z			; CEGUI::UDim::UDim
	mov	DWORD PTR tv159[ebp], eax
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv314[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR tv314[ebp]
	push	ecx
	push	ecx
	fld	DWORD PTR _fTextX$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T209533[ebp]
	call	??0UDim@CEGUI@@QAE@MM@Z			; CEGUI::UDim::UDim
	mov	DWORD PTR tv366[ebp], eax
	mov	edx, DWORD PTR tv366[ebp]
	mov	DWORD PTR tv316[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv316[ebp]
	push	eax
	lea	ecx, DWORD PTR $T209531[ebp]
	call	??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z	; CEGUI::UVector2::UVector2
	mov	DWORD PTR tv367[ebp], eax
	mov	ecx, DWORD PTR tv367[ebp]
	mov	DWORD PTR tv318[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 9
	mov	edx, DWORD PTR tv318[ebp]
	push	edx
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setPosition@Window@CEGUI@@QAEXABVUVector2@2@@Z ; CEGUI::Window::setPosition
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR $T209531[ebp]
	call	??1UVector2@CEGUI@@QAE@XZ		; CEGUI::UVector2::~UVector2
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T209533[ebp]
	call	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209532[ebp]
	call	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim

; 131  : 	pVersion->setProperty("BackgroundEnabled", "false");

	push	OFFSET ??_C@_05LAPONLG@false?$AA@
	lea	ecx, DWORD PTR $T209534[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 10		; 0000000aH
	push	OFFSET ??_C@_0BC@NDMEIEMB@BackgroundEnabled?$AA@
	lea	ecx, DWORD PTR $T209535[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	eax, DWORD PTR $T209534[ebp]
	push	eax
	lea	ecx, DWORD PTR $T209535[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setProperty@PropertySet@CEGUI@@QAEXABVString@2@0@Z ; CEGUI::PropertySet::setProperty
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T209535[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209534[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 132  : 	pVersion->setProperty("FrameEnabled", "false");

	push	OFFSET ??_C@_05LAPONLG@false?$AA@
	lea	ecx, DWORD PTR $T209536[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 12		; 0000000cH
	push	OFFSET ??_C@_0N@CCPGAGID@FrameEnabled?$AA@
	lea	ecx, DWORD PTR $T209537[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
	lea	eax, DWORD PTR $T209536[ebp]
	push	eax
	lea	ecx, DWORD PTR $T209537[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setProperty@PropertySet@CEGUI@@QAEXABVString@2@0@Z ; CEGUI::PropertySet::setProperty
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR $T209537[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209536[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 133  : 	pVersion->setProperty("Font", "Tahoma-Bold");

	push	OFFSET ??_C@_0M@LHNAIPKC@Tahoma?9Bold?$AA@
	lea	ecx, DWORD PTR $T209538[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 14		; 0000000eH
	push	OFFSET ??_C@_04IEDBBIIG@Font?$AA@
	lea	ecx, DWORD PTR $T209539[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	BYTE PTR __$EHRec$[ebp+8], 15		; 0000000fH
	lea	eax, DWORD PTR $T209538[ebp]
	push	eax
	lea	ecx, DWORD PTR $T209539[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setProperty@PropertySet@CEGUI@@QAEXABVString@2@0@Z ; CEGUI::PropertySet::setProperty
	mov	BYTE PTR __$EHRec$[ebp+8], 14		; 0000000eH
	lea	ecx, DWORD PTR $T209539[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209538[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 134  : 	pVersion->setProperty("TextColours", "tl:FFFFFFFF tr:FFFFFFFF bl:FFFFFFFF br:FFFFFFFF");

	push	OFFSET ??_C@_0DA@FEECGPGI@tl?3FFFFFFFF?5tr?3FFFFFFFF?5bl?3FFFFF@
	lea	ecx, DWORD PTR $T209540[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	DWORD PTR __$EHRec$[ebp+8], 16		; 00000010H
	push	OFFSET ??_C@_0M@GDDLCFDG@TextColours?$AA@
	lea	ecx, DWORD PTR $T209541[ebp]
	call	??0String@CEGUI@@QAE@PBD@Z		; CEGUI::String::String
	mov	BYTE PTR __$EHRec$[ebp+8], 17		; 00000011H
	lea	eax, DWORD PTR $T209540[ebp]
	push	eax
	lea	ecx, DWORD PTR $T209541[ebp]
	push	ecx
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setProperty@PropertySet@CEGUI@@QAEXABVString@2@0@Z ; CEGUI::PropertySet::setProperty
	mov	BYTE PTR __$EHRec$[ebp+8], 16		; 00000010H
	lea	ecx, DWORD PTR $T209541[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T209540[ebp]
	call	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String

; 135  : 	pVersion->setAlpha(155);

	push	ecx
	fld	DWORD PTR __real@431b0000
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setAlpha@Window@CEGUI@@QAEXM@Z		; CEGUI::Window::setAlpha

; 136  : 	pVersion->setVisible(true);

	push	1
	mov	ecx, DWORD PTR _pVersion$[ebp]
	call	?setVisible@Window@CEGUI@@QAEX_N@Z	; CEGUI::Window::setVisible

; 137  : 
; 138  : 	// Create instances of the chat and input classes.
; 139  : 	pChatWindow = new CChatWindow(pD3DDevice);

	push	976					; 000003d0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209543[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 18		; 00000012H
	cmp	DWORD PTR $T209543[ebp], 0
	je	SHORT $LN5@InitD3DStu
	mov	eax, DWORD PTR ?pD3DDevice@@3PAUIDirect3DDevice8@@A ; pD3DDevice
	push	eax
	mov	ecx, DWORD PTR $T209543[ebp]
	call	??0CChatWindow@@QAE@PAUIDirect3DDevice8@@@Z ; CChatWindow::CChatWindow
	mov	DWORD PTR tv273[ebp], eax
	jmp	SHORT $LN6@InitD3DStu
$LN5@InitD3DStu:
	mov	DWORD PTR tv273[ebp], 0
$LN6@InitD3DStu:
	mov	ecx, DWORD PTR tv273[ebp]
	mov	DWORD PTR $T209542[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209542[ebp]
	mov	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, edx ; pChatWindow

; 140  : 	pCmdWindow = new CCmdWindow(pD3DDevice);

	push	4844					; 000012ecH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209547[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 19		; 00000013H
	cmp	DWORD PTR $T209547[ebp], 0
	je	SHORT $LN7@InitD3DStu
	mov	eax, DWORD PTR ?pD3DDevice@@3PAUIDirect3DDevice8@@A ; pD3DDevice
	push	eax
	mov	ecx, DWORD PTR $T209547[ebp]
	call	??0CCmdWindow@@QAE@PAUIDirect3DDevice8@@@Z ; CCmdWindow::CCmdWindow
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN8@InitD3DStu
$LN7@InitD3DStu:
	mov	DWORD PTR tv281[ebp], 0
$LN8@InitD3DStu:
	mov	ecx, DWORD PTR tv281[ebp]
	mov	DWORD PTR $T209546[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209546[ebp]
	mov	DWORD PTR ?pCmdWindow@@3PAVCCmdWindow@@A, edx ; pCmdWindow

; 141  : 
; 142  : 	pScoreBoard = new CScoreBoard();

	push	1
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209551[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 20		; 00000014H
	cmp	DWORD PTR $T209551[ebp], 0
	je	SHORT $LN9@InitD3DStu
	mov	ecx, DWORD PTR $T209551[ebp]
	call	??0CScoreBoard@@QAE@XZ			; CScoreBoard::CScoreBoard
	mov	DWORD PTR tv288[ebp], eax
	jmp	SHORT $LN10@InitD3DStu
$LN9@InitD3DStu:
	mov	DWORD PTR tv288[ebp], 0
$LN10@InitD3DStu:
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR $T209550[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T209550[ebp]
	mov	DWORD PTR ?pScoreBoard@@3PAVCScoreBoard@@A, ecx ; pScoreBoard

; 143  : 	pNameTags = new CNameTags(pD3DDevice);

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209555[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 21		; 00000015H
	cmp	DWORD PTR $T209555[ebp], 0
	je	SHORT $LN11@InitD3DStu
	mov	eax, DWORD PTR ?pD3DDevice@@3PAUIDirect3DDevice8@@A ; pD3DDevice
	push	eax
	mov	ecx, DWORD PTR $T209555[ebp]
	call	??0CNameTags@@QAE@PAUIDirect3DDevice8@@@Z ; CNameTags::CNameTags
	mov	DWORD PTR tv296[ebp], eax
	jmp	SHORT $LN12@InitD3DStu
$LN11@InitD3DStu:
	mov	DWORD PTR tv296[ebp], 0
$LN12@InitD3DStu:
	mov	ecx, DWORD PTR tv296[ebp]
	mov	DWORD PTR $T209554[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209554[ebp]
	mov	DWORD PTR ?pNameTags@@3PAVCNameTags@@A, edx ; pNameTags

; 144  : 	pNetStats = new CNetStats();

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209559[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 22		; 00000016H
	cmp	DWORD PTR $T209559[ebp], 0
	je	SHORT $LN13@InitD3DStu
	mov	ecx, DWORD PTR $T209559[ebp]
	call	??0CNetStats@@QAE@XZ			; CNetStats::CNetStats
	mov	DWORD PTR tv303[ebp], eax
	jmp	SHORT $LN14@InitD3DStu
$LN13@InitD3DStu:
	mov	DWORD PTR tv303[ebp], 0
$LN14@InitD3DStu:
	mov	eax, DWORD PTR tv303[ebp]
	mov	DWORD PTR $T209558[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T209558[ebp]
	mov	DWORD PTR ?pNetStats@@3PAVCNetStats@@A, ecx ; pNetStats

; 145  : 
; 146  : 	SetupCommands();

	call	?SetupCommands@@YAXXZ			; SetupCommands

; 147  : 
; 148  : 	D3DInited = true;

	mov	BYTE PTR ?D3DInited@@3_NA, 1		; D3DInited

; 149  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 2316				; 0000090cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?InitD3DStuff@@YAXXZ$0:
	mov	eax, DWORD PTR $T209522[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitD3DStuff@@YAXXZ$1:
	lea	ecx, DWORD PTR $T209525[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$2:
	lea	ecx, DWORD PTR $T209526[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$3:
	lea	ecx, DWORD PTR $T209528[ebp]
	jmp	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
__unwindfunclet$?InitD3DStuff@@YAXXZ$4:
	lea	ecx, DWORD PTR $T209529[ebp]
	jmp	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
__unwindfunclet$?InitD3DStuff@@YAXXZ$5:
	lea	ecx, DWORD PTR $T209527[ebp]
	jmp	??1UVector2@CEGUI@@QAE@XZ		; CEGUI::UVector2::~UVector2
__unwindfunclet$?InitD3DStuff@@YAXXZ$6:
	lea	ecx, DWORD PTR $T209530[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$7:
	lea	ecx, DWORD PTR $T209532[ebp]
	jmp	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
__unwindfunclet$?InitD3DStuff@@YAXXZ$8:
	lea	ecx, DWORD PTR $T209533[ebp]
	jmp	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
__unwindfunclet$?InitD3DStuff@@YAXXZ$9:
	lea	ecx, DWORD PTR $T209531[ebp]
	jmp	??1UVector2@CEGUI@@QAE@XZ		; CEGUI::UVector2::~UVector2
__unwindfunclet$?InitD3DStuff@@YAXXZ$10:
	lea	ecx, DWORD PTR $T209534[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$11:
	lea	ecx, DWORD PTR $T209535[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$12:
	lea	ecx, DWORD PTR $T209536[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$13:
	lea	ecx, DWORD PTR $T209537[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$14:
	lea	ecx, DWORD PTR $T209538[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$15:
	lea	ecx, DWORD PTR $T209539[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$16:
	lea	ecx, DWORD PTR $T209540[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$17:
	lea	ecx, DWORD PTR $T209541[ebp]
	jmp	??1String@CEGUI@@QAE@XZ			; CEGUI::String::~String
__unwindfunclet$?InitD3DStuff@@YAXXZ$18:
	mov	eax, DWORD PTR $T209543[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitD3DStuff@@YAXXZ$19:
	mov	eax, DWORD PTR $T209547[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitD3DStuff@@YAXXZ$20:
	mov	eax, DWORD PTR $T209551[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitD3DStuff@@YAXXZ$21:
	mov	eax, DWORD PTR $T209555[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?InitD3DStuff@@YAXXZ$22:
	mov	eax, DWORD PTR $T209559[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?InitD3DStuff@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-2320]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?InitD3DStuff@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?InitD3DStuff@@YAXXZ ENDP				; InitD3DStuff
PUBLIC	?GetTextManager@CNetworkManager@@QAEPAVCTextManager@@XZ ; CNetworkManager::GetTextManager
PUBLIC	?TheSceneEnd@@YAXXZ				; TheSceneEnd
EXTRN	?onRender@CScripts@@QAEXXZ:PROC			; CScripts::onRender
EXTRN	?Process@CTextManager@@QAEXXZ:PROC		; CTextManager::Process
EXTRN	?Draw@CCmdWindow@@QAEXXZ:PROC			; CCmdWindow::Draw
EXTRN	?Draw@CChatWindow@@QAEXXZ:PROC			; CChatWindow::Draw
EXTRN	?Draw@CNetStats@@QAEXXZ:PROC			; CNetStats::Draw
EXTRN	?Draw@CScoreBoard@@QAEXXZ:PROC			; CScoreBoard::Draw
EXTRN	?DisplayHud@CGame@@QAEXH@Z:PROC			; CGame::DisplayHud
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	?Draw@CNameTags@@QAEXXZ:PROC			; CNameTags::Draw
EXTRN	?IsMenuActive@CGame@@QAEHXZ:PROC		; CGame::IsMenuActive
EXTRN	?Process@CNetworkManager@@QAEXXZ:PROC		; CNetworkManager::Process
EXTRN	?ToggleFrameLimiterState@CGame@@QAEXH@Z:PROC	; CGame::ToggleFrameLimiterState
EXTRN	??0CNetworkManager@@QAE@PADH00@Z:PROC		; CNetworkManager::CNetworkManager
EXTRN	_atoi:PROC
EXTRN	?FileCheckSum@@YAHXZ:PROC			; FileCheckSum
EXTRN	?bScriptInited@@3HA:DWORD			; bScriptInited
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TheSceneEnd@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TheSceneEnd@@YAXXZ$0
__ehfuncinfo$?TheSceneEnd@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TheSceneEnd@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?TheSceneEnd@@YAXXZ
_TEXT	SEGMENT
tv82 = -232						; size = 4
$T209600 = -224						; size = 4
$T209601 = -212						; size = 4
__$EHRec$ = -12						; size = 12
?TheSceneEnd@@YAXXZ PROC				; TheSceneEnd, COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TheSceneEnd@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 155  : 	if(bScriptInited)

	cmp	DWORD PTR ?bScriptInited@@3HA, 0	; bScriptInited
	je	$LN14@TheSceneEn

; 156  : 	{
; 157  : 		// If the game is not inited then do it now.
; 158  : 		if(!bGameInited && FileCheckSum())

	cmp	DWORD PTR ?bGameInited@@3HA, 0		; bGameInited
	jne	$LN12@TheSceneEn
	call	?FileCheckSum@@YAHXZ			; FileCheckSum
	test	eax, eax
	je	$LN12@TheSceneEn

; 159  : 		{
; 160  : 			if(!tSettings.bDebug)

	cmp	DWORD PTR ?tSettings@@3U_GAME_SETTINGS@@A, 0
	jne	SHORT $LN11@TheSceneEn

; 161  : 			{
; 162  : 				pNetowkManager = new CNetworkManager(tSettings.szConnectHost,atoi(tSettings.szConnectPort),
; 163  : 					tSettings.szNickName,tSettings.szConnectPass);

	push	360					; 00000168H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209601[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209601[ebp], 0
	je	SHORT $LN16@TheSceneEn
	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+262
	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+391
	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+133
	call	_atoi
	add	esp, 4
	push	eax
	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+4
	mov	ecx, DWORD PTR $T209601[ebp]
	call	??0CNetworkManager@@QAE@PADH00@Z	; CNetworkManager::CNetworkManager
	mov	DWORD PTR tv82[ebp], eax
	jmp	SHORT $LN17@TheSceneEn
$LN16@TheSceneEn:
	mov	DWORD PTR tv82[ebp], 0
$LN17@TheSceneEn:
	mov	eax, DWORD PTR tv82[ebp]
	mov	DWORD PTR $T209600[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T209600[ebp]
	mov	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, ecx ; pNetowkManager
$LN11@TheSceneEn:

; 164  : 			}
; 165  : 
; 166  : 			pGame->ToggleFrameLimiterState(TRUE);

	push	1
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ToggleFrameLimiterState@CGame@@QAEXH@Z	; CGame::ToggleFrameLimiterState

; 167  : 			bGameInited = TRUE;

	mov	DWORD PTR ?bGameInited@@3HA, 1		; bGameInited

; 168  : 			return;

	jmp	$LN14@TheSceneEn
$LN12@TheSceneEn:

; 169  : 		}
; 170  : 
; 171  : 		// Process the netgame if it's active.
; 172  : 		if(pNetowkManager) pNetowkManager->Process();

	cmp	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, 0 ; pNetowkManager
	je	SHORT $LN10@TheSceneEn
	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?Process@CNetworkManager@@QAEXXZ	; CNetworkManager::Process
$LN10@TheSceneEn:

; 173  : 
; 174  : 		if(!pGame->IsMenuActive() && bShowNameTags) {

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsMenuActive@CGame@@QAEHXZ		; CGame::IsMenuActive
	test	eax, eax
	jne	SHORT $LN9@TheSceneEn
	cmp	DWORD PTR ?bShowNameTags@@3HA, 0	; bShowNameTags
	je	SHORT $LN9@TheSceneEn

; 175  : 			pNameTags->Draw();

	mov	ecx, DWORD PTR ?pNameTags@@3PAVCNameTags@@A ; pNameTags
	call	?Draw@CNameTags@@QAEXXZ			; CNameTags::Draw
$LN9@TheSceneEn:

; 176  : 		}
; 177  : 
; 178  : 		if(!pGame->IsMenuActive()) {

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsMenuActive@CGame@@QAEHXZ		; CGame::IsMenuActive
	test	eax, eax
	jne	$LN14@TheSceneEn

; 179  : 			if((pNetowkManager) && GetAsyncKeyState(VK_F5)) {

	cmp	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, 0 ; pNetowkManager
	je	SHORT $LN7@TheSceneEn
	mov	esi, esp
	push	116					; 00000074H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	je	SHORT $LN7@TheSceneEn

; 180  : 				pGame->DisplayHud(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 181  : 				pScoreBoard->Draw();

	mov	ecx, DWORD PTR ?pScoreBoard@@3PAVCScoreBoard@@A ; pScoreBoard
	call	?Draw@CScoreBoard@@QAEXXZ		; CScoreBoard::Draw
	jmp	$LN6@TheSceneEn
$LN7@TheSceneEn:

; 182  : 			}
; 183  : 			else if((pNetowkManager) && GetAsyncKeyState(VK_F6)) {

	cmp	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, 0 ; pNetowkManager
	je	SHORT $LN5@TheSceneEn
	mov	esi, esp
	push	117					; 00000075H
	call	DWORD PTR __imp__GetAsyncKeyState@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	test	eax, eax
	je	SHORT $LN5@TheSceneEn

; 184  : 				pGame->DisplayHud(FALSE);

	push	0
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 185  : 				pNetStats->Draw();

	mov	ecx, DWORD PTR ?pNetStats@@3PAVCNetStats@@A ; pNetStats
	call	?Draw@CNetStats@@QAEXXZ			; CNetStats::Draw

; 186  : 			} 
; 187  : 			else

	jmp	SHORT $LN6@TheSceneEn
$LN5@TheSceneEn:

; 188  : 			{
; 189  : 				pGame->DisplayHud(TRUE);

	push	1
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?DisplayHud@CGame@@QAEXH@Z		; CGame::DisplayHud

; 190  : 				if(pChatWindow) pChatWindow->Draw();

	cmp	DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A, 0 ; pChatWindow
	je	SHORT $LN3@TheSceneEn
	mov	ecx, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	call	?Draw@CChatWindow@@QAEXXZ		; CChatWindow::Draw
$LN3@TheSceneEn:

; 191  : 				if(pCmdWindow) pCmdWindow->Draw();

	cmp	DWORD PTR ?pCmdWindow@@3PAVCCmdWindow@@A, 0 ; pCmdWindow
	je	SHORT $LN2@TheSceneEn
	mov	ecx, DWORD PTR ?pCmdWindow@@3PAVCCmdWindow@@A ; pCmdWindow
	call	?Draw@CCmdWindow@@QAEXXZ		; CCmdWindow::Draw
$LN2@TheSceneEn:

; 192  : 				pNetowkManager->GetTextManager()->Process();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetTextManager@CNetworkManager@@QAEPAVCTextManager@@XZ ; CNetworkManager::GetTextManager
	mov	ecx, eax
	call	?Process@CTextManager@@QAEXXZ		; CTextManager::Process
$LN6@TheSceneEn:

; 193  : 			}
; 194  : 			if(pScripts)

	cmp	DWORD PTR ?pScripts@@3PAVCScripts@@A, 0	; pScripts
	je	SHORT $LN14@TheSceneEn

; 195  : 				pScripts->onRender();

	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?onRender@CScripts@@QAEXXZ		; CScripts::onRender
$LN14@TheSceneEn:

; 196  : 		}
; 197  : 	}
; 198  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TheSceneEnd@@YAXXZ$0:
	mov	eax, DWORD PTR $T209601[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?TheSceneEnd@@YAXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-236]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TheSceneEnd@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?TheSceneEnd@@YAXXZ ENDP				; TheSceneEnd
PUBLIC	?SetStringFromCommandLine@@YAXPAD0@Z		; SetStringFromCommandLine
EXTRN	_memset:PROC
EXTRN	__imp__GetCommandLineA@0:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InitSettings@@YAXXZ
_TEXT	SEGMENT
tv76 = -208						; size = 4
_szCmdLine$ = -8					; size = 4
?InitSettings@@YAXXZ PROC				; InitSettings, COMDAT

; 203  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 204  : 	// Get the command line
; 205  : 	char * szCmdLine = GetCommandLine();

	mov	esi, esp
	call	DWORD PTR __imp__GetCommandLineA@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 206  : 
; 207  : 	// Reset the settings struct
; 208  : 	memset(&tSettings, 0, sizeof(GAME_SETTINGS));

	push	520					; 00000208H
	push	0
	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A	; tSettings
	call	_memset
	add	esp, 12					; 0000000cH
$LN12@InitSettin:

; 209  : 
; 210  : 	while(*szCmdLine)

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN13@InitSettin

; 211  : 	{
; 212  : 		// Is the current char a '-' or a '/'?
; 213  : 		if(*szCmdLine == '-' || *szCmdLine == '/')

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN9@InitSettin
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN10@InitSettin
$LN9@InitSettin:

; 214  : 		{
; 215  : 			// Skip the '-' or '/'
; 216  : 			szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 217  : 
; 218  : 			// Check the current char for a valid option char
; 219  : 			switch(*szCmdLine)

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	mov	edx, DWORD PTR tv76[ebp]
	sub	edx, 68					; 00000044H
	mov	DWORD PTR tv76[ebp], edx
	cmp	DWORD PTR tv76[ebp], 54			; 00000036H
	ja	$LN10@InitSettin
	mov	eax, DWORD PTR tv76[ebp]
	movzx	ecx, BYTE PTR $LN15@InitSettin[eax]
	jmp	DWORD PTR $LN16@InitSettin[ecx*4]
$LN6@InitSettin:

; 220  : 			{
; 221  : 			case 'd':
; 222  : 			case 'D':
; 223  : 				tSettings.bDebug = TRUE;

	mov	DWORD PTR ?tSettings@@3U_GAME_SETTINGS@@A, 1

; 224  : 				break;

	jmp	SHORT $LN10@InitSettin
$LN5@InitSettin:

; 225  : 			case 'w':
; 226  : 			case 'W':
; 227  : 				bWindowedMode = TRUE;

	mov	DWORD PTR ?bWindowedMode@@3HA, 1	; bWindowedMode

; 228  : 				break;

	jmp	SHORT $LN10@InitSettin
$LN4@InitSettin:

; 229  : 			case 'h':
; 230  : 			case 'H':
; 231  : 				szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 232  : 				SetStringFromCommandLine(szCmdLine,tSettings.szConnectHost);

	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+4
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	push	eax
	call	?SetStringFromCommandLine@@YAXPAD0@Z	; SetStringFromCommandLine
	add	esp, 8

; 233  : 				break;

	jmp	SHORT $LN10@InitSettin
$LN3@InitSettin:

; 234  : 			case 'p':
; 235  : 			case 'P':
; 236  : 				szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 237  : 				SetStringFromCommandLine(szCmdLine,tSettings.szConnectPort);

	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+133
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	push	eax
	call	?SetStringFromCommandLine@@YAXPAD0@Z	; SetStringFromCommandLine
	add	esp, 8

; 238  : 				break;

	jmp	SHORT $LN10@InitSettin
$LN2@InitSettin:

; 239  : 			case 'n':
; 240  : 			case 'N':
; 241  : 				szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 242  : 				SetStringFromCommandLine(szCmdLine,tSettings.szNickName);

	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+391
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	push	eax
	call	?SetStringFromCommandLine@@YAXPAD0@Z	; SetStringFromCommandLine
	add	esp, 8

; 243  : 				break;

	jmp	SHORT $LN10@InitSettin
$LN1@InitSettin:

; 244  : 			case 'z':
; 245  : 			case 'Z':
; 246  : 				szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 247  : 				SetStringFromCommandLine(szCmdLine,tSettings.szConnectPass);

	push	OFFSET ?tSettings@@3U_GAME_SETTINGS@@A+262
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	push	eax
	call	?SetStringFromCommandLine@@YAXPAD0@Z	; SetStringFromCommandLine
	add	esp, 8
$LN10@InitSettin:

; 248  : 				break;
; 249  : 			}
; 250  : 		}
; 251  : 
; 252  : 		// Increment the current char
; 253  : 		szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 254  : 	}

	jmp	$LN12@InitSettin
$LN13@InitSettin:

; 255  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN16@InitSettin:
	DD	$LN6@InitSettin
	DD	$LN4@InitSettin
	DD	$LN2@InitSettin
	DD	$LN3@InitSettin
	DD	$LN5@InitSettin
	DD	$LN1@InitSettin
	DD	$LN10@InitSettin
$LN15@InitSettin:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	0
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	5
?InitSettings@@YAXXZ ENDP				; InitSettings
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetStringFromCommandLine@@YAXPAD0@Z
_TEXT	SEGMENT
_szCmdLine$ = 8						; size = 4
_szString$ = 12						; size = 4
?SetStringFromCommandLine@@YAXPAD0@Z PROC		; SetStringFromCommandLine, COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN4@SetStringF:

; 261  : 	// Skip any extra whitespace
; 262  : 	while(*szCmdLine == ' ')

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN2@SetStringF

; 263  : 	{
; 264  : 		szCmdLine++;

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 265  : 	}

	jmp	SHORT $LN4@SetStringF
$LN2@SetStringF:

; 266  : 
; 267  : 	// Loop through until we find whitespace or a '-' or a '/'
; 268  : 	while(*szCmdLine && *szCmdLine != ' ' && *szCmdLine != '-' && *szCmdLine != '/')

	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@SetStringF
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN1@SetStringF
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN1@SetStringF
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN1@SetStringF

; 269  : 	{
; 270  : 		*szString = *szCmdLine;

	mov	eax, DWORD PTR _szString$[ebp]
	mov	ecx, DWORD PTR _szCmdLine$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 271  : 		szString++; szCmdLine++;

	mov	eax, DWORD PTR _szString$[ebp]
	add	eax, 1
	mov	DWORD PTR _szString$[ebp], eax
	mov	eax, DWORD PTR _szCmdLine$[ebp]
	add	eax, 1
	mov	DWORD PTR _szCmdLine$[ebp], eax

; 272  : 	}

	jmp	SHORT $LN2@SetStringF
$LN1@SetStringF:

; 273  : 
; 274  : 	// Null terminate the string
; 275  : 	*szString = '\0';

	mov	eax, DWORD PTR _szString$[ebp]
	mov	BYTE PTR [eax], 0

; 276  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SetStringFromCommandLine@@YAXPAD0@Z ENDP		; SetStringFromCommandLine
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?DetermineGTAVersion@@YAHXZ
_TEXT	SEGMENT
tv65 = -208						; size = 4
_byteVerCheck$ = -8					; size = 4
?DetermineGTAVersion@@YAHXZ PROC			; DetermineGTAVersion, COMDAT

; 281  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 282  : 	BYTE * byteVerCheck = (BYTE *)0x608578;

	mov	DWORD PTR _byteVerCheck$[ebp], 6325624	; 00608578H

; 283  : 	
; 284  : 	switch(*byteVerCheck)

	mov	eax, DWORD PTR _byteVerCheck$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv65[ebp], cl
	cmp	BYTE PTR tv65[ebp], 93			; 0000005dH
	je	SHORT $LN1@DetermineG
	cmp	BYTE PTR tv65[ebp], 129			; 00000081H
	je	SHORT $LN2@DetermineG
	jmp	SHORT $LN3@DetermineG
$LN2@DetermineG:

; 285  : 	{
; 286  : 	case 0x81: 
; 287  : 		return VICE_11;

	mov	eax, 2
	jmp	SHORT $LN5@DetermineG
$LN1@DetermineG:

; 288  : 	case 0x5D: 
; 289  : 		return VICE_10;

	mov	eax, 1
	jmp	SHORT $LN5@DetermineG
$LN3@DetermineG:

; 290  : 	}
; 291  : 	
; 292  : 	return UNKNOWN_VERSION;

	xor	eax, eax
$LN5@DetermineG:

; 293  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DetermineGTAVersion@@YAHXZ ENDP			; DetermineGTAVersion
_TEXT	ENDS
PUBLIC	??_C@_03OFAPEBGM@?$CFs?6?$AA@			; `string'
PUBLIC	??_C@_0BA@CBBFCMGI@vc?9p?1client?4log?$AA@	; `string'
PUBLIC	??_C@_01MCMALHOG@a?$AA@				; `string'
PUBLIC	__$ArrayPad$
PUBLIC	?logprintf@@YAXPADZZ				; logprintf
EXTRN	_fprintf:PROC
EXTRN	_puts:PROC
EXTRN	_vsprintf:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_03OFAPEBGM@?$CFs?6?$AA@
CONST	SEGMENT
??_C@_03OFAPEBGM@?$CFs?6?$AA@ DB '%s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CBBFCMGI@vc?9p?1client?4log?$AA@
CONST	SEGMENT
??_C@_0BA@CBBFCMGI@vc?9p?1client?4log?$AA@ DB 'vc-p/client.log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a?$AA@
CONST	SEGMENT
??_C@_01MCMALHOG@a?$AA@ DB 'a', 00H			; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?logprintf@@YAXPADZZ
_TEXT	SEGMENT
_log$ = -544						; size = 4
_args$ = -532						; size = 4
_tmp_buf$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
_format$ = 8						; size = 4
?logprintf@@YAXPADZZ PROC				; logprintf, COMDAT

; 298  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 740				; 000002e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-740]
	mov	ecx, 185				; 000000b9H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 299  : 	char tmp_buf[512];
; 300  : 	va_list args;
; 301  : 	va_start(args, format);

	lea	eax, DWORD PTR _format$[ebp+4]
	mov	DWORD PTR _args$[ebp], eax

; 302  : 	vsprintf(tmp_buf, format, args);

	mov	eax, DWORD PTR _args$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	push	ecx
	lea	edx, DWORD PTR _tmp_buf$[ebp]
	push	edx
	call	_vsprintf
	add	esp, 12					; 0000000cH

; 303  : 	va_end(args);

	mov	DWORD PTR _args$[ebp], 0

; 304  : 	puts(tmp_buf);

	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	call	_puts
	add	esp, 4

; 305  : 	FILE* log = fopen("vc-p/client.log", "a");

	push	OFFSET ??_C@_01MCMALHOG@a?$AA@
	push	OFFSET ??_C@_0BA@CBBFCMGI@vc?9p?1client?4log?$AA@
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _log$[ebp], eax

; 306  : 	fprintf(log, "%s\n", tmp_buf);

	lea	eax, DWORD PTR _tmp_buf$[ebp]
	push	eax
	push	OFFSET ??_C@_03OFAPEBGM@?$CFs?6?$AA@
	mov	ecx, DWORD PTR _log$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 307  : 	fclose(log);

	mov	eax, DWORD PTR _log$[ebp]
	push	eax
	call	_fclose
	add	esp, 4

; 308  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@logprintf
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 740				; 000002e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@logprintf:
	DD	1
	DD	$LN4@logprintf
$LN4@logprintf:
	DD	-520					; fffffdf8H
	DD	512					; 00000200H
	DD	$LN3@logprintf
$LN3@logprintf:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?logprintf@@YAXPADZZ ENDP				; logprintf
_TEXT	ENDS
PUBLIC	?assign@String@CEGUI@@QAEAAV12@PBD@Z		; CEGUI::String::assign
PUBLIC	?init@String@CEGUI@@AAEXXZ			; CEGUI::String::init
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\cegui\cegui\include\ceguistring.h
;	COMDAT ??0String@CEGUI@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cstr$ = 8						; size = 4
??0String@CEGUI@@QAE@PBD@Z PROC				; CEGUI::String::String, COMDAT
; _this$ = ecx

; 606  : 	String(const char* cstr)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 607  : 	{
; 608  : 		init();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?init@String@CEGUI@@AAEXXZ		; CEGUI::String::init

; 609  : 		assign(cstr);

	mov	eax, DWORD PTR _cstr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@String@CEGUI@@QAEAAV12@PBD@Z	; CEGUI::String::assign

; 610  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0String@CEGUI@@QAE@PBD@Z ENDP				; CEGUI::String::String
_TEXT	ENDS
PUBLIC	?assign@String@CEGUI@@QAEAAV12@PBDI@Z		; CEGUI::String::assign
EXTRN	_strlen:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@String@CEGUI@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cstr$ = 8						; size = 4
?assign@String@CEGUI@@QAEAAV12@PBD@Z PROC		; CEGUI::String::assign, COMDAT
; _this$ = ecx

; 1554 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1555 : 		return assign(cstr, strlen(cstr));

	mov	eax, DWORD PTR _cstr$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _cstr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@String@CEGUI@@QAEAAV12@PBDI@Z	; CEGUI::String::assign

; 1556 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@String@CEGUI@@QAEAAV12@PBD@Z ENDP		; CEGUI::String::assign
_TEXT	ENDS
PUBLIC	?setlen@String@CEGUI@@AAEXI@Z			; CEGUI::String::setlen
PUBLIC	?ptr@String@CEGUI@@QAEPAIXZ			; CEGUI::String::ptr
EXTRN	?grow@String@CEGUI@@AAE_NI@Z:PROC		; CEGUI::String::grow
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?assign@String@CEGUI@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
_i$129839 = -32						; size = 4
_pt$ = -20						; size = 4
_this$ = -8						; size = 4
_chars$ = 8						; size = 4
_chars_len$ = 12					; size = 4
?assign@String@CEGUI@@QAEAAV12@PBDI@Z PROC		; CEGUI::String::assign, COMDAT
; _this$ = ecx

; 1575 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1576 : 		grow(chars_len);

	mov	eax, DWORD PTR _chars_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?grow@String@CEGUI@@AAE_NI@Z		; CEGUI::String::grow

; 1577 : 		utf32* pt = ptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ptr@String@CEGUI@@QAEPAIXZ		; CEGUI::String::ptr
	mov	DWORD PTR _pt$[ebp], eax

; 1578 : 
; 1579 : 		for (size_type i = 0; i < chars_len; ++i)

	mov	DWORD PTR _i$129839[ebp], 0
	jmp	SHORT $LN3@assign
$LN2@assign:
	mov	eax, DWORD PTR _i$129839[ebp]
	add	eax, 1
	mov	DWORD PTR _i$129839[ebp], eax
$LN3@assign:
	mov	eax, DWORD PTR _i$129839[ebp]
	cmp	eax, DWORD PTR _chars_len$[ebp]
	jae	SHORT $LN1@assign

; 1580 : 		{
; 1581 : 			*pt++ = static_cast<utf32>(static_cast<unsigned char>(*chars++));

	mov	eax, DWORD PTR _chars$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _pt$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _pt$[ebp]
	add	eax, 4
	mov	DWORD PTR _pt$[ebp], eax
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, 1
	mov	DWORD PTR _chars$[ebp], ecx

; 1582 : 		}

	jmp	SHORT $LN2@assign
$LN1@assign:

; 1583 : 
; 1584 : 		setlen(chars_len);

	mov	eax, DWORD PTR _chars_len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setlen@String@CEGUI@@AAEXI@Z		; CEGUI::String::setlen

; 1585 : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1586 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@String@CEGUI@@QAEAAV12@PBDI@Z ENDP		; CEGUI::String::assign
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?ptr@String@CEGUI@@QAEPAIXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?ptr@String@CEGUI@@QAEPAIXZ PROC			; CEGUI::String::ptr, COMDAT
; _this$ = ecx

; 1206 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1207 : 		return (d_reserve > STR_QUICKBUFF_SIZE) ? d_buffer : d_quickbuff;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 32			; 00000020H
	jbe	SHORT $LN3@ptr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR tv68[ebp], edx
	jmp	SHORT $LN4@ptr
$LN3@ptr:
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR tv68[ebp], eax
$LN4@ptr:
	mov	eax, DWORD PTR tv68[ebp]

; 1208 : 	}

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ptr@String@CEGUI@@QAEPAIXZ ENDP			; CEGUI::String::ptr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?setlen@String@CEGUI@@AAEXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_len$ = 8						; size = 4
?setlen@String@CEGUI@@AAEXI@Z PROC			; CEGUI::String::setlen, COMDAT
; _this$ = ecx

; 4797 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4798 : 		d_cplength = len;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], ecx

; 4799 : 		ptr()[len] = (utf32)(0);

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ptr@String@CEGUI@@QAEPAIXZ		; CEGUI::String::ptr
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+ecx*4], 0

; 4800 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?setlen@String@CEGUI@@AAEXI@Z ENDP			; CEGUI::String::setlen
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?init@String@CEGUI@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?init@String@CEGUI@@AAEXXZ PROC				; CEGUI::String::init, COMDAT
; _this$ = ecx

; 4804 : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4805 : 		d_reserve			= STR_QUICKBUFF_SIZE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 32			; 00000020H

; 4806 : 		d_encodedbuff		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 4807 : 		d_encodedbufflen	= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0

; 4808 : 		d_encodeddatlen		= 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 4809 :         d_buffer            = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+148], 0

; 4810 : 		setlen(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?setlen@String@CEGUI@@AAEXI@Z		; CEGUI::String::setlen

; 4811 : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?init@String@CEGUI@@AAEXXZ ENDP				; CEGUI::String::init
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\cegui\cegui\include\ceguiudim.h
_TEXT	ENDS
;	COMDAT ??0UDim@CEGUI@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scale$ = 8						; size = 4
_offset$ = 12						; size = 4
??0UDim@CEGUI@@QAE@MM@Z PROC				; CEGUI::UDim::UDim, COMDAT
; _this$ = ecx

; 51   :     UDim(float scale, float offset) : d_scale(scale), d_offset(offset) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _scale$[ebp]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _offset$[ebp]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0UDim@CEGUI@@QAE@MM@Z ENDP				; CEGUI::UDim::UDim
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1UDim@CEGUI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1UDim@CEGUI@@QAE@XZ PROC				; CEGUI::UDim::~UDim, COMDAT
; _this$ = ecx

; 53   :     ~UDim() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1UDim@CEGUI@@QAE@XZ ENDP				; CEGUI::UDim::~UDim
_TEXT	ENDS
PUBLIC	??0UDim@CEGUI@@QAE@ABV01@@Z			; CEGUI::UDim::UDim
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z$0
__ehfuncinfo$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z PROC		; CEGUI::UVector2::UVector2, COMDAT
; _this$ = ecx

; 132  :     UVector2(const UDim& x, const UDim& y) : d_x(x), d_y(y) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UDim@CEGUI@@QAE@ABV01@@Z		; CEGUI::UDim::UDim
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0UDim@CEGUI@@QAE@ABV01@@Z		; CEGUI::UDim::UDim
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
__ehhandler$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0UVector2@CEGUI@@QAE@ABVUDim@1@0@Z ENDP		; CEGUI::UVector2::UVector2
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0UDim@CEGUI@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0UDim@CEGUI@@QAE@ABV01@@Z PROC			; CEGUI::UDim::UDim, COMDAT
; _this$ = ecx

; 52   :     UDim(const UDim& v): d_scale(v.d_scale), d_offset(v.d_offset) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0UDim@CEGUI@@QAE@ABV01@@Z ENDP			; CEGUI::UDim::UDim
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1UVector2@CEGUI@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1UVector2@CEGUI@@QAE@XZ$0
__ehfuncinfo$??1UVector2@CEGUI@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1UVector2@CEGUI@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1UVector2@CEGUI@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1UVector2@CEGUI@@QAE@XZ PROC				; CEGUI::UVector2::~UVector2, COMDAT
; _this$ = ecx

; 134  :     ~UVector2() {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1UVector2@CEGUI@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1UVector2@CEGUI@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UDim@CEGUI@@QAE@XZ			; CEGUI::UDim::~UDim
__ehhandler$??1UVector2@CEGUI@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1UVector2@CEGUI@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1UVector2@CEGUI@@QAE@XZ ENDP				; CEGUI::UVector2::~UVector2
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\cegui\cegui\include\ceguifont.h
;	COMDAT ?getFontHeight@Font@CEGUI@@QBEMM@Z
_TEXT	SEGMENT
tv76 = -208						; size = 4
_this$ = -8						; size = 4
_y_scale$ = 8						; size = 4
?getFontHeight@Font@CEGUI@@QBEMM@Z PROC			; CEGUI::Font::getFontHeight, COMDAT
; _this$ = ecx

; 205  :     { return (d_ascender - d_descender) * y_scale; }

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR [eax+640]
	mov	ecx, DWORD PTR _this$[ebp]
	fsub	DWORD PTR [ecx+644]
	fmul	DWORD PTR _y_scale$[ebp]
	fstp	DWORD PTR tv76[ebp]
	fld	DWORD PTR tv76[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?getFontHeight@Font@CEGUI@@QBEMM@Z ENDP			; CEGUI::Font::getFontHeight
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cnetworkmanager.h
_TEXT	ENDS
;	COMDAT ?GetTextManager@CNetworkManager@@QAEPAVCTextManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetTextManager@CNetworkManager@@QAEPAVCTextManager@@XZ PROC ; CNetworkManager::GetTextManager, COMDAT
; _this$ = ecx

; 83   : 	CTextManager * GetTextManager() { return m_pTextManager; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetTextManager@CNetworkManager@@QAEPAVCTextManager@@XZ ENDP ; CNetworkManager::GetTextManager
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\cscoreboard.h
_TEXT	ENDS
;	COMDAT ??0CScoreBoard@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CScoreBoard@@QAE@XZ PROC				; CScoreBoard::CScoreBoard, COMDAT
; _this$ = ecx

; 16   : 	CScoreBoard() {};

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0CScoreBoard@@QAE@XZ ENDP				; CScoreBoard::CScoreBoard
_TEXT	ENDS
END
