; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\scripting\sq_script_natives.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?SetScriptAuthor@CScript@@QAEXPBD@Z		; CScript::SetScriptAuthor
PUBLIC	?GetVM@CScript@@QAEPAUSQVM@@XZ			; CScript::GetVM
PUBLIC	?GetScript@CScripts@@QAEPAVCScript@@H@Z		; CScripts::GetScript
PUBLIC	?sq_setScriptAuthor@@YAHPAUSQVM@@@Z		; sq_setScriptAuthor
EXTRN	_sq_pushbool:PROC
EXTRN	_sq_getstring:PROC
EXTRN	?pScripts@@3PAVCScripts@@A:DWORD		; pScripts
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\scripting\sq_script_natives.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?sq_setScriptAuthor@@YAHPAUSQVM@@@Z
_TEXT	SEGMENT
_szAuthor$209257 = -32					; size = 4
_pScript$209256 = -20					; size = 4
_i$209250 = -8						; size = 4
_pVM$ = 8						; size = 4
?sq_setScriptAuthor@@YAHPAUSQVM@@@Z PROC		; sq_setScriptAuthor, COMDAT

; 18   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 19   : 	for(int i = 0; i < MAX_SCRIPTS; i++)

	mov	DWORD PTR _i$209250[ebp], 0
	jmp	SHORT $LN5@sq_setScri
$LN4@sq_setScri:
	mov	eax, DWORD PTR _i$209250[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209250[ebp], eax
$LN5@sq_setScri:
	cmp	DWORD PTR _i$209250[ebp], 10		; 0000000aH
	jge	SHORT $LN3@sq_setScri

; 20   : 	{
; 21   : 		if(pScripts->GetScript(i))

	mov	eax, DWORD PTR _i$209250[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetScript@CScripts@@QAEPAVCScript@@H@Z	; CScripts::GetScript
	test	eax, eax
	je	SHORT $LN2@sq_setScri

; 22   : 		{
; 23   : 			if(pScripts->GetScript(i)->GetVM() == pVM)

	mov	eax, DWORD PTR _i$209250[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetScript@CScripts@@QAEPAVCScript@@H@Z	; CScripts::GetScript
	mov	ecx, eax
	call	?GetVM@CScript@@QAEPAUSQVM@@XZ		; CScript::GetVM
	cmp	eax, DWORD PTR _pVM$[ebp]
	jne	SHORT $LN2@sq_setScri

; 24   : 			{
; 25   : 				CScript * pScript = pScripts->GetScript(i);

	mov	eax, DWORD PTR _i$209250[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetScript@CScripts@@QAEPAVCScript@@H@Z	; CScripts::GetScript
	mov	DWORD PTR _pScript$209256[ebp], eax

; 26   : 				const SQChar * szAuthor;
; 27   : 				sq_getstring(pVM, -1, &szAuthor);

	lea	eax, DWORD PTR _szAuthor$209257[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	_sq_getstring
	add	esp, 12					; 0000000cH

; 28   : 				pScript->SetScriptAuthor(szAuthor);

	mov	eax, DWORD PTR _szAuthor$209257[ebp]
	push	eax
	mov	ecx, DWORD PTR _pScript$209256[ebp]
	call	?SetScriptAuthor@CScript@@QAEXPBD@Z	; CScript::SetScriptAuthor

; 29   : 				sq_pushbool(pVM, true);

	push	1
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushbool
	add	esp, 8

; 30   : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN6@sq_setScri
$LN2@sq_setScri:

; 31   : 			}
; 32   : 		}
; 33   : 	}

	jmp	$LN4@sq_setScri
$LN3@sq_setScri:

; 34   : 	sq_pushbool(pVM, false);

	push	0
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushbool
	add	esp, 8

; 35   : 	return 1;

	mov	eax, 1
$LN6@sq_setScri:

; 36   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@sq_setScri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@sq_setScri:
	DD	1
	DD	$LN9@sq_setScri
$LN9@sq_setScri:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@sq_setScri
$LN8@sq_setScri:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	65					; 00000041H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	104					; 00000068H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
?sq_setScriptAuthor@@YAHPAUSQVM@@@Z ENDP		; sq_setScriptAuthor
_TEXT	ENDS
PUBLIC	?SetScriptVersion@CScript@@QAEXPBD@Z		; CScript::SetScriptVersion
PUBLIC	?sq_setScriptVersion@@YAHPAUSQVM@@@Z		; sq_setScriptVersion
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?sq_setScriptVersion@@YAHPAUSQVM@@@Z
_TEXT	SEGMENT
_szVersion$209268 = -32					; size = 4
_pScript$209267 = -20					; size = 4
_i$209261 = -8						; size = 4
_pVM$ = 8						; size = 4
?sq_setScriptVersion@@YAHPAUSQVM@@@Z PROC		; sq_setScriptVersion, COMDAT

; 39   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 40   : 	for(int i = 0; i < MAX_SCRIPTS; i++)

	mov	DWORD PTR _i$209261[ebp], 0
	jmp	SHORT $LN5@sq_setScri@2
$LN4@sq_setScri@2:
	mov	eax, DWORD PTR _i$209261[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209261[ebp], eax
$LN5@sq_setScri@2:
	cmp	DWORD PTR _i$209261[ebp], 10		; 0000000aH
	jge	SHORT $LN3@sq_setScri@2

; 41   : 	{
; 42   : 		if(pScripts->GetScript(i))

	mov	eax, DWORD PTR _i$209261[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetScript@CScripts@@QAEPAVCScript@@H@Z	; CScripts::GetScript
	test	eax, eax
	je	SHORT $LN2@sq_setScri@2

; 43   : 		{
; 44   : 			if(pScripts->GetScript(i)->GetVM() == pVM)

	mov	eax, DWORD PTR _i$209261[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetScript@CScripts@@QAEPAVCScript@@H@Z	; CScripts::GetScript
	mov	ecx, eax
	call	?GetVM@CScript@@QAEPAUSQVM@@XZ		; CScript::GetVM
	cmp	eax, DWORD PTR _pVM$[ebp]
	jne	SHORT $LN2@sq_setScri@2

; 45   : 			{
; 46   : 				CScript * pScript = pScripts->GetScript(i);

	mov	eax, DWORD PTR _i$209261[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?GetScript@CScripts@@QAEPAVCScript@@H@Z	; CScripts::GetScript
	mov	DWORD PTR _pScript$209267[ebp], eax

; 47   : 				const SQChar * szVersion;
; 48   : 				sq_getstring(pVM, -1, &szVersion);

	lea	eax, DWORD PTR _szVersion$209268[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	_sq_getstring
	add	esp, 12					; 0000000cH

; 49   : 				pScript->SetScriptVersion(szVersion);

	mov	eax, DWORD PTR _szVersion$209268[ebp]
	push	eax
	mov	ecx, DWORD PTR _pScript$209267[ebp]
	call	?SetScriptVersion@CScript@@QAEXPBD@Z	; CScript::SetScriptVersion

; 50   : 				sq_pushbool(pVM, true);

	push	1
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushbool
	add	esp, 8

; 51   : 				return 1;

	mov	eax, 1
	jmp	SHORT $LN6@sq_setScri@2
$LN2@sq_setScri@2:

; 52   : 			}
; 53   : 		}
; 54   : 	}

	jmp	$LN4@sq_setScri@2
$LN3@sq_setScri@2:

; 55   : 	sq_pushbool(pVM, false);

	push	0
	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_pushbool
	add	esp, 8

; 56   : 	return 1;

	mov	eax, 1
$LN6@sq_setScri@2:

; 57   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@sq_setScri@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN10@sq_setScri@2:
	DD	1
	DD	$LN9@sq_setScri@2
$LN9@sq_setScri@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN8@sq_setScri@2
$LN8@sq_setScri@2:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?sq_setScriptVersion@@YAHPAUSQVM@@@Z ENDP		; sq_setScriptVersion
_TEXT	ENDS
PUBLIC	??4SQObjectPtr@@QAEAAU0@ABU0@@Z			; SQObjectPtr::operator=
PUBLIC	?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z	; stack_get
PUBLIC	??0SQObjectPtr@@QAE@XZ				; SQObjectPtr::SQObjectPtr
PUBLIC	??1SQObjectPtr@@QAE@XZ				; SQObjectPtr::~SQObjectPtr
PUBLIC	?sq__call@@YAHPAUSQVM@@@Z			; sq__call
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	?Call@CScripts@@QAEXPBDHPAUSQObjectPtr@@@Z:PROC	; CScripts::Call
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	_sq_gettop:PROC
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?sq__call@@YAHPAUSQVM@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?sq__call@@YAHPAUSQVM@@@Z$0
__ehfuncinfo$?sq__call@@YAHPAUSQVM@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?sq__call@@YAHPAUSQVM@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?sq__call@@YAHPAUSQVM@@@Z
_TEXT	SEGMENT
tv95 = -304						; size = 4
$T209333 = -296						; size = 4
$T209334 = -284						; size = 4
$T209335 = -272						; size = 4
_i$209284 = -68						; size = 4
_pArguments$ = -56					; size = 4
_iArgCount$ = -44					; size = 4
_szFunc$ = -32						; size = 4
_iTop$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_pVM$ = 8						; size = 4
?sq__call@@YAHPAUSQVM@@@Z PROC				; sq__call, COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?sq__call@@YAHPAUSQVM@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 61   : 	int iTop = sq_gettop(pVM) - 1;

	mov	eax, DWORD PTR _pVM$[ebp]
	push	eax
	call	_sq_gettop
	add	esp, 4
	sub	eax, 1
	mov	DWORD PTR _iTop$[ebp], eax

; 62   : 
; 63   : 	const char * szFunc;
; 64   : 
; 65   : 	sq_getstring(pVM, -iTop, &szFunc);

	lea	eax, DWORD PTR _szFunc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iTop$[ebp]
	neg	ecx
	push	ecx
	mov	edx, DWORD PTR _pVM$[ebp]
	push	edx
	call	_sq_getstring
	add	esp, 12					; 0000000cH

; 66   : 
; 67   : 	int iArgCount = iTop - 1;

	mov	eax, DWORD PTR _iTop$[ebp]
	sub	eax, 1
	mov	DWORD PTR _iArgCount$[ebp], eax

; 68   : 	SQObjectPtr * pArguments = NULL;

	mov	DWORD PTR _pArguments$[ebp], 0

; 69   : 	if(iArgCount > 0)

	cmp	DWORD PTR _iArgCount$[ebp], 0
	jle	$LN4@sq__call

; 70   : 	{
; 71   : 		pArguments = new SQObjectPtr[iArgCount];

	mov	eax, DWORD PTR _iArgCount$[ebp]
	mov	DWORD PTR $T209333[ebp], eax
	xor	ecx, ecx
	mov	eax, DWORD PTR $T209333[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T209335[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209335[ebp], 0
	je	SHORT $LN7@sq__call
	mov	ecx, DWORD PTR $T209335[ebp]
	mov	edx, DWORD PTR $T209333[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1SQObjectPtr@@QAE@XZ		; SQObjectPtr::~SQObjectPtr
	push	OFFSET ??0SQObjectPtr@@QAE@XZ		; SQObjectPtr::SQObjectPtr
	mov	eax, DWORD PTR $T209333[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR $T209335[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T209335[ebp]
	add	edx, 4
	mov	DWORD PTR tv95[ebp], edx
	jmp	SHORT $LN8@sq__call
$LN7@sq__call:
	mov	DWORD PTR tv95[ebp], 0
$LN8@sq__call:
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR $T209334[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T209334[ebp]
	mov	DWORD PTR _pArguments$[ebp], ecx

; 72   : 		for (int i = 1; i < iTop; i++)

	mov	DWORD PTR _i$209284[ebp], 1
	jmp	SHORT $LN3@sq__call
$LN2@sq__call:
	mov	eax, DWORD PTR _i$209284[ebp]
	add	eax, 1
	mov	DWORD PTR _i$209284[ebp], eax
$LN3@sq__call:
	mov	eax, DWORD PTR _i$209284[ebp]
	cmp	eax, DWORD PTR _iTop$[ebp]
	jge	SHORT $LN4@sq__call

; 73   : 			pArguments[i - 1] = stack_get(pVM, -iTop + i);

	mov	eax, DWORD PTR _iTop$[ebp]
	neg	eax
	add	eax, DWORD PTR _i$209284[ebp]
	push	eax
	mov	ecx, DWORD PTR _pVM$[ebp]
	push	ecx
	call	?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z ; stack_get
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _i$209284[ebp]
	mov	eax, DWORD PTR _pArguments$[ebp]
	lea	ecx, DWORD PTR [eax+edx*8-8]
	call	??4SQObjectPtr@@QAEAAU0@ABU0@@Z		; SQObjectPtr::operator=
	jmp	SHORT $LN2@sq__call
$LN4@sq__call:

; 74   : 	}
; 75   : 	
; 76   : 	pScripts->Call(szFunc, iArgCount, pArguments);

	mov	eax, DWORD PTR _pArguments$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iArgCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _szFunc$[ebp]
	push	edx
	mov	ecx, DWORD PTR ?pScripts@@3PAVCScripts@@A ; pScripts
	call	?Call@CScripts@@QAEXPBDHPAUSQObjectPtr@@@Z ; CScripts::Call

; 77   : 	return 1;

	mov	eax, 1

; 78   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@sq__call
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@sq__call:
	DD	1
	DD	$LN12@sq__call
$LN12@sq__call:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@sq__call
$LN10@sq__call:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	70					; 00000046H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?sq__call@@YAHPAUSQVM@@@Z$0:
	mov	eax, DWORD PTR $T209335[ebp]
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	pop	ecx
	ret	0
__ehhandler$?sq__call@@YAHPAUSQVM@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?sq__call@@YAHPAUSQVM@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?sq__call@@YAHPAUSQVM@@@Z ENDP				; sq__call
PUBLIC	??_ESQObjectPtr@@QAEPAXI@Z			; SQObjectPtr::`vector deleting destructor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_ESQObjectPtr@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_ESQObjectPtr@@QAEPAXI@Z PROC				; SQObjectPtr::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1SQObjectPtr@@QAE@XZ		; SQObjectPtr::~SQObjectPtr
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax-4]
	push	ecx
	push	8
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@vector
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	push	eax
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SQObjectPtr@@QAE@XZ			; SQObjectPtr::~SQObjectPtr
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ESQObjectPtr@@QAEPAXI@Z ENDP				; SQObjectPtr::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\squirrel\sqobject.h
_TEXT	ENDS
;	COMDAT ??0SQObjectPtr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SQObjectPtr@@QAE@XZ PROC				; SQObjectPtr::SQObjectPtr, COMDAT
; _this$ = ecx

; 174  : 	SQObjectPtr()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 175  : 	{
; 176  : 		SQ_OBJECT_RAWINIT()
; 177  : 		_type=OT_NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 16777217		; 01000001H

; 178  : 		_unVal.pUserPointer=NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 179  : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0SQObjectPtr@@QAE@XZ ENDP				; SQObjectPtr::SQObjectPtr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??1SQObjectPtr@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SQObjectPtr@@QAE@XZ PROC				; SQObjectPtr::~SQObjectPtr, COMDAT
; _this$ = ecx

; 227  : 	{

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 228  : 		__Release(_type,_unVal);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 134217728				; 08000000H
	je	SHORT $LN2@SQObjectPt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@SQObjectPt
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	edx, DWORD PTR [ecx]
	mov	esi, esp
	mov	ecx, eax
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@SQObjectPt:

; 229  : 	}

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SQObjectPtr@@QAE@XZ ENDP				; SQObjectPtr::~SQObjectPtr
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??4SQObjectPtr@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_unOldVal$ = -32					; size = 4
_tOldType$ = -20					; size = 4
_this$ = -8						; size = 4
_obj$ = 8						; size = 4
??4SQObjectPtr@@QAEAAU0@ABU0@@Z PROC			; SQObjectPtr::operator=, COMDAT
; _this$ = ecx

; 232  : 	{ 

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 233  : 		SQObjectType tOldType;
; 234  : 		SQObjectValue unOldVal;
; 235  : 		tOldType=_type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tOldType$[ebp], ecx

; 236  : 		unOldVal=_unVal;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _unOldVal$[ebp], ecx

; 237  : 		_unVal = obj._unVal;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 238  : 		_type = obj._type;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 239  : 		__AddRef(_type,_unVal);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 134217728				; 08000000H
	je	SHORT $LN2@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
$LN2@operator:

; 240  : 		__Release(tOldType,unOldVal);

	mov	eax, DWORD PTR _tOldType$[ebp]
	and	eax, 134217728				; 08000000H
	je	SHORT $LN1@operator
	mov	eax, DWORD PTR _unOldVal$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _unOldVal$[ebp]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR _unOldVal$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN1@operator
	mov	eax, DWORD PTR _unOldVal$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	esi, esp
	mov	ecx, DWORD PTR _unOldVal$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:

; 241  : 		return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 242  : 	}

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	2
$LN7@operator:
	DD	1
	DD	$LN6@operator
$LN6@operator:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN5@operator
$LN5@operator:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	79					; 0000004fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	0
??4SQObjectPtr@@QAEAAU0@ABU0@@Z ENDP			; SQObjectPtr::operator=
_TEXT	ENDS
EXTRN	?GetUp@SQVM@@QAEAAUSQObjectPtr@@H@Z:PROC	; SQVM::GetUp
EXTRN	?GetAt@SQVM@@QAEAAUSQObjectPtr@@H@Z:PROC	; SQVM::GetAt
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\vendor\squirrel\sqvm.h
;	COMDAT ?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z
_TEXT	SEGMENT
tv74 = -208						; size = 4
$T209366 = -200						; size = 4
_v$ = 8							; size = 4
_idx$ = 12						; size = 4
?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z PROC		; stack_get, COMDAT

; 183  : inline SQObjectPtr &stack_get(HSQUIRRELVM v,SQInteger idx){return ((idx>=0)?(v->GetAt(idx+v->_stackbase-1)):(v->GetUp(idx)));}

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	cmp	DWORD PTR _idx$[ebp], 0
	jl	SHORT $LN3@stack_get
	mov	eax, DWORD PTR _v$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _idx$[ebp]
	lea	eax, DWORD PTR [edx+ecx-1]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?GetAt@SQVM@@QAEAAUSQObjectPtr@@H@Z	; SQVM::GetAt
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@stack_get
$LN3@stack_get:
	mov	ecx, DWORD PTR _idx$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	?GetUp@SQVM@@QAEAAUSQObjectPtr@@H@Z	; SQVM::GetUp
	mov	DWORD PTR tv74[ebp], eax
$LN4@stack_get:
	mov	edx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T209366[ebp], edx
	mov	eax, DWORD PTR $T209366[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?stack_get@@YAAAUSQObjectPtr@@PAUSQVM@@H@Z ENDP		; stack_get
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\scripting\cscript.h
_TEXT	ENDS
;	COMDAT ?GetVM@CScript@@QAEPAUSQVM@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVM@CScript@@QAEPAUSQVM@@XZ PROC			; CScript::GetVM, COMDAT
; _this$ = ecx

; 28   : 	SQVM * GetVM() { return m_pVM; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVM@CScript@@QAEPAUSQVM@@XZ ENDP			; CScript::GetVM
_TEXT	ENDS
EXTRN	_strncpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetScriptAuthor@CScript@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szAuthor$ = 8						; size = 4
?SetScriptAuthor@CScript@@QAEXPBD@Z PROC		; CScript::SetScriptAuthor, COMDAT
; _this$ = ecx

; 33   : 	void SetScriptAuthor(const char * szAuthor) { strncpy(m_szScriptAuthor, szAuthor, sizeof(m_szScriptAuthor)); }; 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	256					; 00000100H
	mov	eax, DWORD PTR _szAuthor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 260				; 00000104H
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScriptAuthor@CScript@@QAEXPBD@Z ENDP		; CScript::SetScriptAuthor
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetScriptVersion@CScript@@QAEXPBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szVersion$ = 8						; size = 4
?SetScriptVersion@CScript@@QAEXPBD@Z PROC		; CScript::SetScriptVersion, COMDAT
; _this$ = ecx

; 34   : 	void SetScriptVersion(const char * szVersion) { strncpy(m_szScriptVersion, szVersion, sizeof(m_szScriptVersion)); }; 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	256					; 00000100H
	mov	eax, DWORD PTR _szVersion$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 516				; 00000204H
	push	ecx
	call	_strncpy
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetScriptVersion@CScript@@QAEXPBD@Z ENDP		; CScript::SetScriptVersion
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\scripting\cscripts.h
_TEXT	ENDS
;	COMDAT ?GetScript@CScripts@@QAEPAVCScript@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_scriptID$ = 8						; size = 4
?GetScript@CScripts@@QAEPAVCScript@@H@Z PROC		; CScripts::GetScript, COMDAT
; _this$ = ecx

; 36   : 	CScript * GetScript(int scriptID) { 

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 37   : 		if(!m_pScripts[scriptID]) return NULL;

	mov	eax, DWORD PTR _scriptID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN1@GetScript
	xor	eax, eax
	jmp	SHORT $LN2@GetScript
$LN1@GetScript:

; 38   : 		return m_pScripts[scriptID]; 

	mov	eax, DWORD PTR _scriptID$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
$LN2@GetScript:

; 39   : 	};

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?GetScript@CScripts@@QAEPAVCScript@@H@Z ENDP		; CScripts::GetScript
_TEXT	ENDS
END
