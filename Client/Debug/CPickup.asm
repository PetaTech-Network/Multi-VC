; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\CPickup.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_create_pickup DW 0213H
	DB	'iifffv', 00H
	ORG $+6
	ORG $+1
_destroy_pickup DW 0215H
	DB	'i', 00H
	ORG $+11
	ORG $+1
CONST	ENDS
PUBLIC	??0CPickup@@QAE@HHPAUVector3@@@Z		; CPickup::CPickup
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	__fltused:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\game\cpickup.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CPickup@@QAE@HHPAUVector3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iModel$ = 8						; size = 4
_iType$ = 12						; size = 4
_vecPos$ = 16						; size = 4
??0CPickup@@QAE@HHPAUVector3@@@Z PROC			; CPickup::CPickup, COMDAT
; _this$ = ecx

; 14   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 15   : 	// Reset the pickup index
; 16   : 	m_dwGTAId = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 17   : 
; 18   : 	// Create the pickup
; 19   : 	ScriptCommand(&create_pickup, iModel, iType, vecPos->X, vecPos->Y, vecPos->Z, &m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vecPos$[ebp]
	fld	DWORD PTR [ecx+8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _vecPos$[ebp]
	fld	DWORD PTR [edx+4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _vecPos$[ebp]
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _iType$[ebp]
	push	ecx
	mov	edx, DWORD PTR _iModel$[ebp]
	push	edx
	push	OFFSET _create_pickup
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 40					; 00000028H

; 20   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0CPickup@@QAE@HHPAUVector3@@@Z ENDP			; CPickup::CPickup
_TEXT	ENDS
PUBLIC	??1CPickup@@QAE@XZ				; CPickup::~CPickup
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CPickup@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CPickup@@QAE@XZ PROC					; CPickup::~CPickup, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	// Do we have a valid pickup index?
; 25   : 	if(m_dwGTAId != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CPickup

; 26   : 	{
; 27   : 		// Destroy the pickup
; 28   : 		ScriptCommand(&destroy_pickup, m_dwGTAId);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET _destroy_pickup
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8
$LN2@CPickup:

; 29   : 	}
; 30   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPickup@@QAE@XZ ENDP					; CPickup::~CPickup
_TEXT	ENDS
END
