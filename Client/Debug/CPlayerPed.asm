; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\CPlayerPed.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?szSpecialActorModels@@3PAY0CA@DA		; szSpecialActorModels
CONST	SEGMENT
_create_player DW 053H
	DB	'vfffv', 00H
	ORG $+7
	ORG $+1
_get_player_z_angle DW 0170H
	DB	'iv', 00H
	ORG $+10
	ORG $+1
_restart_if_wasted_at DW 016cH
	DB	'ffff', 00H
	ORG $+8
	ORG $+1
_toggle_player_infinite_run DW 0330H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_toggle_player_controllable DW 01b4H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_put_player_in_car DW 0369H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_put_player_at_and_remove_from_car DW 012aH
	DB	'ifff', 00H
	ORG $+8
	ORG $+1
_set_actor_immunities DW 02abH
	DB	'iiiiii', 00H
	ORG $+6
	ORG $+1
_flash_item DW	03e7H
	DB	'i', 00H
	ORG $+11
	ORG $+1
_water_deaths DW 04d8H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_cell_phone DW	052bH
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_set_actor_bleeding DW 0332H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_set_ped_sky_color DW 04f9H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_set_driveby_state DW 0501H
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_shake_ped_camera DW 03H
	DB	'i', 00H
	ORG $+11
	ORG $+1
CONST	ENDS
_DATA	SEGMENT
?szSpecialActorModels@@3PAY0CA@DA DB 'igdiaz', 00H	; szSpecialActorModels
	ORG $+25
	DB	'igpercy', 00H
	ORG $+24
	DB	'igken', 00H
	ORG $+26
	DB	'igcandy', 00H
	ORG $+24
	DB	'ighlary', 00H
	ORG $+24
	DB	'igjezz', 00H
	ORG $+25
	DB	'igphil', 00H
	ORG $+25
	DB	'sam', 00H
	ORG $+28
	DB	'igsonny', 00H
	ORG $+24
	DB	'igbuddy', 00H
	ORG $+24
	DB	'igmerc', 00H
	ORG $+25
	DB	'igdick', 00H
	ORG $+25
	DB	'igalscb', 00H
	ORG $+24
	DB	'igbudy2', 00H
	ORG $+24
	DB	'igbudy3', 00H
	ORG $+24
	DB	'igcolon', 00H
	ORG $+24
	DB	'igdick', 00H
	ORG $+25
	DB	'iggonz', 00H
	ORG $+25
	DB	'ighlry2', 00H
	ORG $+24
	DB	'igmerc2', 00H
	ORG $+24
	DB	'igmike', 00H
	ORG $+25
	DB	'igmike2', 00H
	ORG $+24
	DB	'igphil2', 00H
	ORG $+24
	DB	'igphil3', 00H
	ORG $+24
	DB	'bounca', 00H
	ORG $+25
	DB	'burger', 00H
	ORG $+25
	DB	'cdrivra', 00H
	ORG $+24
	DB	'cdrivrb', 00H
	ORG $+24
	DB	'cgona', 00H
	ORG $+26
	DB	'cgonb', 00H
	ORG $+26
	DB	'cgonc', 00H
	ORG $+26
	DB	'chef', 00H
	ORG $+27
	DB	'cmraman', 00H
	ORG $+24
	DB	'courier', 00H
	ORG $+24
	DB	'crewa', 00H
	ORG $+26
	DB	'crewb', 00H
	ORG $+26
	DB	'cservra', 00H
	ORG $+24
	DB	'dgoona', 00H
	ORG $+25
	DB	'dgoonb', 00H
	ORG $+25
	DB	'mba', 00H
	ORG $+28
	DB	'mbb', 00H
	ORG $+28
	DB	'mgoona', 00H
	ORG $+25
	DB	'mporna', 00H
	ORG $+25
	DB	'printra', 00H
	ORG $+24
	DB	'printrb', 00H
	ORG $+24
	DB	'printrc', 00H
	ORG $+24
	DB	'psycho', 00H
	ORG $+25
	DB	'sgc', 00H
	ORG $+28
	DB	'spandxa', 00H
	ORG $+24
	DB	'spandxb', 00H
	ORG $+24
	DB	'stripa', 00H
	ORG $+25
	DB	'stripb', 00H
	ORG $+25
	DB	'stripc', 00H
	ORG $+25
	DB	'S_keep', 00H
	ORG $+25
_DATA	ENDS
PUBLIC	??0CPlayerPed@@QAE@XZ				; CPlayerPed::CPlayerPed
EXTRN	?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z:PROC ; CEntity::SetEntity
EXTRN	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ:PROC ; GamePool_FindPlayerPed
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\vice-players-master\client\game\cplayerped.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CPlayerPed@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CPlayerPed@@QAE@XZ PROC				; CPlayerPed::CPlayerPed, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 39   : 	m_dwGTAId = 1; // 0x001

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 1

; 40   : 	SetEntity((ENTITY_TYPE *)GamePool_FindPlayerPed());

	call	?GamePool_FindPlayerPed@@YGPAU_PED_TYPE@@XZ ; GamePool_FindPlayerPed
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z ; CEntity::SetEntity

; 41   : 	m_bytePlayerNumber = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0

; 42   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPlayerPed@@QAE@XZ ENDP				; CPlayerPed::CPlayerPed
_TEXT	ENDS
PUBLIC	?Create@CPlayerPed@@QAEXHMMMM@Z			; CPlayerPed::Create
PUBLIC	??0CPlayerPed@@QAE@HHMMMM@Z			; CPlayerPed::CPlayerPed
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0CPlayerPed@@QAE@HHMMMM@Z
_TEXT	SEGMENT
_dwSystemAddress$ = -20					; size = 4
_this$ = -8						; size = 4
_iPlayerNumber$ = 8					; size = 4
_iModel$ = 12						; size = 4
_fX$ = 16						; size = 4
_fY$ = 20						; size = 4
_fZ$ = 24						; size = 4
_fRotation$ = 28					; size = 4
??0CPlayerPed@@QAE@HHMMMM@Z PROC			; CPlayerPed::CPlayerPed, COMDAT
; _this$ = ecx

; 49   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   : 	DWORD dwSystemAddress=0;

	mov	DWORD PTR _dwSystemAddress$[ebp], 0

; 51   : 
; 52   : 	SetEntity(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z ; CEntity::SetEntity

; 53   : 	m_dwGTAId=0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 54   : 	m_bytePlayerNumber = (BYTE)iPlayerNumber;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _iPlayerNumber$[ebp]
	mov	BYTE PTR [eax+8], cl

; 55   : 
; 56   : 	Create(iModel, fX, fY, fZ, fRotation);

	push	ecx
	fld	DWORD PTR _fRotation$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fZ$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fY$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fX$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CPlayerPed@@QAEXHMMMM@Z		; CPlayerPed::Create

; 57   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
??0CPlayerPed@@QAE@HHMMMM@Z ENDP			; CPlayerPed::CPlayerPed
_TEXT	ENDS
PUBLIC	??1CPlayerPed@@QAE@XZ				; CPlayerPed::~CPlayerPed
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1CPlayerPed@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CPlayerPed@@QAE@XZ PROC				; CPlayerPed::~CPlayerPed, COMDAT
; _this$ = ecx

; 62   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 63   : 
; 64   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPlayerPed@@QAE@XZ ENDP				; CPlayerPed::~CPlayerPed
_TEXT	ENDS
PUBLIC	?GetPed@CPlayerPed@@QAEPAU_PED_TYPE@@XZ		; CPlayerPed::GetPed
EXTRN	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ:PROC	; CEntity::GetEntity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetPed@CPlayerPed@@QAEPAU_PED_TYPE@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPed@CPlayerPed@@QAEPAU_PED_TYPE@@XZ PROC		; CPlayerPed::GetPed, COMDAT
; _this$ = ecx

; 69   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 70   : 	return (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity

; 71   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPed@CPlayerPed@@QAEPAU_PED_TYPE@@XZ ENDP		; CPlayerPed::GetPed
_TEXT	ENDS
PUBLIC	?SetModel@CPlayerPed@@QAEXH@Z			; CPlayerPed::SetModel
PUBLIC	?SetRotation@CPlayerPed@@QAEXM@Z		; CPlayerPed::SetRotation
EXTRN	?SetPlayerPedPtrRecord@@YGXEK@Z:PROC		; SetPlayerPedPtrRecord
EXTRN	?GetIndexFromPed@CPools@@SGHPAU_PED_TYPE@@@Z:PROC ; CPools::GetIndexFromPed
EXTRN	?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z:PROC ; CPools::GetPlayerPedFromIndex
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
EXTRN	__imp__Sleep@4:PROC
EXTRN	?LoadRequestedModels@CGame@@QAEXXZ:PROC		; CGame::LoadRequestedModels
EXTRN	?RequestModel@CGame@@QAEXH@Z:PROC		; CGame::RequestModel
EXTRN	?IsModelLoaded@CGame@@QAEHH@Z:PROC		; CGame::IsModelLoaded
EXTRN	?pGame@@3PAVCGame@@A:DWORD			; pGame
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Create@CPlayerPed@@QAEXHMMMM@Z
_TEXT	SEGMENT
_iPlayerNumber$ = -32					; size = 4
_dwPlayerHandle$ = -20					; size = 4
_this$ = -8						; size = 4
_iModel$ = 8						; size = 4
_fX$ = 12						; size = 4
_fY$ = 16						; size = 4
_fZ$ = 20						; size = 4
_fRotation$ = 24					; size = 4
?Create@CPlayerPed@@QAEXHMMMM@Z PROC			; CPlayerPed::Create, COMDAT
; _this$ = ecx

; 76   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 77   : 	// Is the model not loaded?
; 78   : 	if((iModel < 107) && !pGame->IsModelLoaded(iModel))

	cmp	DWORD PTR _iModel$[ebp], 107		; 0000006bH
	jge	SHORT $LN1@Create
	mov	eax, DWORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN1@Create

; 79   : 	{
; 80   : 		// Request the model
; 81   : 		pGame->RequestModel(iModel);

	mov	eax, DWORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 82   : 
; 83   : 		// Load all requested models
; 84   : 		pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels
$LN2@Create:

; 85   : 
; 86   : 		// Wait for the model to load
; 87   : 		while(!pGame->IsModelLoaded(iModel))

	mov	eax, DWORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN1@Create

; 88   : 		{
; 89   : 			Sleep(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 90   : 		}

	jmp	SHORT $LN2@Create
$LN1@Create:

; 91   : 	}
; 92   : 
; 93   : 	DWORD dwPlayerHandle;
; 94   : 	int iPlayerNumber = m_bytePlayerNumber;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR _iPlayerNumber$[ebp], ecx

; 95   : 	ScriptCommand(&create_player, &iPlayerNumber, fX, fY, fZ, &dwPlayerHandle);

	lea	eax, DWORD PTR _dwPlayerHandle$[ebp]
	push	eax
	fld	DWORD PTR _fZ$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _fY$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _fX$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	lea	ecx, DWORD PTR _iPlayerNumber$[ebp]
	push	ecx
	push	OFFSET _create_player
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 96   : 	SetEntity((ENTITY_TYPE *)CPools::GetPlayerPedFromIndex(iPlayerNumber));

	mov	eax, DWORD PTR _iPlayerNumber$[ebp]
	push	eax
	call	?GetPlayerPedFromIndex@CPools@@SGPAU_PED_TYPE@@H@Z ; CPools::GetPlayerPedFromIndex
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z ; CEntity::SetEntity

; 97   : 	m_dwGTAId = CPools::GetIndexFromPed(GetPed());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPed@CPlayerPed@@QAEPAU_PED_TYPE@@XZ	; CPlayerPed::GetPed
	push	eax
	call	?GetIndexFromPed@CPools@@SGHPAU_PED_TYPE@@@Z ; CPools::GetIndexFromPed
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 98   : 	ScriptCommand(&toggle_player_infinite_run, iPlayerNumber, 1);

	push	1
	mov	eax, DWORD PTR _iPlayerNumber$[ebp]
	push	eax
	push	OFFSET _toggle_player_infinite_run
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 99   : 	SetRotation(fRotation);

	push	ecx
	fld	DWORD PTR _fRotation$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetRotation@CPlayerPed@@QAEXM@Z	; CPlayerPed::SetRotation

; 100  : 	SetPlayerPedPtrRecord(m_bytePlayerNumber, (DWORD)GetEntity());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	call	?SetPlayerPedPtrRecord@@YGXEK@Z		; SetPlayerPedPtrRecord

; 101  : 	ScriptCommand(&set_actor_immunities, m_dwGTAId, 1, 1, 1, 1, 1);

	push	1
	push	1
	push	1
	push	1
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	OFFSET _set_actor_immunities
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 28					; 0000001cH

; 102  : 	SetModel(iModel);

	mov	eax, DWORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModel@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetModel

; 103  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN9@Create:
	DD	2
	DD	$LN8@Create
$LN8@Create:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN6@Create
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN7@Create
$LN7@Create:
	DB	105					; 00000069H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN6@Create:
	DB	100					; 00000064H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	72					; 00000048H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	0
?Create@CPlayerPed@@QAEXHMMMM@Z ENDP			; CPlayerPed::Create
_TEXT	ENDS
PUBLIC	?Destroy@CPlayerPed@@QAEXXZ			; CPlayerPed::Destroy
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Destroy@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?Destroy@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::Destroy, COMDAT
; _this$ = ecx

; 108  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 109  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 110  : 
; 111  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@Destroy

; 112  : 	{
; 113  : 		// Call class destructor
; 114  : 		_asm
; 115  : 		{
; 116  : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 117  : 			mov ebx, [ecx]

	mov	ebx, DWORD PTR [ecx]

; 118  : 			push 1

	push	1

; 119  : 			call [ebx+8]

	call	DWORD PTR [ebx+8]

; 120  : 		}
; 121  : 		SetEntity(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetEntity@CEntity@@QAEXPAU_ENTITY_TYPE@@@Z ; CEntity::SetEntity
$LN2@Destroy:

; 122  : 	}
; 123  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Destroy@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::Destroy
_TEXT	ENDS
PUBLIC	?SetKeys@CPlayerPed@@QAEXG@Z			; CPlayerPed::SetKeys
EXTRN	?GameStoreRemotePlayerKeys@@YAXHPAU_GTA_CONTROLSET@@@Z:PROC ; GameStoreRemotePlayerKeys
EXTRN	_memcpy:PROC
EXTRN	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z:PROC ; GameGetPlayerKeys
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetKeys@CPlayerPed@@QAEXG@Z
_TEXT	SEGMENT
_pPlayerKeys$ = -20					; size = 4
_this$ = -8						; size = 4
_wKeys$ = 8						; size = 2
?SetKeys@CPlayerPed@@QAEXG@Z PROC			; CPlayerPed::SetKeys, COMDAT
; _this$ = ecx

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 129  : 	GTA_CONTROLSET * pPlayerKeys = GameGetPlayerKeys(m_bytePlayerNumber);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	call	?GameGetPlayerKeys@@YAPAU_GTA_CONTROLSET@@H@Z ; GameGetPlayerKeys
	add	esp, 4
	mov	DWORD PTR _pPlayerKeys$[ebp], eax

; 130  : 
; 131  : 	memcpy(pPlayerKeys->wKeys2, pPlayerKeys->wKeys1, (sizeof(WORD) * 19));

	push	38					; 00000026H
	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 132  : 
; 133  : 	pPlayerKeys->wKeys1[KEY_INCAR_HANDBRAKE] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+12], ax

; 134  : 	wKeys >>= 1; // 1

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 135  : 
; 136  : 	pPlayerKeys->wKeys1[KEY_INCAR_LOOKR] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+14], ax

; 137  : 	wKeys >>= 1; // 2

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 138  : 
; 139  : 	pPlayerKeys->wKeys1[KEY_INCAR_LOOKL] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+10], ax

; 140  : 	wKeys >>= 1; // 3

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 141  : 
; 142  : 	pPlayerKeys->wKeys1[KEY_INCAR_TURRETUD] = (wKeys & 1) ? 0xFF80 : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 65408				; 0000ff80H
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+6], ax

; 143  : 	wKeys >>= 1; // 4

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 144  : 
; 145  : 	pPlayerKeys->wKeys1[KEY_INCAR_TURRETUD] = (wKeys & 1) ? 0x80 : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+6], ax

; 146  : 	wKeys >>= 1; // 5

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 147  : 
; 148  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_CROUCH] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+36], ax

; 149  : 	wKeys >>= 1; // 6

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 150  : 
; 151  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_FIRE] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+34], ax

; 152  : 	wKeys >>= 1; // 7

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 153  : 
; 154  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_SPRINT] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+32], ax

; 155  : 	wKeys >>= 1; // 8

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 156  : 
; 157  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_JUMP] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+28], ax

; 158  : 	wKeys >>= 1; // 9

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 159  : 
; 160  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_RIGHT] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+22], ax

; 161  : 	wKeys >>= 1; // 10

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 162  : 
; 163  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_LEFT] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+20], ax

; 164  : 	wKeys >>= 1; // 11

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 165  : 
; 166  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_BACKWARD] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+18], ax

; 167  : 	wKeys >>= 1; // 12

	mov	ax, WORD PTR _wKeys$[ebp]
	shr	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 168  : 
; 169  : 	pPlayerKeys->wKeys1[KEY_ONFOOT_FORWARD] = (wKeys & 1) ? 0xFF : 0x00;

	movzx	eax, WORD PTR _wKeys$[ebp]
	and	eax, 1
	neg	eax
	sbb	eax, eax
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _pPlayerKeys$[ebp]
	mov	WORD PTR [ecx+16], ax

; 170  : 
; 171  : 	GameStoreRemotePlayerKeys(m_bytePlayerNumber,pPlayerKeys);

	mov	eax, DWORD PTR _pPlayerKeys$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	call	?GameStoreRemotePlayerKeys@@YAXHPAU_GTA_CONTROLSET@@@Z ; GameStoreRemotePlayerKeys
	add	esp, 8

; 172  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetKeys@CPlayerPed@@QAEXG@Z ENDP			; CPlayerPed::SetKeys
_TEXT	ENDS
PUBLIC	?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ	; CPlayerPed::HasAmmoForCurrentWeapon
PUBLIC	?GetKeys@CPlayerPed@@QAEGXZ			; CPlayerPed::GetKeys
EXTRN	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ:PROC ; GameGetInternalKeys
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetKeys@CPlayerPed@@QAEGXZ
_TEXT	SEGMENT
_pInternalKeys$ = -32					; size = 4
_wKeys$ = -20						; size = 2
_this$ = -8						; size = 4
?GetKeys@CPlayerPed@@QAEGXZ PROC			; CPlayerPed::GetKeys, COMDAT
; _this$ = ecx

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 178  : 	WORD wKeys = 0;

	xor	eax, eax
	mov	WORD PTR _wKeys$[ebp], ax

; 179  : 
; 180  : 	GTA_CONTROLSET * pInternalKeys = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _pInternalKeys$[ebp], eax

; 181  : 
; 182  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_FORWARD]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN13@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN13@GetKeys:

; 183  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 184  : 
; 185  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_BACKWARD]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+18]
	test	ecx, ecx
	je	SHORT $LN12@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN12@GetKeys:

; 186  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 187  : 
; 188  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_LEFT]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+20]
	test	ecx, ecx
	je	SHORT $LN11@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN11@GetKeys:

; 189  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 190  : 
; 191  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_RIGHT]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+22]
	test	ecx, ecx
	je	SHORT $LN10@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN10@GetKeys:

; 192  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 193  : 
; 194  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_JUMP]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+28]
	test	ecx, ecx
	je	SHORT $LN9@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN9@GetKeys:

; 195  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 196  : 
; 197  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_SPRINT]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+32]
	test	ecx, ecx
	je	SHORT $LN8@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN8@GetKeys:

; 198  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 199  : 
; 200  : 	// As ammo is not synced, don't send the fire key if they have no ammo
; 201  : 	// or they will fire their weapon for remote players but not themselves
; 202  : 	if(HasAmmoForCurrentWeapon() && pInternalKeys->wKeys1[KEY_ONFOOT_FIRE]) wKeys |= 1;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ ; CPlayerPed::HasAmmoForCurrentWeapon
	test	eax, eax
	je	SHORT $LN7@GetKeys
	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+34]
	test	ecx, ecx
	je	SHORT $LN7@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN7@GetKeys:

; 203  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 204  : 
; 205  : 	if(pInternalKeys->wKeys1[KEY_ONFOOT_CROUCH]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN6@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN6@GetKeys:

; 206  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 207  : 
; 208  : 	if(pInternalKeys->wKeys1[KEY_INCAR_TURRETUD] == 0x80) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN5@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN5@GetKeys:

; 209  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 210  : 
; 211  : 	if(pInternalKeys->wKeys1[KEY_INCAR_TURRETUD] == 0xFF80) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	cmp	ecx, 65408				; 0000ff80H
	jne	SHORT $LN4@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN4@GetKeys:

; 212  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 213  : 
; 214  : 	if(pInternalKeys->wKeys1[KEY_INCAR_LOOKL]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+10]
	test	ecx, ecx
	je	SHORT $LN3@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN3@GetKeys:

; 215  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 216  : 
; 217  : 	if(pInternalKeys->wKeys1[KEY_INCAR_LOOKR]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+14]
	test	ecx, ecx
	je	SHORT $LN2@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN2@GetKeys:

; 218  : 	wKeys <<= 1;

	mov	ax, WORD PTR _wKeys$[ebp]
	shl	ax, 1
	mov	WORD PTR _wKeys$[ebp], ax

; 219  : 
; 220  : 	if(pInternalKeys->wKeys1[KEY_INCAR_HANDBRAKE]) wKeys |= 1;

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	test	ecx, ecx
	je	SHORT $LN1@GetKeys
	movzx	eax, WORD PTR _wKeys$[ebp]
	or	eax, 1
	mov	WORD PTR _wKeys$[ebp], ax
$LN1@GetKeys:

; 221  : 
; 222  : 	return wKeys;

	mov	ax, WORD PTR _wKeys$[ebp]

; 223  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKeys@CPlayerPed@@QAEGXZ ENDP			; CPlayerPed::GetKeys
_TEXT	ENDS
PUBLIC	?IsFiring@CPlayerPed@@QAE_NXZ			; CPlayerPed::IsFiring
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsFiring@CPlayerPed@@QAE_NXZ
_TEXT	SEGMENT
_pInternalKeys$ = -20					; size = 4
_this$ = -8						; size = 4
?IsFiring@CPlayerPed@@QAE_NXZ PROC			; CPlayerPed::IsFiring, COMDAT
; _this$ = ecx

; 228  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 229  : 	GTA_CONTROLSET * pInternalKeys = GameGetInternalKeys();

	call	?GameGetInternalKeys@@YAPAU_GTA_CONTROLSET@@XZ ; GameGetInternalKeys
	mov	DWORD PTR _pInternalKeys$[ebp], eax

; 230  : 
; 231  : 	return (pInternalKeys->wKeys1[KEY_ONFOOT_FIRE] != 0);

	mov	eax, DWORD PTR _pInternalKeys$[ebp]
	movzx	eax, WORD PTR [eax+34]
	neg	eax
	sbb	eax, eax
	neg	eax

; 232  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsFiring@CPlayerPed@@QAE_NXZ ENDP			; CPlayerPed::IsFiring
_TEXT	ENDS
PUBLIC	?GetCamera@CGame@@QAEPAVCCamera@@XZ		; CGame::GetCamera
PUBLIC	?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ ; CPlayerPed::GetCurrentAim
EXTRN	?GetAim@CCamera@@QAEPAU_CAMERA_AIM@@XZ:PROC	; CCamera::GetAim
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ
_TEXT	SEGMENT
_pCamera$ = -20						; size = 4
_this$ = -8						; size = 4
?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ PROC	; CPlayerPed::GetCurrentAim, COMDAT
; _this$ = ecx

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 238  : 	CCamera * pCamera = pGame->GetCamera();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?GetCamera@CGame@@QAEPAVCCamera@@XZ	; CGame::GetCamera
	mov	DWORD PTR _pCamera$[ebp], eax

; 239  : 	
; 240  : 	if(pCamera)

	cmp	DWORD PTR _pCamera$[ebp], 0
	je	SHORT $LN1@GetCurrent

; 241  : 	{
; 242  : 		return pCamera->GetAim();

	mov	ecx, DWORD PTR _pCamera$[ebp]
	call	?GetAim@CCamera@@QAEPAU_CAMERA_AIM@@XZ	; CCamera::GetAim
	jmp	SHORT $LN2@GetCurrent
$LN1@GetCurrent:

; 243  : 	}
; 244  : 
; 245  : 	return NULL;

	xor	eax, eax
$LN2@GetCurrent:

; 246  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentAim@CPlayerPed@@QAEPAU_CAMERA_AIM@@XZ ENDP	; CPlayerPed::GetCurrentAim
_TEXT	ENDS
PUBLIC	?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z ; CPlayerPed::SetCurrentAim
EXTRN	?GameStoreRemotePlayerAim@@YAXHPAU_CAMERA_AIM@@@Z:PROC ; GameStoreRemotePlayerAim
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_pAim$ = 8						; size = 4
?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z PROC	; CPlayerPed::SetCurrentAim, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  : 	GameStoreRemotePlayerAim(m_bytePlayerNumber, pAim);

	mov	eax, DWORD PTR _pAim$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	call	?GameStoreRemotePlayerAim@@YAXHPAU_CAMERA_AIM@@@Z ; GameStoreRemotePlayerAim
	add	esp, 8

; 253  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCurrentAim@CPlayerPed@@QAEXPAU_CAMERA_AIM@@@Z ENDP	; CPlayerPed::SetCurrentAim
_TEXT	ENDS
PUBLIC	__real@3e800000
PUBLIC	__real@be800000
PUBLIC	__real@0000000000000000
PUBLIC	??0Vector3@@QAE@XZ				; Vector3::Vector3
PUBLIC	?EnforceWorldBoundries@CPlayerPed@@QAEHMMMM@Z	; CPlayerPed::EnforceWorldBoundries
EXTRN	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z:PROC	; CPhysical::SetMoveSpeed
EXTRN	?GetMoveSpeed@CPhysical@@QAEXPAUVector3@@@Z:PROC ; CPhysical::GetMoveSpeed
EXTRN	?GetPosition@CEntity@@QAEXPAUVector3@@@Z:PROC	; CEntity::GetPosition
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?EnforceWorldBoundries@CPlayerPed@@QAEHMMMM@Z
_TEXT	SEGMENT
_vecMoveSpeed$ = -48					; size = 12
_vPos$ = -28						; size = 12
_this$ = -8						; size = 4
_fPX$ = 8						; size = 4
_fZX$ = 12						; size = 4
_fPY$ = 16						; size = 4
_fNY$ = 20						; size = 4
?EnforceWorldBoundries@CPlayerPed@@QAEHMMMM@Z PROC	; CPlayerPed::EnforceWorldBoundries, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 259  : 	Vector3 vPos;

	lea	ecx, DWORD PTR _vPos$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 260  : 	Vector3 vecMoveSpeed;

	lea	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	call	??0Vector3@@QAE@XZ			; Vector3::Vector3

; 261  : 
; 262  : 	if(!GetEntity()) return FALSE;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	test	eax, eax
	jne	SHORT $LN12@EnforceWor
	xor	eax, eax
	jmp	$LN13@EnforceWor
$LN12@EnforceWor:

; 263  : 
; 264  : 	GetPosition(&vPos);

	lea	eax, DWORD PTR _vPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPosition@CEntity@@QAEXPAUVector3@@@Z ; CEntity::GetPosition

; 265  : 	GetMoveSpeed(&vecMoveSpeed);

	lea	eax, DWORD PTR _vecMoveSpeed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMoveSpeed@CPhysical@@QAEXPAUVector3@@@Z ; CPhysical::GetMoveSpeed

; 266  : 
; 267  : 	if(vPos.X > fPX) // greatest X coord check

	fld	DWORD PTR _vPos$[ebp]
	fld	DWORD PTR _fPX$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN11@EnforceWor

; 268  : 	{
; 269  : 		if(vecMoveSpeed.X != 0.0f) {

	fld	DWORD PTR _vecMoveSpeed$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN10@EnforceWor

; 270  : 			vecMoveSpeed.X = -0.25f;

	fld	DWORD PTR __real@be800000
	fstp	DWORD PTR _vecMoveSpeed$[ebp]
$LN10@EnforceWor:

; 271  : 		}
; 272  : 		SetMoveSpeed(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z ; CPhysical::SetMoveSpeed

; 273  : 		return TRUE;

	mov	eax, 1
	jmp	$LN13@EnforceWor
	jmp	$LN2@EnforceWor
$LN11@EnforceWor:

; 274  : 	}
; 275  : 	else if(vPos.X < fZX)  // least X coord check

	fld	DWORD PTR _vPos$[ebp]
	fld	DWORD PTR _fZX$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN8@EnforceWor

; 276  : 	{
; 277  : 		if(vecMoveSpeed.X != 0.0f) {

	fld	DWORD PTR _vecMoveSpeed$[ebp]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN7@EnforceWor

; 278  : 			vecMoveSpeed.X = 0.25f;

	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vecMoveSpeed$[ebp]
$LN7@EnforceWor:

; 279  : 		}
; 280  : 		SetMoveSpeed(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z ; CPhysical::SetMoveSpeed

; 281  : 		return TRUE;

	mov	eax, 1
	jmp	$LN13@EnforceWor
	jmp	$LN2@EnforceWor
$LN8@EnforceWor:

; 282  : 	}
; 283  : 	else if(vPos.Y > fPY) // Y coord check

	fld	DWORD PTR _vPos$[ebp+4]
	fld	DWORD PTR _fPY$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 5
	jp	SHORT $LN5@EnforceWor

; 284  : 	{
; 285  : 		if(vecMoveSpeed.Y != 0.0f) {

	fld	DWORD PTR _vecMoveSpeed$[ebp+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN4@EnforceWor

; 286  : 			vecMoveSpeed.Y = -0.25f;

	fld	DWORD PTR __real@be800000
	fstp	DWORD PTR _vecMoveSpeed$[ebp+4]
$LN4@EnforceWor:

; 287  : 		}
; 288  : 
; 289  : 		SetMoveSpeed(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z ; CPhysical::SetMoveSpeed

; 290  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@EnforceWor
	jmp	SHORT $LN2@EnforceWor
$LN5@EnforceWor:

; 291  : 	}
; 292  : 	else if(vPos.Y < fNY)

	fld	DWORD PTR _vPos$[ebp+4]
	fld	DWORD PTR _fNY$[ebp]
	fcompp
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN2@EnforceWor

; 293  : 	{
; 294  : 		if(vecMoveSpeed.Y != 0.0f) {

	fld	DWORD PTR _vecMoveSpeed$[ebp+4]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 68					; 00000044H
	jnp	SHORT $LN1@EnforceWor

; 295  : 			vecMoveSpeed.Y = 0.25f;

	fld	DWORD PTR __real@3e800000
	fstp	DWORD PTR _vecMoveSpeed$[ebp+4]
$LN1@EnforceWor:

; 296  : 		}
; 297  : 
; 298  : 		SetMoveSpeed(vecMoveSpeed);

	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _vecMoveSpeed$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _vecMoveSpeed$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetMoveSpeed@CPhysical@@QAEXUVector3@@@Z ; CPhysical::SetMoveSpeed

; 299  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN13@EnforceWor
$LN2@EnforceWor:

; 300  : 	}
; 301  : 
; 302  : 	return FALSE;

	xor	eax, eax
$LN13@EnforceWor:

; 303  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@EnforceWor
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN18@EnforceWor:
	DD	2
	DD	$LN17@EnforceWor
$LN17@EnforceWor:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN15@EnforceWor
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN16@EnforceWor
$LN16@EnforceWor:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN15@EnforceWor:
	DB	118					; 00000076H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?EnforceWorldBoundries@CPlayerPed@@QAEHMMMM@Z ENDP	; CPlayerPed::EnforceWorldBoundries
_TEXT	ENDS
PUBLIC	?SetInitialState@CPlayerPed@@QAEXXZ		; CPlayerPed::SetInitialState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetInitialState@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?SetInitialState@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::SetInitialState, COMDAT
; _this$ = ecx

; 308  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 309  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 310  : 
; 311  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@SetInitial

; 312  : 	{
; 313  : 		pPed->byteJumpFlags = 0xA;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	BYTE PTR [eax+333], 10			; 0000000aH
$LN2@SetInitial:

; 314  : 	}
; 315  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetInitialState@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::SetInitialState
_TEXT	ENDS
PUBLIC	?GetCurrentVehicleID@CPlayerPed@@QAEHXZ		; CPlayerPed::GetCurrentVehicleID
EXTRN	?GetIndexFromVehicle@CPools@@SGHPAU_VEHICLE_TYPE@@@Z:PROC ; CPools::GetIndexFromVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCurrentVehicleID@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetCurrentVehicleID@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::GetCurrentVehicleID, COMDAT
; _this$ = ecx

; 320  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 321  : 	PED_TYPE *pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 322  : 
; 323  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetCurrent@2

; 324  : 	{
; 325  : 		return CPools::GetIndexFromVehicle((VEHICLE_TYPE *)pPed->pVehicle);

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	push	ecx
	call	?GetIndexFromVehicle@CPools@@SGHPAU_VEHICLE_TYPE@@@Z ; CPools::GetIndexFromVehicle
	jmp	SHORT $LN2@GetCurrent@2
$LN1@GetCurrent@2:

; 326  : 	}
; 327  : 
; 328  : 	// Not sure about this one
; 329  : 	return -1;

	or	eax, -1
$LN2@GetCurrent@2:

; 330  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentVehicleID@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::GetCurrentVehicleID
_TEXT	ENDS
PUBLIC	?ShowMarker@CPlayerPed@@QAEXH@Z			; CPlayerPed::ShowMarker
EXTRN	?ShowMarker@CGame@@QAEXHH@Z:PROC		; CGame::ShowMarker
EXTRN	?SetMarkerColor@CGame@@QAEXHH@Z:PROC		; CGame::SetMarkerColor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ShowMarker@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_hndMarker$209374 = -56					; size = 4
_dwPedID$209373 = -44					; size = 4
_dwFunc$209372 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iMarkerColor$ = 8					; size = 4
?ShowMarker@CPlayerPed@@QAEXH@Z PROC			; CPlayerPed::ShowMarker, COMDAT
; _this$ = ecx

; 335  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 336  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 337  : 
; 338  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@ShowMarker

; 339  : 	{		
; 340  : 		DWORD dwFunc = FUNC_TieMarkerToActor;

	mov	DWORD PTR _dwFunc$209372[ebp], 4995904	; 004c3b40H

; 341  : 		DWORD dwPedID = m_dwGTAId;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _dwPedID$209373[ebp], ecx

; 342  : 		DWORD hndMarker;
; 343  : 		_asm
; 344  : 		{
; 345  : 			push 2

	push	2

; 346  : 			push 4

	push	4

; 347  : 			mov eax, dwPedID

	mov	eax, DWORD PTR _dwPedID$209373[ebp]

; 348  : 			push eax

	push	eax

; 349  : 			push 2

	push	2

; 350  : 			call dwFunc

	call	DWORD PTR _dwFunc$209372[ebp]

; 351  : 			mov hndMarker, eax

	mov	DWORD PTR _hndMarker$209374[ebp], eax

; 352  : 			add esp, 10h

	add	esp, 16					; 00000010H

; 353  : 		}
; 354  : 
; 355  : 		pGame->SetMarkerColor(hndMarker, iMarkerColor);

	mov	eax, DWORD PTR _iMarkerColor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hndMarker$209374[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?SetMarkerColor@CGame@@QAEXHH@Z		; CGame::SetMarkerColor

; 356  : 		pGame->ShowMarker(hndMarker, 2);

	push	2
	mov	eax, DWORD PTR _hndMarker$209374[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?ShowMarker@CGame@@QAEXHH@Z		; CGame::ShowMarker
$LN2@ShowMarker:

; 357  : 	}
; 358  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ShowMarker@CPlayerPed@@QAEXH@Z ENDP			; CPlayerPed::ShowMarker
_TEXT	ENDS
PUBLIC	?IsOnScreen@CPlayerPed@@QAEHXZ			; CPlayerPed::IsOnScreen
EXTRN	?IsOnScreen@CEntity@@QAEHXZ:PROC		; CEntity::IsOnScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsOnScreen@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsOnScreen@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsOnScreen, COMDAT
; _this$ = ecx

; 363  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 364  : 	if(GetEntity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	test	eax, eax
	je	SHORT $LN1@IsOnScreen

; 365  : 	{
; 366  : 		return CEntity::IsOnScreen();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsOnScreen@CEntity@@QAEHXZ		; CEntity::IsOnScreen
	jmp	SHORT $LN2@IsOnScreen
$LN1@IsOnScreen:

; 367  : 	}
; 368  : 
; 369  : 	return FALSE;

	xor	eax, eax
$LN2@IsOnScreen:

; 370  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsOnScreen@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsOnScreen
_TEXT	ENDS
PUBLIC	?Say@CPlayerPed@@QAEXI@Z			; CPlayerPed::Say
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Say@CPlayerPed@@QAEXI@Z
_TEXT	SEGMENT
_dwFunc$209386 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_uiNum$ = 8						; size = 4
?Say@CPlayerPed@@QAEXI@Z PROC				; CPlayerPed::Say, COMDAT
; _this$ = ecx

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 376  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 377  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@Say

; 378  : 	{
; 379  : 		DWORD dwFunc = FUNC_CPed__Say;

	mov	DWORD PTR _dwFunc$209386[ebp], 5383856	; 005226b0H

; 380  : 		_asm
; 381  : 		{
; 382  : 			push uiNum

	push	DWORD PTR _uiNum$[ebp]

; 383  : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 384  : 			call dwFunc

	call	DWORD PTR _dwFunc$209386[ebp]

; 385  : 			add esp, 4

	add	esp, 4
$LN2@Say:

; 386  : 		}
; 387  : 	}
; 388  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Say@CPlayerPed@@QAEXI@Z ENDP				; CPlayerPed::Say
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?GetHealth@CPlayerPed@@QAEMXZ			; CPlayerPed::GetHealth
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GetHealth@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetHealth@CPlayerPed@@QAEMXZ PROC			; CPlayerPed::GetHealth, COMDAT
; _this$ = ecx

; 393  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 394  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 395  : 
; 396  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetHealth

; 397  : 	{
; 398  : 		return pPed->fHealth;

	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR [eax+852]
	jmp	SHORT $LN2@GetHealth
$LN1@GetHealth:

; 399  : 	}
; 400  : 
; 401  : 	return 0.0f;

	fldz
$LN2@GetHealth:

; 402  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHealth@CPlayerPed@@QAEMXZ ENDP			; CPlayerPed::GetHealth
_TEXT	ENDS
PUBLIC	?SetHealth@CPlayerPed@@QAEXM@Z			; CPlayerPed::SetHealth
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetHealth@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_fHealth$ = 8						; size = 4
?SetHealth@CPlayerPed@@QAEXM@Z PROC			; CPlayerPed::SetHealth, COMDAT
; _this$ = ecx

; 407  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 408  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 409  : 
; 410  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@SetHealth

; 411  : 	{
; 412  : 		pPed->fHealth = fHealth;

	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR _fHealth$[ebp]
	fstp	DWORD PTR [eax+852]
$LN1@SetHealth:

; 413  : 	}
; 414  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetHealth@CPlayerPed@@QAEXM@Z ENDP			; CPlayerPed::SetHealth
_TEXT	ENDS
PUBLIC	?GetArmour@CPlayerPed@@QAEMXZ			; CPlayerPed::GetArmour
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetArmour@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetArmour@CPlayerPed@@QAEMXZ PROC			; CPlayerPed::GetArmour, COMDAT
; _this$ = ecx

; 433  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 434  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 435  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetArmour

; 436  : 		return pPed->fArmour;

	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR [eax+856]
	jmp	SHORT $LN2@GetArmour
$LN1@GetArmour:

; 437  : 	}
; 438  : 	return 0.0f;

	fldz
$LN2@GetArmour:

; 439  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetArmour@CPlayerPed@@QAEMXZ ENDP			; CPlayerPed::GetArmour
_TEXT	ENDS
PUBLIC	?SetArmour@CPlayerPed@@QAEXM@Z			; CPlayerPed::SetArmour
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetArmour@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_fArmour$ = 8						; size = 4
?SetArmour@CPlayerPed@@QAEXM@Z PROC			; CPlayerPed::SetArmour, COMDAT
; _this$ = ecx

; 444  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 445  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 446  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@SetArmour

; 447  : 		pPed->fArmour = fArmour;

	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR _fArmour$[ebp]
	fstp	DWORD PTR [eax+856]
$LN1@SetArmour:

; 448  : 	}
; 449  : }	

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetArmour@CPlayerPed@@QAEXM@Z ENDP			; CPlayerPed::SetArmour
_TEXT	ENDS
PUBLIC	?IsDead@CPlayerPed@@QAEHXZ			; CPlayerPed::IsDead
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsDead@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?IsDead@CPlayerPed@@QAEHXZ PROC				; CPlayerPed::IsDead, COMDAT
; _this$ = ecx

; 454  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 455  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 456  : 	if(pPed && pPed->fHealth > 0.0f) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@IsDead
	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR [eax+852]
	fcomp	QWORD PTR __real@0000000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN1@IsDead

; 457  : 			return FALSE;

	xor	eax, eax
	jmp	SHORT $LN2@IsDead
$LN1@IsDead:

; 458  : 	}
; 459  : 	return TRUE;

	mov	eax, 1
$LN2@IsDead:

; 460  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDead@CPlayerPed@@QAEHXZ ENDP				; CPlayerPed::IsDead
_TEXT	ENDS
PUBLIC	?GetAction@CPlayerPed@@QAEEXZ			; CPlayerPed::GetAction
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetAction@CPlayerPed@@QAEEXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetAction@CPlayerPed@@QAEEXZ PROC			; CPlayerPed::GetAction, COMDAT
; _this$ = ecx

; 465  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 466  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 467  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetAction

; 468  : 		return pPed->byteAction;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	al, BYTE PTR [eax+580]
	jmp	SHORT $LN2@GetAction
$LN1@GetAction:

; 469  : 	}
; 470  : 	return 0;

	xor	al, al
$LN2@GetAction:

; 471  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetAction@CPlayerPed@@QAEEXZ ENDP			; CPlayerPed::GetAction
_TEXT	ENDS
PUBLIC	?SetAction@CPlayerPed@@QAEXE@Z			; CPlayerPed::SetAction
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetAction@CPlayerPed@@QAEXE@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_byteTrigger$ = 8					; size = 1
?SetAction@CPlayerPed@@QAEXE@Z PROC			; CPlayerPed::SetAction, COMDAT
; _this$ = ecx

; 476  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 477  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 478  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@SetAction

; 479  : 		pPed->byteAction = byteTrigger;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	cl, BYTE PTR _byteTrigger$[ebp]
	mov	BYTE PTR [eax+580], cl
$LN2@SetAction:

; 480  : 	}
; 481  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetAction@CPlayerPed@@QAEXE@Z ENDP			; CPlayerPed::SetAction
_TEXT	ENDS
PUBLIC	?GetShootingFlags@CPlayerPed@@QAEEXZ		; CPlayerPed::GetShootingFlags
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetShootingFlags@CPlayerPed@@QAEEXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetShootingFlags@CPlayerPed@@QAEEXZ PROC		; CPlayerPed::GetShootingFlags, COMDAT
; _this$ = ecx

; 485  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 486  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 487  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetShootin

; 488  : 		return pPed->byteShootFlags;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	al, BYTE PTR [eax+332]
	jmp	SHORT $LN2@GetShootin
$LN1@GetShootin:

; 489  : 	}
; 490  : 	return 0;

	xor	al, al
$LN2@GetShootin:

; 491  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetShootingFlags@CPlayerPed@@QAEEXZ ENDP		; CPlayerPed::GetShootingFlags
_TEXT	ENDS
PUBLIC	?SetShootingFlags@CPlayerPed@@QAEXE@Z		; CPlayerPed::SetShootingFlags
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetShootingFlags@CPlayerPed@@QAEXE@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_byteShooting$ = 8					; size = 1
?SetShootingFlags@CPlayerPed@@QAEXE@Z PROC		; CPlayerPed::SetShootingFlags, COMDAT
; _this$ = ecx

; 496  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 497  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 498  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@SetShootin

; 499  : 		pPed->byteShootFlags = byteShooting;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	cl, BYTE PTR _byteShooting$[ebp]
	mov	BYTE PTR [eax+332], cl
$LN2@SetShootin:

; 500  : 	}
; 501  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetShootingFlags@CPlayerPed@@QAEXE@Z ENDP		; CPlayerPed::SetShootingFlags
_TEXT	ENDS
PUBLIC	?IsInVehicle@CPlayerPed@@QAEHXZ			; CPlayerPed::IsInVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsInVehicle@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?IsInVehicle@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsInVehicle, COMDAT
; _this$ = ecx

; 506  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 507  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 508  : 	if(pPed && pPed->byteIsInVehicle) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@IsInVehicl
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+940]
	test	ecx, ecx
	je	SHORT $LN1@IsInVehicl

; 509  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN2@IsInVehicl
$LN1@IsInVehicl:

; 510  : 	}
; 511  : 	return FALSE;

	xor	eax, eax
$LN2@IsInVehicl:

; 512  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsInVehicle@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsInVehicle
_TEXT	ENDS
PUBLIC	?GetRotation@CPlayerPed@@QAEMXZ			; CPlayerPed::GetRotation
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetRotation@CPlayerPed@@QAEMXZ
_TEXT	SEGMENT
_fRotation$ = -20					; size = 4
_this$ = -8						; size = 4
?GetRotation@CPlayerPed@@QAEMXZ PROC			; CPlayerPed::GetRotation, COMDAT
; _this$ = ecx

; 517  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 518  : 	//return (m_pPed->fRotation1);
; 519  : 	float fRotation;
; 520  : 	ScriptCommand(&get_player_z_angle, m_bytePlayerNumber, &fRotation);

	lea	eax, DWORD PTR _fRotation$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET _get_player_z_angle
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 521  : 	return fRotation;

	fld	DWORD PTR _fRotation$[ebp]

; 522  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@GetRotatio
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@GetRotatio:
	DD	1
	DD	$LN4@GetRotatio
$LN4@GetRotatio:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN3@GetRotatio
$LN3@GetRotatio:
	DB	102					; 00000066H
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
?GetRotation@CPlayerPed@@QAEMXZ ENDP			; CPlayerPed::GetRotation
_TEXT	ENDS
PUBLIC	__real@3f76c16c20000000
PUBLIC	__real@400921fb60000000
EXTRN	?SetHeading@CEntity@@QAEXM@Z:PROC		; CEntity::SetHeading
;	COMDAT __real@3f76c16c20000000
CONST	SEGMENT
__real@3f76c16c20000000 DQ 03f76c16c20000000r	; 0.00555556
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetRotation@CPlayerPed@@QAEXM@Z
_TEXT	SEGMENT
_fNewRotation$209463 = -32				; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_fRotation$ = 8						; size = 4
?SetRotation@CPlayerPed@@QAEXM@Z PROC			; CPlayerPed::SetRotation, COMDAT
; _this$ = ecx

; 529  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 530  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 531  : 
; 532  : 	if(pPed && !pPed->byteIsInVehicle)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@SetRotatio
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+940]
	test	ecx, ecx
	jne	SHORT $LN1@SetRotatio

; 533  : 	{
; 534  : 		float fNewRotation = (PI * fRotation * 0.0055555557f);

	fld	DWORD PTR _fRotation$[ebp]
	fmul	QWORD PTR __real@400921fb60000000
	fmul	QWORD PTR __real@3f76c16c20000000
	fstp	DWORD PTR _fNewRotation$209463[ebp]

; 535  : 		pPed->fRotation1 = fNewRotation;

	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR _fNewRotation$209463[ebp]
	fstp	DWORD PTR [eax+884]

; 536  : 		pPed->fRotation2 = fNewRotation;

	mov	eax, DWORD PTR _pPed$[ebp]
	fld	DWORD PTR _fNewRotation$209463[ebp]
	fstp	DWORD PTR [eax+888]

; 537  : 		SetHeading(fNewRotation);

	push	ecx
	fld	DWORD PTR _fNewRotation$209463[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetHeading@CEntity@@QAEXM@Z		; CEntity::SetHeading
$LN1@SetRotatio:

; 538  : 	}
; 539  : 	//ScriptCommand(&set_player_z_angle, m_bytePlayerNumber, fRotation);
; 540  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRotation@CPlayerPed@@QAEXM@Z ENDP			; CPlayerPed::SetRotation
_TEXT	ENDS
PUBLIC	?IsAPassenger@CPlayerPed@@QAEHXZ		; CPlayerPed::IsAPassenger
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsAPassenger@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pVehicle$209470 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?IsAPassenger@CPlayerPed@@QAEHXZ PROC			; CPlayerPed::IsAPassenger, COMDAT
; _this$ = ecx

; 545  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 546  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 547  : 	if(pPed && pPed->byteIsInVehicle && pPed->pVehicle)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@IsAPasseng
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+940]
	test	ecx, ecx
	je	SHORT $LN2@IsAPasseng
	mov	eax, DWORD PTR _pPed$[ebp]
	cmp	DWORD PTR [eax+936], 0
	je	SHORT $LN2@IsAPasseng

; 548  : 	{
; 549  : 		VEHICLE_TYPE * pVehicle = (VEHICLE_TYPE *)pPed->pVehicle;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	DWORD PTR _pVehicle$209470[ebp], ecx

; 550  : 
; 551  : 		if(pVehicle->pDriver != pPed) {

	mov	eax, DWORD PTR _pVehicle$209470[ebp]
	mov	ecx, DWORD PTR [eax+424]
	cmp	ecx, DWORD PTR _pPed$[ebp]
	je	SHORT $LN2@IsAPasseng

; 552  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsAPasseng
$LN2@IsAPasseng:

; 553  : 		}
; 554  : 	}
; 555  : 
; 556  : 	return FALSE;

	xor	eax, eax
$LN3@IsAPasseng:

; 557  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsAPassenger@CPlayerPed@@QAEHXZ ENDP			; CPlayerPed::IsAPassenger
_TEXT	ENDS
PUBLIC	?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ; CPlayerPed::GetGtaVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ PROC	; CPlayerPed::GetGtaVehicle, COMDAT
; _this$ = ecx

; 562  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 563  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 564  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetGtaVehi

; 565  : 		return (VEHICLE_TYPE *)pPed->pVehicle;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	eax, DWORD PTR [eax+936]
	jmp	SHORT $LN2@GetGtaVehi
$LN1@GetGtaVehi:

; 566  : 	}
; 567  : 	return NULL;

	xor	eax, eax
$LN2@GetGtaVehi:

; 568  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGtaVehicle@CPlayerPed@@QAEPAU_VEHICLE_TYPE@@XZ ENDP	; CPlayerPed::GetGtaVehicle
_TEXT	ENDS
PUBLIC	?CheckAndRepairInvisProblems@CPlayerPed@@QAEXXZ	; CPlayerPed::CheckAndRepairInvisProblems
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckAndRepairInvisProblems@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?CheckAndRepairInvisProblems@CPlayerPed@@QAEXXZ PROC	; CPlayerPed::CheckAndRepairInvisProblems, COMDAT
; _this$ = ecx

; 573  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 574  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 575  : 
; 576  : 	if(pPed && (pPed->byteAction != ACTION_EXITING_VEHICLE) &&
; 577  : 		((pPed->byteIsInVehicle) || (pPed->byteAction == ACTION_DRIVING_VEHICLE)) ) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN3@CheckAndRe
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+580]
	cmp	ecx, 60					; 0000003cH
	je	SHORT $LN3@CheckAndRe
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+940]
	test	ecx, ecx
	jne	SHORT $LN1@CheckAndRe
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+580]
	cmp	ecx, 50					; 00000032H
	jne	SHORT $LN3@CheckAndRe
$LN1@CheckAndRe:

; 578  : 		pPed->byteIsInVehicle = 0;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	BYTE PTR [eax+940], 0

; 579  : 		pPed->byteAction = 1;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	BYTE PTR [eax+580], 1
$LN3@CheckAndRe:

; 580  : 	}
; 581  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckAndRepairInvisProblems@CPlayerPed@@QAEXXZ ENDP	; CPlayerPed::CheckAndRepairInvisProblems
_TEXT	ENDS
PUBLIC	?ClearTargetAndVehicle@CPlayerPed@@QAEXXZ	; CPlayerPed::ClearTargetAndVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearTargetAndVehicle@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?ClearTargetAndVehicle@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ClearTargetAndVehicle, COMDAT
; _this$ = ecx

; 586  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 587  : 	
; 588  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearTargetAndVehicle@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ClearTargetAndVehicle
_TEXT	ENDS
PUBLIC	?SetArmedWeapon@CPlayerPed@@QAEHH@Z		; CPlayerPed::SetArmedWeapon
PUBLIC	?GiveWeapon@CPlayerPed@@QAEHHH@Z		; CPlayerPed::GiveWeapon
EXTRN	?GameGetWeaponModelFromWeapon@@YGHH@Z:PROC	; GameGetWeaponModelFromWeapon
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GiveWeapon@CPlayerPed@@QAEHHH@Z
_TEXT	SEGMENT
_dwFunc$209504 = -44					; size = 4
_iModelID$209498 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iWeaponID$ = 8						; size = 4
_iAmmo$ = 12						; size = 4
?GiveWeapon@CPlayerPed@@QAEHHH@Z PROC			; CPlayerPed::GiveWeapon, COMDAT
; _this$ = ecx

; 593  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 594  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 595  : 
; 596  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	$LN5@GiveWeapon

; 597  : 	{
; 598  : 		int iModelID = GameGetWeaponModelFromWeapon(iWeaponID);

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	push	eax
	call	?GameGetWeaponModelFromWeapon@@YGHH@Z	; GameGetWeaponModelFromWeapon
	mov	DWORD PTR _iModelID$209498[ebp], eax

; 599  : 
; 600  : 		if(iModelID != -1)

	cmp	DWORD PTR _iModelID$209498[ebp], -1
	je	SHORT $LN5@GiveWeapon

; 601  : 		{
; 602  : 			// Is the model not loaded?
; 603  : 			if(!pGame->IsModelLoaded(iModelID))

	mov	eax, DWORD PTR _iModelID$209498[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@GiveWeapon

; 604  : 			{
; 605  : 				// Request the model
; 606  : 				pGame->RequestModel(iModelID);

	mov	eax, DWORD PTR _iModelID$209498[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 607  : 
; 608  : 				// Load all requested models
; 609  : 				pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels
$LN2@GiveWeapon:

; 610  : 
; 611  : 				// Wait for the model to load
; 612  : 				while(!pGame->IsModelLoaded(iModelID))

	mov	eax, DWORD PTR _iModelID$209498[ebp]
	push	eax
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@GiveWeapon

; 613  : 				{
; 614  : 					Sleep(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 615  : 				}

	jmp	SHORT $LN2@GiveWeapon
$LN3@GiveWeapon:

; 616  : 			}
; 617  : 
; 618  : 			DWORD dwFunc = FUNC_CPed__GiveWeapon;

	mov	DWORD PTR _dwFunc$209504[ebp], 5241392	; 004ffa30H

; 619  : 			_asm
; 620  : 			{
; 621  : 				push 1

	push	1

; 622  : 				push iAmmo

	push	DWORD PTR _iAmmo$[ebp]

; 623  : 				push iWeaponID

	push	DWORD PTR _iWeaponID$[ebp]

; 624  : 				mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 625  : 				call dwFunc

	call	DWORD PTR _dwFunc$209504[ebp]

; 626  : 			}
; 627  : 
; 628  : 			SetArmedWeapon(iWeaponID);

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetArmedWeapon@CPlayerPed@@QAEHH@Z	; CPlayerPed::SetArmedWeapon

; 629  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN6@GiveWeapon
$LN5@GiveWeapon:

; 630  : 		}
; 631  : 	}
; 632  : 	return FALSE;

	xor	eax, eax
$LN6@GiveWeapon:

; 633  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GiveWeapon@CPlayerPed@@QAEHHH@Z ENDP			; CPlayerPed::GiveWeapon
_TEXT	ENDS
PUBLIC	?ClearAllWeapons@CPlayerPed@@QAEXXZ		; CPlayerPed::ClearAllWeapons
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearAllWeapons@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwFunc$209511 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?ClearAllWeapons@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ClearAllWeapons, COMDAT
; _this$ = ecx

; 638  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 639  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 640  : 
; 641  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@ClearAllWe

; 642  : 	{
; 643  : 		DWORD dwFunc = FUNC_CPed__RemoveAllWeapons;

	mov	DWORD PTR _dwFunc$209511[ebp], 5240640	; 004ff740H

; 644  : 		_asm
; 645  : 		{
; 646  : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 647  : 			call dwFunc

	call	DWORD PTR _dwFunc$209511[ebp]
$LN2@ClearAllWe:

; 648  : 		}
; 649  : 	}
; 650  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearAllWeapons@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ClearAllWeapons
_TEXT	ENDS
PUBLIC	?SetWaterDeaths@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetWaterDeaths
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetWaterDeaths@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iToggle$ = 8						; size = 4
?SetWaterDeaths@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetWaterDeaths, COMDAT
; _this$ = ecx

; 655  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 656  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 657  : 
; 658  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@SetWaterDe

; 659  : 	{
; 660  : 		ScriptCommand(&water_deaths, m_dwGTAId, iToggle);

	mov	eax, DWORD PTR _iToggle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET _water_deaths
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN2@SetWaterDe:

; 661  : 	}
; 662  : }	

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWaterDeaths@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetWaterDeaths
_TEXT	ENDS
PUBLIC	?SetCellAction@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetCellAction
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCellAction@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iToggle$ = 8						; size = 4
?SetCellAction@CPlayerPed@@QAEXH@Z PROC			; CPlayerPed::SetCellAction, COMDAT
; _this$ = ecx

; 667  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 668  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 669  : 
; 670  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN5@SetCellAct

; 671  : 	{
; 672  : 		// Has the cellphone model not loaded?
; 673  : 		if(!pGame->IsModelLoaded(MODEL_CELLPHONE))

	push	258					; 00000102H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@SetCellAct

; 674  : 		{
; 675  : 			// Request the model
; 676  : 			pGame->RequestModel(MODEL_CELLPHONE);

	push	258					; 00000102H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?RequestModel@CGame@@QAEXH@Z		; CGame::RequestModel

; 677  : 
; 678  : 			// Load all requested models
; 679  : 			pGame->LoadRequestedModels();

	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?LoadRequestedModels@CGame@@QAEXXZ	; CGame::LoadRequestedModels
$LN2@SetCellAct:

; 680  : 
; 681  : 			// Wait for the model to load
; 682  : 			while(!pGame->IsModelLoaded(MODEL_CELLPHONE))

	push	258					; 00000102H
	mov	ecx, DWORD PTR ?pGame@@3PAVCGame@@A	; pGame
	call	?IsModelLoaded@CGame@@QAEHH@Z		; CGame::IsModelLoaded
	test	eax, eax
	jne	SHORT $LN3@SetCellAct

; 683  : 			{
; 684  : 				Sleep(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 685  : 			}

	jmp	SHORT $LN2@SetCellAct
$LN3@SetCellAct:

; 686  : 		}
; 687  : 
; 688  : 		ScriptCommand(&cell_phone, m_dwGTAId, iToggle);

	mov	eax, DWORD PTR _iToggle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET _cell_phone
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH
$LN5@SetCellAct:

; 689  : 	}
; 690  : }	

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCellAction@CPlayerPed@@QAEXH@Z ENDP			; CPlayerPed::SetCellAction
_TEXT	ENDS
PUBLIC	??_C@_0BA@GPFIEOAN@Flashing?5called?$AA@	; `string'
PUBLIC	?Flash@CPlayerPed@@QAEXH@Z			; CPlayerPed::Flash
EXTRN	?AddDebugMessage@CChatWindow@@QAAXPADZZ:PROC	; CChatWindow::AddDebugMessage
EXTRN	?pChatWindow@@3PAVCChatWindow@@A:DWORD		; pChatWindow
;	COMDAT ??_C@_0BA@GPFIEOAN@Flashing?5called?$AA@
CONST	SEGMENT
??_C@_0BA@GPFIEOAN@Flashing?5called?$AA@ DB 'Flashing called', 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Flash@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iItem$ = 8						; size = 4
?Flash@CPlayerPed@@QAEXH@Z PROC				; CPlayerPed::Flash, COMDAT
; _this$ = ecx

; 695  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 696  : 	ScriptCommand(&flash_item, iItem);

	mov	eax, DWORD PTR _iItem$[ebp]
	push	eax
	push	OFFSET _flash_item
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 697  : 	pChatWindow->AddDebugMessage("Flashing called");

	push	OFFSET ??_C@_0BA@GPFIEOAN@Flashing?5called?$AA@
	mov	eax, DWORD PTR ?pChatWindow@@3PAVCChatWindow@@A ; pChatWindow
	push	eax
	call	?AddDebugMessage@CChatWindow@@QAAXPADZZ	; CChatWindow::AddDebugMessage
	add	esp, 8

; 698  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Flash@CPlayerPed@@QAEXH@Z ENDP				; CPlayerPed::Flash
_TEXT	ENDS
PUBLIC	?SetActorBleeding@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetActorBleeding
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetActorBleeding@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iToggle$ = 8						; size = 4
?SetActorBleeding@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetActorBleeding, COMDAT
; _this$ = ecx

; 703  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 704  : 	ScriptCommand(&set_actor_bleeding, m_dwGTAId, iToggle);	

	mov	eax, DWORD PTR _iToggle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET _set_actor_bleeding
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 705  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetActorBleeding@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetActorBleeding
_TEXT	ENDS
PUBLIC	?SetSkyColor@CPlayerPed@@QAEXHH@Z		; CPlayerPed::SetSkyColor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetSkyColor@CPlayerPed@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iColorID$ = 8						; size = 4
_iFade$ = 12						; size = 4
?SetSkyColor@CPlayerPed@@QAEXHH@Z PROC			; CPlayerPed::SetSkyColor, COMDAT
; _this$ = ecx

; 710  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 711  : 	ScriptCommand(&set_ped_sky_color, iColorID, iFade);

	mov	eax, DWORD PTR _iFade$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iColorID$[ebp]
	push	ecx
	push	OFFSET _set_ped_sky_color
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 712  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetSkyColor@CPlayerPed@@QAEXHH@Z ENDP			; CPlayerPed::SetSkyColor
_TEXT	ENDS
PUBLIC	?SetDrivebyState@CPlayerPed@@QAEXH@Z		; CPlayerPed::SetDrivebyState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetDrivebyState@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iToggle$ = 8						; size = 4
?SetDrivebyState@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::SetDrivebyState, COMDAT
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 718  : 	ScriptCommand(&set_driveby_state, m_dwGTAId, iToggle);

	mov	eax, DWORD PTR _iToggle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET _set_driveby_state
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 719  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDrivebyState@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::SetDrivebyState
_TEXT	ENDS
PUBLIC	?SetCameraShakeIntensity@CPlayerPed@@QAEXH@Z	; CPlayerPed::SetCameraShakeIntensity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCameraShakeIntensity@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iIntensity$ = 8					; size = 4
?SetCameraShakeIntensity@CPlayerPed@@QAEXH@Z PROC	; CPlayerPed::SetCameraShakeIntensity, COMDAT
; _this$ = ecx

; 724  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 725  : 	ScriptCommand(&shake_ped_camera, iIntensity);

	mov	eax, DWORD PTR _iIntensity$[ebp]
	push	eax
	push	OFFSET _shake_ped_camera
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 8

; 726  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCameraShakeIntensity@CPlayerPed@@QAEXH@Z ENDP	; CPlayerPed::SetCameraShakeIntensity
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetArmedWeapon@CPlayerPed@@QAEHH@Z
_TEXT	SEGMENT
_i$209559 = -29						; size = 1
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iWeaponType$ = 8					; size = 4
?SetArmedWeapon@CPlayerPed@@QAEHH@Z PROC		; CPlayerPed::SetArmedWeapon, COMDAT
; _this$ = ecx

; 731  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 732  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 733  : 
; 734  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN5@SetArmedWe

; 735  : 	{
; 736  : 		for(BYTE i = 0; i < 10; i++)

	mov	BYTE PTR _i$209559[ebp], 0
	jmp	SHORT $LN4@SetArmedWe
$LN3@SetArmedWe:
	mov	al, BYTE PTR _i$209559[ebp]
	add	al, 1
	mov	BYTE PTR _i$209559[ebp], al
$LN4@SetArmedWe:
	movzx	eax, BYTE PTR _i$209559[ebp]
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN5@SetArmedWe

; 737  : 		{
; 738  : 			if(pPed->weaponSlots[i].dwType == iWeaponType)

	movzx	eax, BYTE PTR _i$209559[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pPed$[ebp]
	mov	edx, DWORD PTR [ecx+eax+1032]
	cmp	edx, DWORD PTR _iWeaponType$[ebp]
	jne	SHORT $LN1@SetArmedWe

; 739  : 			{
; 740  : 				pPed->byteCurWepSlot = i;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	cl, BYTE PTR _i$209559[ebp]
	mov	BYTE PTR [eax+1548], cl

; 741  : 				return TRUE;

	mov	eax, 1
	jmp	SHORT $LN6@SetArmedWe
$LN1@SetArmedWe:

; 742  : 			}
; 743  : 		}

	jmp	SHORT $LN3@SetArmedWe
$LN5@SetArmedWe:

; 744  : 	}
; 745  : 
; 746  : 	return FALSE;

	xor	eax, eax
$LN6@SetArmedWe:

; 747  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetArmedWeapon@CPlayerPed@@QAEHH@Z ENDP		; CPlayerPed::SetArmedWeapon
_TEXT	ENDS
PUBLIC	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@XZ ; CPlayerPed::GetCurrentWeaponSlot
PUBLIC	?GetCurrentWeapon@CPlayerPed@@QAEHXZ		; CPlayerPed::GetCurrentWeapon
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCurrentWeapon@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCurrentWeapon@CPlayerPed@@QAEHXZ PROC		; CPlayerPed::GetCurrentWeapon, COMDAT
; _this$ = ecx

; 752  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 753  : 	if(GetEntity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	test	eax, eax
	je	SHORT $LN1@GetCurrent@3

; 754  : 	{
; 755  : 		return GetCurrentWeaponSlot()->dwType;

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@XZ ; CPlayerPed::GetCurrentWeaponSlot
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN2@GetCurrent@3
$LN1@GetCurrent@3:

; 756  : 	}
; 757  : 
; 758  : 	return 0;

	xor	eax, eax
$LN2@GetCurrent@3:

; 759  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentWeapon@CPlayerPed@@QAEHXZ ENDP		; CPlayerPed::GetCurrentWeapon
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ
_TEXT	SEGMENT
_pWeapon$209572 = -20					; size = 4
_this$ = -8						; size = 4
?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ PROC	; CPlayerPed::HasAmmoForCurrentWeapon, COMDAT
; _this$ = ecx

; 764  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 765  : 	if(GetEntity())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	test	eax, eax
	je	SHORT $LN3@HasAmmoFor

; 766  : 	{
; 767  : 		WEAPON_SLOT * pWeapon = GetCurrentWeaponSlot();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@XZ ; CPlayerPed::GetCurrentWeaponSlot
	mov	DWORD PTR _pWeapon$209572[ebp], eax

; 768  : 
; 769  : 		// melee weapons always have ammo
; 770  : 		if(pWeapon->dwType < 12)

	mov	eax, DWORD PTR _pWeapon$209572[ebp]
	cmp	DWORD PTR [eax], 12			; 0000000cH
	jae	SHORT $LN2@HasAmmoFor

; 771  : 		{
; 772  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@HasAmmoFor
$LN2@HasAmmoFor:

; 773  : 		}
; 774  : 
; 775  : 		if(pWeapon->dwAmmo)

	mov	eax, DWORD PTR _pWeapon$209572[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@HasAmmoFor

; 776  : 		{
; 777  : 			return TRUE;

	mov	eax, 1
	jmp	SHORT $LN4@HasAmmoFor
$LN3@HasAmmoFor:

; 778  : 		}
; 779  : 	}
; 780  : 
; 781  : 	return FALSE;

	xor	eax, eax
$LN4@HasAmmoFor:

; 782  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?HasAmmoForCurrentWeapon@CPlayerPed@@QAEHXZ ENDP	; CPlayerPed::HasAmmoForCurrentWeapon
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@XZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@XZ PROC ; CPlayerPed::GetCurrentWeaponSlot, COMDAT
; _this$ = ecx

; 787  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 788  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 789  : 
; 790  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetCurrent@4

; 791  : 	{
; 792  : 		return &pPed->weaponSlots[pPed->byteCurWepSlot];

	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+1548]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _pPed$[ebp]
	lea	eax, DWORD PTR [edx+ecx+1032]
	jmp	SHORT $LN2@GetCurrent@4
$LN1@GetCurrent@4:

; 793  : 	}
; 794  : 
; 795  : 	return NULL;

	xor	eax, eax
$LN2@GetCurrent@4:

; 796  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentWeaponSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@XZ ENDP ; CPlayerPed::GetCurrentWeaponSlot
_TEXT	ENDS
PUBLIC	?GetWeaponInSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@E@Z ; CPlayerPed::GetWeaponInSlot
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetWeaponInSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@E@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_byteSlot$ = 8						; size = 1
?GetWeaponInSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@E@Z PROC ; CPlayerPed::GetWeaponInSlot, COMDAT
; _this$ = ecx

; 801  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 802  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 803  : 
; 804  : 	if(pPed && (byteSlot >= 0 && byteSlot <= 10))

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@GetWeaponI
	movzx	eax, BYTE PTR _byteSlot$[ebp]
	test	eax, eax
	jl	SHORT $LN1@GetWeaponI
	movzx	eax, BYTE PTR _byteSlot$[ebp]
	cmp	eax, 10					; 0000000aH
	jg	SHORT $LN1@GetWeaponI

; 805  : 	{
; 806  : 		return &pPed->weaponSlots[byteSlot];

	movzx	eax, BYTE PTR _byteSlot$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _pPed$[ebp]
	lea	eax, DWORD PTR [ecx+eax+1032]
	jmp	SHORT $LN2@GetWeaponI
$LN1@GetWeaponI:

; 807  : 	}
; 808  : 
; 809  : 	return NULL;

	xor	eax, eax
$LN2@GetWeaponI:

; 810  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWeaponInSlot@CPlayerPed@@QAEPAU_WEAPON_SLOT@@E@Z ENDP ; CPlayerPed::GetWeaponInSlot
_TEXT	ENDS
PUBLIC	?PutDirectlyInVehicle@CPlayerPed@@QAEXH@Z	; CPlayerPed::PutDirectlyInVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PutDirectlyInVehicle@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_dwPlayerID$ = -20					; size = 4
_this$ = -8						; size = 4
_iVehicleID$ = 8					; size = 4
?PutDirectlyInVehicle@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::PutDirectlyInVehicle, COMDAT
; _this$ = ecx

; 815  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 816  : 	DWORD dwPlayerID = m_bytePlayerNumber;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	mov	DWORD PTR _dwPlayerID$[ebp], ecx

; 817  : 	ScriptCommand(&put_player_in_car, dwPlayerID, iVehicleID);

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwPlayerID$[ebp]
	push	ecx
	push	OFFSET _put_player_in_car
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 818  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?PutDirectlyInVehicle@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::PutDirectlyInVehicle
_TEXT	ENDS
PUBLIC	?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z ; CPlayerPed::SetObjective
PUBLIC	?EnterVehicleAsDriver@CPlayerPed@@QAEXH@Z	; CPlayerPed::EnterVehicleAsDriver
EXTRN	?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z:PROC ; CPools::GetVehicleFromIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EnterVehicleAsDriver@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_pVehicle$ = -20					; size = 4
_this$ = -8						; size = 4
_iVehicleID$ = 8					; size = 4
?EnterVehicleAsDriver@CPlayerPed@@QAEXH@Z PROC		; CPlayerPed::EnterVehicleAsDriver, COMDAT
; _this$ = ecx

; 823  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 824  : 	VEHICLE_TYPE *pVehicle = CPools::GetVehicleFromIndex(iVehicleID);

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	call	?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z ; CPools::GetVehicleFromIndex
	mov	DWORD PTR _pVehicle$[ebp], eax

; 825  : 
; 826  : 	if(pVehicle) {

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	SHORT $LN2@EnterVehic

; 827  : 		SetObjective((PDWORD)pVehicle, OBJECTIVE_TYPE_ENTER_CAR_AS_DRIVER);

	push	18					; 00000012H
	mov	eax, DWORD PTR _pVehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z ; CPlayerPed::SetObjective
$LN2@EnterVehic:

; 828  : 	}
; 829  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnterVehicleAsDriver@CPlayerPed@@QAEXH@Z ENDP		; CPlayerPed::EnterVehicleAsDriver
_TEXT	ENDS
PUBLIC	?EnterVehicleAsPassenger@CPlayerPed@@QAEXH@Z	; CPlayerPed::EnterVehicleAsPassenger
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EnterVehicleAsPassenger@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_pVehicle$ = -20					; size = 4
_this$ = -8						; size = 4
_iVehicleID$ = 8					; size = 4
?EnterVehicleAsPassenger@CPlayerPed@@QAEXH@Z PROC	; CPlayerPed::EnterVehicleAsPassenger, COMDAT
; _this$ = ecx

; 834  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 835  : 	VEHICLE_TYPE *pVehicle = CPools::GetVehicleFromIndex(iVehicleID);

	mov	eax, DWORD PTR _iVehicleID$[ebp]
	push	eax
	call	?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z ; CPools::GetVehicleFromIndex
	mov	DWORD PTR _pVehicle$[ebp], eax

; 836  : 
; 837  : 	if(pVehicle) {

	cmp	DWORD PTR _pVehicle$[ebp], 0
	je	SHORT $LN2@EnterVehic@2

; 838  : 		SetObjective((PDWORD)pVehicle, OBJECTIVE_TYPE_ENTER_CAR_AS_PASSENGER);

	push	17					; 00000011H
	mov	eax, DWORD PTR _pVehicle$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z ; CPlayerPed::SetObjective
$LN2@EnterVehic@2:

; 839  : 	}
; 840  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?EnterVehicleAsPassenger@CPlayerPed@@QAEXH@Z ENDP	; CPlayerPed::EnterVehicleAsPassenger
_TEXT	ENDS
PUBLIC	?ExitCurrentVehicle@CPlayerPed@@QAEXXZ		; CPlayerPed::ExitCurrentVehicle
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ExitCurrentVehicle@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?ExitCurrentVehicle@CPlayerPed@@QAEXXZ PROC		; CPlayerPed::ExitCurrentVehicle, COMDAT
; _this$ = ecx

; 845  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 846  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 847  : 	if(pPed && pPed->byteIsInVehicle) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@ExitCurren
	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+940]
	test	ecx, ecx
	je	SHORT $LN2@ExitCurren

; 848  : 		SetObjective((PDWORD)pPed->pVehicle, OBJECTIVE_TYPE_EXIT_CAR);

	push	16					; 00000010H
	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z ; CPlayerPed::SetObjective
$LN2@ExitCurren:

; 849  : 	}
; 850  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ExitCurrentVehicle@CPlayerPed@@QAEXXZ ENDP		; CPlayerPed::ExitCurrentVehicle
_TEXT	ENDS
PUBLIC	?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ; CPlayerPed::RemoveFromVehicleAndPutAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z
_TEXT	SEGMENT
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_fX$ = 8						; size = 4
_fY$ = 12						; size = 4
_fZ$ = 16						; size = 4
?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z PROC	; CPlayerPed::RemoveFromVehicleAndPutAt, COMDAT
; _this$ = ecx

; 855  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 856  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 857  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@RemoveFrom

; 858  : 		ScriptCommand(&put_player_at_and_remove_from_car,m_bytePlayerNumber,fX,fY,fZ);

	fld	DWORD PTR _fZ$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _fY$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _fX$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	push	OFFSET _put_player_at_and_remove_from_car
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H
$LN1@RemoveFrom:

; 859  : 
; 860  : 		/*
; 861  : 		if(pPed->physical.entity.nModelIndex <= 106) {
; 862  : 			SetModel(m_pPed->physical.entity.nModelIndex); // attempts to bypass model destruction probs
; 863  : 		}*/
; 864  : 	}
; 865  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?RemoveFromVehicleAndPutAt@CPlayerPed@@QAEXMMM@Z ENDP	; CPlayerPed::RemoveFromVehicleAndPutAt
_TEXT	ENDS
PUBLIC	?ForceIntoPassengerSeat@CPlayerPed@@QAEXII@Z	; CPlayerPed::ForceIntoPassengerSeat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ForceIntoPassengerSeat@CPlayerPed@@QAEXII@Z
_TEXT	SEGMENT
_dwFunc$209636 = -56					; size = 4
_uiPassengerOffset$209632 = -44				; size = 4
_pVehicle$209631 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_uiVehicleID$ = 8					; size = 4
_uiSeat$ = 12						; size = 4
?ForceIntoPassengerSeat@CPlayerPed@@QAEXII@Z PROC	; CPlayerPed::ForceIntoPassengerSeat, COMDAT
; _this$ = ecx

; 870  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-252]
	mov	ecx, 63					; 0000003fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 872  : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	$LN5@ForceIntoP

; 873  : 		VEHICLE_TYPE * pVehicle = CPools::GetVehicleFromIndex(uiVehicleID);

	mov	eax, DWORD PTR _uiVehicleID$[ebp]
	push	eax
	call	?GetVehicleFromIndex@CPools@@SGPAU_VEHICLE_TYPE@@H@Z ; CPools::GetVehicleFromIndex
	mov	DWORD PTR _pVehicle$209631[ebp], eax

; 874  : 		UINT uiPassengerOffset;
; 875  : 
; 876  : 		if(!pPed || !pVehicle) return;

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@ForceIntoP
	cmp	DWORD PTR _pVehicle$209631[ebp], 0
	jne	SHORT $LN3@ForceIntoP
$LN2@ForceIntoP:
	jmp	$LN5@ForceIntoP
$LN3@ForceIntoP:

; 877  : 		if(uiSeat > pVehicle->byteMaxPassengers) return;

	mov	eax, DWORD PTR _pVehicle$209631[ebp]
	movzx	ecx, BYTE PTR [eax+464]
	cmp	DWORD PTR _uiSeat$[ebp], ecx
	jbe	SHORT $LN1@ForceIntoP
	jmp	$LN5@ForceIntoP
$LN1@ForceIntoP:

; 878  : 
; 879  : 		pPed->byteAction = 50;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	BYTE PTR [eax+580], 50			; 00000032H

; 880  : 
; 881  : 		pVehicle->pPassengers[uiSeat-1] = pPed;

	mov	eax, DWORD PTR _uiSeat$[ebp]
	mov	ecx, DWORD PTR _pVehicle$209631[ebp]
	mov	edx, DWORD PTR _pPed$[ebp]
	mov	DWORD PTR [ecx+eax*4+424], edx

; 882  : 		uiPassengerOffset = 424 + (uiSeat * 4);

	mov	eax, DWORD PTR _uiSeat$[ebp]
	lea	ecx, DWORD PTR [eax*4+424]
	mov	DWORD PTR _uiPassengerOffset$209632[ebp], ecx

; 883  : 
; 884  : 		DWORD dwFunc = ADDR_ACTOR_PUT_IN_VEHICLE;

	mov	DWORD PTR _dwFunc$209636[ebp], 5008064	; 004c6ac0H

; 885  : 		_asm
; 886  : 		{
; 887  : 			mov     eax, pVehicle

	mov	eax, DWORD PTR _pVehicle$209631[ebp]

; 888  : 			add	    eax, uiPassengerOffset

	add	eax, DWORD PTR _uiPassengerOffset$209632[ebp]

; 889  : 			push    eax

	push	eax

; 890  : 			mov     eax, pVehicle

	mov	eax, DWORD PTR _pVehicle$209631[ebp]

; 891  : 			mov     ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 892  : 			call    dwFunc

	call	DWORD PTR _dwFunc$209636[ebp]

; 893  : 		}
; 894  : 
; 895  : 		dwFunc = ADDR_ACTOR_PUT_IN_VEHICLE;

	mov	DWORD PTR _dwFunc$209636[ebp], 5008064	; 004c6ac0H

; 896  : 		_asm
; 897  : 		{
; 898  : 			mov     ebx, pPed

	mov	ebx, DWORD PTR _pPed$[ebp]

; 899  : 			mov     eax, pVehicle

	mov	eax, DWORD PTR _pVehicle$209631[ebp]

; 900  : 			mov     [ebx+936], eax

	mov	DWORD PTR [ebx+936], eax

; 901  : 			lea     eax, [ebx+936]

	lea	eax, DWORD PTR [ebx+936]

; 902  : 			mov     ecx, [ebx+936]

	mov	ecx, DWORD PTR [ebx+936]

; 903  : 			push    eax

	push	eax

; 904  : 			call    dwFunc

	call	DWORD PTR _dwFunc$209636[ebp]

; 905  : 		}
; 906  : 
; 907  : 		pPed->byteIsInVehicle = 1;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	BYTE PTR [eax+940], 1

; 908  : 		pPed->physical.entity.nControlFlags2 &= 0xFE;

	mov	eax, DWORD PTR _pPed$[ebp]
	movzx	ecx, BYTE PTR [eax+81]
	and	ecx, 254				; 000000feH
	mov	edx, DWORD PTR _pPed$[ebp]
	mov	BYTE PTR [edx+81], cl

; 909  : 
; 910  : 		dwFunc = ADDR_VEHICLE_SET_DRIVER;

	mov	DWORD PTR _dwFunc$209636[ebp], 5317920	; 00512520H

; 911  : 		_asm
; 912  : 		{
; 913  : 			push 0

	push	0

; 914  : 			push pVehicle

	push	DWORD PTR _pVehicle$209631[ebp]

; 915  : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 916  : 			call dwFunc

	call	DWORD PTR _dwFunc$209636[ebp]
$LN5@ForceIntoP:

; 917  : 		}
; 918  : 	}
; 919  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ForceIntoPassengerSeat@CPlayerPed@@QAEXII@Z ENDP	; CPlayerPed::ForceIntoPassengerSeat
_TEXT	ENDS
EXTRN	?SetModelIndex@CEntity@@QAEXG@Z:PROC		; CEntity::SetModelIndex
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetModel@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_dwFunc$209648 = -44					; size = 4
_szModelName$209647 = -32				; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_iModel$ = 8						; size = 4
?SetModel@CPlayerPed@@QAEXH@Z PROC			; CPlayerPed::SetModel, COMDAT
; _this$ = ecx

; 924  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 925  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 926  : 
; 927  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN6@SetModel

; 928  : 	{
; 929  : 		if(iModel == 8 || iModel > 160)

	cmp	DWORD PTR _iModel$[ebp], 8
	je	SHORT $LN3@SetModel
	cmp	DWORD PTR _iModel$[ebp], 160		; 000000a0H
	jle	SHORT $LN4@SetModel
$LN3@SetModel:

; 930  : 		{
; 931  : 			// Invalid skin
; 932  : 			return;

	jmp	SHORT $LN6@SetModel
$LN4@SetModel:

; 933  : 		}
; 934  : 		
; 935  : 		if(iModel > 106)

	cmp	DWORD PTR _iModel$[ebp], 106		; 0000006aH
	jle	SHORT $LN2@SetModel

; 936  : 		{
; 937  : 			// Special model
; 938  : 			iModel -= 106;

	mov	eax, DWORD PTR _iModel$[ebp]
	sub	eax, 106				; 0000006aH
	mov	DWORD PTR _iModel$[ebp], eax

; 939  : 			
; 940  : 			char * szModelName = szSpecialActorModels[iModel];

	mov	eax, DWORD PTR _iModel$[ebp]
	shl	eax, 5
	add	eax, OFFSET ?szSpecialActorModels@@3PAY0CA@DA ; szSpecialActorModels
	mov	DWORD PTR _szModelName$209647[ebp], eax

; 941  : 
; 942  : 			DWORD dwFunc = FUNC_CPed__ResetSkin;

	mov	DWORD PTR _dwFunc$209648[ebp], 5173296	; 004ef030H

; 943  : 			_asm
; 944  : 			{
; 945  : 				push szModelName

	push	DWORD PTR _szModelName$209647[ebp]

; 946  : 				mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 947  : 				call dwFunc

	call	DWORD PTR _dwFunc$209648[ebp]

; 948  : 			}
; 949  : 
; 950  : 			dwFunc = ADDR_LOAD_REQUESTED_MODELS2;

	mov	DWORD PTR _dwFunc$209648[ebp], 4240880	; 0040b5f0H

; 951  : 			_asm
; 952  : 			{
; 953  : 				push 0

	push	0

; 954  : 				call dwFunc

	call	DWORD PTR _dwFunc$209648[ebp]

; 955  : 				add esp, 4

	add	esp, 4

; 956  : 			}
; 957  : 
; 958  : 			dwFunc = FUNC_CPed__Recreate;

	mov	DWORD PTR _dwFunc$209648[ebp], 5173200	; 004eefd0H

; 959  : 			_asm
; 960  : 			{
; 961  : 				mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 962  : 				call dwFunc

	call	DWORD PTR _dwFunc$209648[ebp]

; 963  : 			}
; 964  : 		}
; 965  : 		else

	jmp	SHORT $LN6@SetModel
$LN2@SetModel:

; 966  : 		{
; 967  : 			// default.ide number
; 968  : 			CEntity::SetModelIndex(iModel);

	movzx	eax, WORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetModelIndex@CEntity@@QAEXG@Z		; CEntity::SetModelIndex
$LN6@SetModel:

; 969  : 		}
; 970  : 	}
; 971  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetModel@CPlayerPed@@QAEXH@Z ENDP			; CPlayerPed::SetModel
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z
_TEXT	SEGMENT
_dwFunc$209658 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_pObjectiveEntity$ = 8					; size = 4
_objectiveType$ = 12					; size = 4
?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z PROC ; CPlayerPed::SetObjective, COMDAT
; _this$ = ecx

; 976  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 977  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 978  : 
; 979  : 	if(pPed/* && pObjectiveEntity*/)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@SetObjecti

; 980  : 	{
; 981  : 		DWORD dwFunc = FUNC_CPed__SetObjective;

	mov	DWORD PTR _dwFunc$209658[ebp], 5381904	; 00521f10H

; 982  : 		_asm
; 983  : 		{
; 984  : 			push pObjectiveEntity

	push	DWORD PTR _pObjectiveEntity$[ebp]

; 985  : 			push objectiveType

	push	DWORD PTR _objectiveType$[ebp]

; 986  : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 987  : 			call dwFunc

	call	DWORD PTR _dwFunc$209658[ebp]

; 988  : 			add esp, 4

	add	esp, 4
$LN2@SetObjecti:

; 989  : 		}
; 990  : 	}
; 991  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetObjective@CPlayerPed@@QAEXPAKW4eObjectiveType@@@Z ENDP ; CPlayerPed::SetObjective
_TEXT	ENDS
PUBLIC	?ClearObjective@CPlayerPed@@QAEXXZ		; CPlayerPed::ClearObjective
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearObjective@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwFunc$209665 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?ClearObjective@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::ClearObjective, COMDAT
; _this$ = ecx

; 996  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 997  : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 998  : 
; 999  : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN2@ClearObjec

; 1000 : 	{
; 1001 : 		DWORD dwFunc = FUNC_CPed__ClearObjective;

	mov	DWORD PTR _dwFunc$209665[ebp], 5379872	; 00521720H

; 1002 : 		_asm
; 1003 : 		{
; 1004 : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 1005 : 			call dwFunc

	call	DWORD PTR _dwFunc$209665[ebp]
$LN2@ClearObjec:

; 1006 : 		}
; 1007 : 	}
; 1008 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ClearObjective@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::ClearObjective
_TEXT	ENDS
PUBLIC	?RestartIfWastedAt@CPlayerPed@@QAEXPAUVector3@@M@Z ; CPlayerPed::RestartIfWastedAt
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RestartIfWastedAt@CPlayerPed@@QAEXPAUVector3@@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_vecRestart$ = 8					; size = 4
_fRotation$ = 12					; size = 4
?RestartIfWastedAt@CPlayerPed@@QAEXPAUVector3@@M@Z PROC	; CPlayerPed::RestartIfWastedAt, COMDAT
; _this$ = ecx

; 1013 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1014 : 	ScriptCommand(&restart_if_wasted_at, vecRestart->X, vecRestart->Y, vecRestart->Z, fRotation);

	fld	DWORD PTR _fRotation$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _vecRestart$[ebp]
	fld	DWORD PTR [eax+8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	ecx, DWORD PTR _vecRestart$[ebp]
	fld	DWORD PTR [ecx+4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	mov	edx, DWORD PTR _vecRestart$[ebp]
	fld	DWORD PTR [edx]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _restart_if_wasted_at
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 36					; 00000024H

; 1015 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?RestartIfWastedAt@CPlayerPed@@QAEXPAUVector3@@M@Z ENDP	; CPlayerPed::RestartIfWastedAt
_TEXT	ENDS
PUBLIC	?TogglePlayerControllable@CPlayerPed@@QAEXH@Z	; CPlayerPed::TogglePlayerControllable
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TogglePlayerControllable@CPlayerPed@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iControllable$ = 8					; size = 4
?TogglePlayerControllable@CPlayerPed@@QAEXH@Z PROC	; CPlayerPed::TogglePlayerControllable, COMDAT
; _this$ = ecx

; 1020 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1021 : 	ScriptCommand(&toggle_player_controllable, m_bytePlayerNumber, iControllable);

	mov	eax, DWORD PTR _iControllable$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET _toggle_player_controllable
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 1022 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?TogglePlayerControllable@CPlayerPed@@QAEXH@Z ENDP	; CPlayerPed::TogglePlayerControllable
_TEXT	ENDS
PUBLIC	?SetDead@CPlayerPed@@QAEXXZ			; CPlayerPed::SetDead
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetDead@CPlayerPed@@QAEXXZ
_TEXT	SEGMENT
_dwFunc$209681 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?SetDead@CPlayerPed@@QAEXXZ PROC			; CPlayerPed::SetDead, COMDAT
; _this$ = ecx

; 1027 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1028 : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 1029 : 
; 1030 : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN1@SetDead

; 1031 : 	{
; 1032 : 		pPed->fHealth = 0.0f;

	mov	eax, DWORD PTR _pPed$[ebp]
	fldz
	fstp	DWORD PTR [eax+852]

; 1033 : 		DWORD dwFunc = FUNC_CPed__SetDead;

	mov	DWORD PTR _dwFunc$209681[ebp], 5202992	; 004f6430H

; 1034 : 		_asm
; 1035 : 		{
; 1036 : 			mov ecx, pPed

	mov	ecx, DWORD PTR _pPed$[ebp]

; 1037 : 			call dwFunc

	call	DWORD PTR _dwFunc$209681[ebp]
$LN1@SetDead:

; 1038 : 		}
; 1039 : 	}
; 1040 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDead@CPlayerPed@@QAEXXZ ENDP			; CPlayerPed::SetDead
_TEXT	ENDS
PUBLIC	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
PUBLIC	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
PUBLIC	?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z ; CPlayerPed::FindDeathReasonAndResponsiblePlayer
EXTRN	?FindIDFromGtaPtr@CVehicleManager@@QAEEPAU_VEHICLE_TYPE@@@Z:PROC ; CVehicleManager::FindIDFromGtaPtr
EXTRN	?FindPlayerIDFromGtaPtr@CPlayerManager@@QAEEPAU_PED_TYPE@@@Z:PROC ; CPlayerManager::FindPlayerIDFromGtaPtr
EXTRN	?pNetowkManager@@3PAVCNetworkManager@@A:DWORD	; pNetowkManager
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z
_TEXT	SEGMENT
_pGtaVehicle$209718 = -92				; size = 4
_pGtaVehicle$209709 = -80				; size = 4
_pPlayerManager$209692 = -68				; size = 4
_pVehicleManager$209691 = -56				; size = 4
_playerIDWhoKilled$209690 = -41				; size = 1
_byteDeathReason$209689 = -29				; size = 1
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
_nPlayer$ = 8						; size = 4
?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z PROC ; CPlayerPed::FindDeathReasonAndResponsiblePlayer, COMDAT
; _this$ = ecx

; 1045 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 288				; 00000120H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-288]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1046 : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 1047 : 
; 1048 : 	if(pPed) {

	cmp	DWORD PTR _pPed$[ebp], 0
	je	$LN20@FindDeathR

; 1049 : 		BYTE byteDeathReason;
; 1050 : 		EntityId playerIDWhoKilled;
; 1051 : 		CVehicleManager *pVehicleManager;
; 1052 : 		CPlayerManager *pPlayerManager;
; 1053 : 
; 1054 : 		// grab the vehicle/player pool now anyway, even though we may not need it.
; 1055 : 		if(pNetowkManager) {

	cmp	DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A, 0 ; pNetowkManager
	je	SHORT $LN19@FindDeathR

; 1056 : 			pVehicleManager = pNetowkManager->GetVehicleManager();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ; CNetworkManager::GetVehicleManager
	mov	DWORD PTR _pVehicleManager$209691[ebp], eax

; 1057 : 			pPlayerManager = pNetowkManager->GetPlayerManager();

	mov	ecx, DWORD PTR ?pNetowkManager@@3PAVCNetworkManager@@A ; pNetowkManager
	call	?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ; CNetworkManager::GetPlayerManager
	mov	DWORD PTR _pPlayerManager$209692[ebp], eax

; 1058 : 		}
; 1059 : 		else { // just leave if there's no netgame.

	jmp	SHORT $LN18@FindDeathR
$LN19@FindDeathR:

; 1060 : 			*nPlayer = INVALID_ENTITY_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1061 : 			return INVALID_ENTITY_ID;

	or	al, 255					; 000000ffH
	jmp	$LN21@FindDeathR
$LN18@FindDeathR:

; 1062 : 		}
; 1063 : 
; 1064 : 		if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	$LN20@FindDeathR

; 1065 : 		{
; 1066 : 			byteDeathReason = (BYTE)pPed->dwWeaponUsed;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	cl, BYTE PTR [eax+1432]
	mov	BYTE PTR _byteDeathReason$209689[ebp], cl

; 1067 : 
; 1068 : 			if(byteDeathReason < WEAPON_CAMERA) { // It's a weapon of some sort.

	movzx	eax, BYTE PTR _byteDeathReason$209689[ebp]
	cmp	eax, 36					; 00000024H
	jge	SHORT $LN16@FindDeathR

; 1069 : 
; 1070 : 				if(pPed->pDamageEntity) { // check for a player pointer.

	mov	eax, DWORD PTR _pPed$[ebp]
	cmp	DWORD PTR [eax+1436], 0
	je	SHORT $LN15@FindDeathR

; 1071 : 					
; 1072 : 					playerIDWhoKilled = pPlayerManager->
; 1073 : 						FindPlayerIDFromGtaPtr((PED_TYPE *)pPed->pDamageEntity);

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+1436]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerManager$209692[ebp]
	call	?FindPlayerIDFromGtaPtr@CPlayerManager@@QAEEPAU_PED_TYPE@@@Z ; CPlayerManager::FindPlayerIDFromGtaPtr
	mov	BYTE PTR _playerIDWhoKilled$209690[ebp], al

; 1074 : 
; 1075 : 					if(playerIDWhoKilled != INVALID_ENTITY_ID) {

	movzx	eax, BYTE PTR _playerIDWhoKilled$209690[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN14@FindDeathR

; 1076 : 						// killed by another player with a weapon, this is all easy.
; 1077 : 						*nPlayer = playerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _playerIDWhoKilled$209690[ebp]
	mov	BYTE PTR [eax], cl

; 1078 : 						return byteDeathReason;

	mov	al, BYTE PTR _byteDeathReason$209689[ebp]
	jmp	$LN21@FindDeathR
$LN14@FindDeathR:

; 1079 : 					}
; 1080 : 				}
; 1081 : 				else { // weapon was used but who_killed is 0 (?)

	jmp	SHORT $LN13@FindDeathR
$LN15@FindDeathR:

; 1082 : 					*nPlayer = INVALID_ENTITY_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1083 : 					return INVALID_ENTITY_ID;

	or	al, 255					; 000000ffH
	jmp	$LN21@FindDeathR
$LN13@FindDeathR:

; 1084 : 				}

	jmp	$LN20@FindDeathR
$LN16@FindDeathR:

; 1085 : 			}
; 1086 : 			else if(byteDeathReason == WEAPON_DROWN) {

	movzx	eax, BYTE PTR _byteDeathReason$209689[ebp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN11@FindDeathR

; 1087 : 				*nPlayer = INVALID_ENTITY_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1088 : 				return WEAPON_DROWN;

	mov	al, 43					; 0000002bH
	jmp	$LN21@FindDeathR
	jmp	$LN20@FindDeathR
$LN11@FindDeathR:

; 1089 : 			}
; 1090 : 			else if(byteDeathReason == WEAPON_DRIVEBY) {

	movzx	eax, BYTE PTR _byteDeathReason$209689[ebp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN9@FindDeathR

; 1091 : 
; 1092 : 				if(pPed->pDamageEntity) {

	mov	eax, DWORD PTR _pPed$[ebp]
	cmp	DWORD PTR [eax+1436], 0
	je	SHORT $LN8@FindDeathR

; 1093 : 					// now, if we can find the vehicle
; 1094 : 					// we can probably derive the responsible player.
; 1095 : 					// Look in the vehicle pool for this vehicle.
; 1096 : 					if(pVehicleManager->FindIDFromGtaPtr((VEHICLE_TYPE *)pPed->pDamageEntity) != INVALID_ENTITY_ID)

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+1436]
	push	ecx
	mov	ecx, DWORD PTR _pVehicleManager$209691[ebp]
	call	?FindIDFromGtaPtr@CVehicleManager@@QAEEPAU_VEHICLE_TYPE@@@Z ; CVehicleManager::FindIDFromGtaPtr
	movzx	edx, al
	cmp	edx, 255				; 000000ffH
	je	SHORT $LN8@FindDeathR

; 1097 : 					{
; 1098 : 						VEHICLE_TYPE *pGtaVehicle = (VEHICLE_TYPE *)pPed->pDamageEntity;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+1436]
	mov	DWORD PTR _pGtaVehicle$209709[ebp], ecx

; 1099 : 
; 1100 : 						playerIDWhoKilled = pPlayerManager->
; 1101 : 							FindPlayerIDFromGtaPtr((PED_TYPE *)pGtaVehicle->pDriver);

	mov	eax, DWORD PTR _pGtaVehicle$209709[ebp]
	mov	ecx, DWORD PTR [eax+424]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerManager$209692[ebp]
	call	?FindPlayerIDFromGtaPtr@CPlayerManager@@QAEEPAU_PED_TYPE@@@Z ; CPlayerManager::FindPlayerIDFromGtaPtr
	mov	BYTE PTR _playerIDWhoKilled$209690[ebp], al

; 1102 : 												
; 1103 : 						if(playerIDWhoKilled != INVALID_ENTITY_ID) {

	movzx	eax, BYTE PTR _playerIDWhoKilled$209690[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN8@FindDeathR

; 1104 : 							*nPlayer = playerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _playerIDWhoKilled$209690[ebp]
	mov	BYTE PTR [eax], cl

; 1105 : 							return WEAPON_DRIVEBY;

	mov	al, 42					; 0000002aH
	jmp	SHORT $LN21@FindDeathR
$LN8@FindDeathR:

; 1106 : 						}
; 1107 : 					}									
; 1108 : 				}
; 1109 : 			}

	jmp	SHORT $LN20@FindDeathR
$LN9@FindDeathR:

; 1110 : 			else if(byteDeathReason == WEAPON_COLLISION) {

	movzx	eax, BYTE PTR _byteDeathReason$209689[ebp]
	cmp	eax, 39					; 00000027H
	jne	SHORT $LN20@FindDeathR

; 1111 : 
; 1112 : 				if(pPed->pDamageEntity) {

	mov	eax, DWORD PTR _pPed$[ebp]
	cmp	DWORD PTR [eax+1436], 0
	je	SHORT $LN20@FindDeathR

; 1113 : 					if(pVehicleManager->FindIDFromGtaPtr((VEHICLE_TYPE *)pPed->pDamageEntity) != INVALID_ENTITY_ID)

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+1436]
	push	ecx
	mov	ecx, DWORD PTR _pVehicleManager$209691[ebp]
	call	?FindIDFromGtaPtr@CVehicleManager@@QAEEPAU_VEHICLE_TYPE@@@Z ; CVehicleManager::FindIDFromGtaPtr
	movzx	edx, al
	cmp	edx, 255				; 000000ffH
	je	SHORT $LN20@FindDeathR

; 1114 : 					{
; 1115 : 						VEHICLE_TYPE *pGtaVehicle = (VEHICLE_TYPE *)pPed->pDamageEntity;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+1436]
	mov	DWORD PTR _pGtaVehicle$209718[ebp], ecx

; 1116 : 											
; 1117 : 						playerIDWhoKilled = pPlayerManager->
; 1118 : 							FindPlayerIDFromGtaPtr((PED_TYPE *)pGtaVehicle->pDriver);

	mov	eax, DWORD PTR _pGtaVehicle$209718[ebp]
	mov	ecx, DWORD PTR [eax+424]
	push	ecx
	mov	ecx, DWORD PTR _pPlayerManager$209692[ebp]
	call	?FindPlayerIDFromGtaPtr@CPlayerManager@@QAEEPAU_PED_TYPE@@@Z ; CPlayerManager::FindPlayerIDFromGtaPtr
	mov	BYTE PTR _playerIDWhoKilled$209690[ebp], al

; 1119 : 							
; 1120 : 						if(playerIDWhoKilled != INVALID_ENTITY_ID) {

	movzx	eax, BYTE PTR _playerIDWhoKilled$209690[ebp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN20@FindDeathR

; 1121 : 							*nPlayer = playerIDWhoKilled;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	cl, BYTE PTR _playerIDWhoKilled$209690[ebp]
	mov	BYTE PTR [eax], cl

; 1122 : 							return WEAPON_COLLISION;

	mov	al, 39					; 00000027H
	jmp	SHORT $LN21@FindDeathR
$LN20@FindDeathR:

; 1123 : 						}
; 1124 : 					}									
; 1125 : 				}
; 1126 : 			}
; 1127 : 		}
; 1128 : 	}
; 1129 : 
; 1130 : 	// Unhandled death type.
; 1131 : 	*nPlayer = INVALID_ENTITY_ID;

	mov	eax, DWORD PTR _nPlayer$[ebp]
	mov	BYTE PTR [eax], 255			; 000000ffH

; 1132 : 	return INVALID_ENTITY_ID;

	or	al, 255					; 000000ffH
$LN21@FindDeathR:

; 1133 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 288				; 00000120H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindDeathReasonAndResponsiblePlayer@CPlayerPed@@QAEEPAE@Z ENDP ; CPlayerPed::FindDeathReasonAndResponsiblePlayer
_TEXT	ENDS
PUBLIC	?GetPassengerSeat@CPlayerPed@@QAEEXZ		; CPlayerPed::GetPassengerSeat
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetPassengerSeat@CPlayerPed@@QAEEXZ
_TEXT	SEGMENT
_i$209731 = -41						; size = 1
_pVehicle$209728 = -32					; size = 4
_pPed$ = -20						; size = 4
_this$ = -8						; size = 4
?GetPassengerSeat@CPlayerPed@@QAEEXZ PROC		; CPlayerPed::GetPassengerSeat, COMDAT
; _this$ = ecx

; 1138 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 : 	PED_TYPE * pPed = (PED_TYPE *)GetEntity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetEntity@CEntity@@QAEPAU_ENTITY_TYPE@@XZ ; CEntity::GetEntity
	mov	DWORD PTR _pPed$[ebp], eax

; 1140 : 
; 1141 : 	if(pPed)

	cmp	DWORD PTR _pPed$[ebp], 0
	je	SHORT $LN6@GetPasseng

; 1142 : 	{
; 1143 : 		VEHICLE_TYPE * pVehicle = (VEHICLE_TYPE *)pPed->pVehicle;

	mov	eax, DWORD PTR _pPed$[ebp]
	mov	ecx, DWORD PTR [eax+936]
	mov	DWORD PTR _pVehicle$209728[ebp], ecx

; 1144 : 
; 1145 : 		if(pVehicle)

	cmp	DWORD PTR _pVehicle$209728[ebp], 0
	je	SHORT $LN6@GetPasseng

; 1146 : 		{
; 1147 : 			for(BYTE i = 0; i < pVehicle->byteMaxPassengers; i++)

	mov	BYTE PTR _i$209731[ebp], 0
	jmp	SHORT $LN4@GetPasseng
$LN3@GetPasseng:
	mov	al, BYTE PTR _i$209731[ebp]
	add	al, 1
	mov	BYTE PTR _i$209731[ebp], al
$LN4@GetPasseng:
	movzx	eax, BYTE PTR _i$209731[ebp]
	mov	ecx, DWORD PTR _pVehicle$209728[ebp]
	movzx	edx, BYTE PTR [ecx+464]
	cmp	eax, edx
	jge	SHORT $LN6@GetPasseng

; 1148 : 			{
; 1149 : 				if(pVehicle->pPassengers[i] == pPed)

	movzx	eax, BYTE PTR _i$209731[ebp]
	mov	ecx, DWORD PTR _pVehicle$209728[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+428]
	cmp	edx, DWORD PTR _pPed$[ebp]
	jne	SHORT $LN1@GetPasseng

; 1150 : 				{
; 1151 : 					return (i + 1);

	movzx	eax, BYTE PTR _i$209731[ebp]
	add	eax, 1
	jmp	SHORT $LN7@GetPasseng
$LN1@GetPasseng:

; 1152 : 				}
; 1153 : 			}

	jmp	SHORT $LN3@GetPasseng
$LN6@GetPasseng:

; 1154 : 		}
; 1155 : 	}
; 1156 : 
; 1157 : 	return 0;

	xor	al, al
$LN7@GetPasseng:

; 1158 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPassengerSeat@CPlayerPed@@QAEEXZ ENDP		; CPlayerPed::GetPassengerSeat
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\game\common.h
_TEXT	ENDS
;	COMDAT ??0Vector3@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Vector3@@QAE@XZ PROC					; Vector3::Vector3, COMDAT
; _this$ = ecx

; 34   : 	Vector3()

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   : 	{
; 36   : 		X = Y = Z = 0;

	mov	eax, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [eax+8]
	mov	ecx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	fldz
	fstp	DWORD PTR [edx]

; 37   : 	}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Vector3@@QAE@XZ ENDP					; Vector3::Vector3
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\game\cgame.h
_TEXT	ENDS
;	COMDAT ?GetCamera@CGame@@QAEPAVCCamera@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetCamera@CGame@@QAEPAVCCamera@@XZ PROC		; CGame::GetCamera, COMDAT
; _this$ = ecx

; 106  : 	CCamera     *GetCamera() {	return m_pInternalCamera; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCamera@CGame@@QAEPAVCCamera@@XZ ENDP		; CGame::GetCamera
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\vice-players-master\client\net\cnetworkmanager.h
_TEXT	ENDS
;	COMDAT ?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ PROC ; CNetworkManager::GetPlayerManager, COMDAT
; _this$ = ecx

; 79   : 	CPlayerManager * GetPlayerManager() { return m_pPlayerManager; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPlayerManager@CNetworkManager@@QAEPAVCPlayerManager@@XZ ENDP ; CNetworkManager::GetPlayerManager
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ PROC ; CNetworkManager::GetVehicleManager, COMDAT
; _this$ = ecx

; 80   : 	CVehicleManager * GetVehicleManager() { return m_pVehicleManager; };

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetVehicleManager@CNetworkManager@@QAEPAVCVehicleManager@@XZ ENDP ; CNetworkManager::GetVehicleManager
_TEXT	ENDS
END
