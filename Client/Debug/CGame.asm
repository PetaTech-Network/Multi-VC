; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\vice-players-master\Client\game\CGame.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	?byteDisableInput@@3PAEA			; byteDisableInput
PUBLIC	?byteEnableInput@@3PAEA				; byteEnableInput
CONST	SEGMENT
_fade	DW	016aH
	DB	'ii', 00H
	ORG $+10
	ORG $+1
_play_sound DW	018cH
	DB	'fffi', 00H
	ORG $+8
	ORG $+1
CONST	ENDS
_DATA	SEGMENT
?byteDisableInput@@3PAEA DB 0b8H			; byteDisableInput
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	0c3H
	ORG $+2
?byteEnableInput@@3PAEA DB 08bH				; byteEnableInput
	DB	04cH
	DB	024H
	DB	04H
	DB	08bH
	DB	054H
_DATA	ENDS
PUBLIC	?GameInstallPatches@@YAXXZ			; GameInstallPatches
PUBLIC	??0CGame@@QAE@XZ				; CGame::CGame
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?GameInstallHooks@@YAXXZ:PROC			; GameInstallHooks
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	?exc_handler@@YGJPAU_EXCEPTION_POINTERS@@@Z:PROC ; exc_handler
EXTRN	?GameAimSyncInit@@YAXXZ:PROC			; GameAimSyncInit
EXTRN	?GameKeyStatesInit@@YAXXZ:PROC			; GameKeyStatesInit
EXTRN	?InitPlayerPedPtrRecords@@YGXXZ:PROC		; InitPlayerPedPtrRecords
EXTRN	_memset:PROC
EXTRN	?Unprotect@@YAXKI@Z:PROC			; Unprotect
EXTRN	??0CCamera@@QAE@XZ:PROC				; CCamera::CCamera
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT xdata$x
; File d:\vice-players-master\client\game\cgame.cpp
xdata$x	SEGMENT
__unwindtable$??0CGame@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CGame@@QAE@XZ$0
__ehfuncinfo$??0CGame@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CGame@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0CGame@@QAE@XZ
_TEXT	SEGMENT
tv71 = -244						; size = 4
$T209550 = -236						; size = 4
$T209551 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0CGame@@QAE@XZ PROC					; CGame::CGame, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CGame@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 24   : 	m_pInternalCamera = new CCamera();

	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209551[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209551[ebp], 0
	je	SHORT $LN3@CGame
	mov	ecx, DWORD PTR $T209551[ebp]
	call	??0CCamera@@QAE@XZ			; CCamera::CCamera
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@CGame
$LN3@CGame:
	mov	DWORD PTR tv71[ebp], 0
$LN4@CGame:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T209550[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T209550[ebp]
	mov	DWORD PTR [ecx], edx

; 25   : 	m_pInternalPlayer = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 26   : 
; 27   : 	// Skip the logo and title screens
; 28   : 	Unprotect(0x5FFFAB, 1);

	push	1
	push	6291371					; 005fffabH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 29   : 	*(BYTE *)0x5FFFAB = 0x5;

	mov	BYTE PTR ds:6291371, 5

; 30   : 
; 31   : 	// Nop for the menu process game state hook
; 32   : 	Unprotect(0x6003B3, 0xA);

	push	10					; 0000000aH
	push	6292403					; 006003b3H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 33   : 	memset((PVOID)0x6003B3, 0x90, 0xA); // nop * 10

	push	10					; 0000000aH
	push	144					; 00000090H
	push	6292403					; 006003b3H
	call	_memset
	add	esp, 12					; 0000000cH

; 34   : 
; 35   : 	// Reset all player ped pointer records
; 36   : 	InitPlayerPedPtrRecords();

	call	?InitPlayerPedPtrRecords@@YGXXZ		; InitPlayerPedPtrRecords

; 37   : 
; 38   : 	// Reset all players keys
; 39   : 	GameKeyStatesInit();

	call	?GameKeyStatesInit@@YAXXZ		; GameKeyStatesInit

; 40   : 
; 41   : 	// Reset all players aim
; 42   : 	GameAimSyncInit();

	call	?GameAimSyncInit@@YAXXZ			; GameAimSyncInit

; 43   : 
; 44   : 	// Set the unhandled exception filter
; 45   : 	SetUnhandledExceptionFilter(exc_handler);

	mov	esi, esp
	push	OFFSET ?exc_handler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; exc_handler
	call	DWORD PTR __imp__SetUnhandledExceptionFilter@4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 46   : 	
; 47   : 	// Install all patches
; 48   : 	GameInstallPatches();

	call	?GameInstallPatches@@YAXXZ		; GameInstallPatches

; 49   : 
; 50   : 	// Install all hooks
; 51   : 	GameInstallHooks();

	call	?GameInstallHooks@@YAXXZ		; GameInstallHooks

; 52   : 
; 53   : 	m_bInputsEnabled = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 1

; 54   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CGame@@QAE@XZ$0:
	mov	eax, DWORD PTR $T209551[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CGame@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CGame@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CGame@@QAE@XZ ENDP					; CGame::CGame
PUBLIC	?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z	; CGame::NewPlayer
EXTRN	??0CPlayerPed@@QAE@HHMMMM@Z:PROC		; CPlayerPed::CPlayerPed
EXTRN	__fltused:DWORD
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z$0
__ehfuncinfo$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z
_TEXT	SEGMENT
tv77 = -256						; size = 4
$T209577 = -248						; size = 4
$T209578 = -236						; size = 4
_pPlayerNew$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_iSystemAddress$ = 8					; size = 4
_iModel$ = 12						; size = 4
_fPosX$ = 16						; size = 4
_fPosY$ = 20						; size = 4
_fPosZ$ = 24						; size = 4
_fRotation$ = 28					; size = 4
?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z PROC	; CGame::NewPlayer, COMDAT
; _this$ = ecx

; 61   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 62   : 	CPlayerPed *pPlayerNew = new CPlayerPed(iSystemAddress,iModel,fPosX,fPosY,fPosZ,fRotation);

	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209578[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209578[ebp], 0
	je	SHORT $LN3@NewPlayer
	push	ecx
	fld	DWORD PTR _fRotation$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fPosZ$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fPosY$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fPosX$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _iModel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iSystemAddress$[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T209578[ebp]
	call	??0CPlayerPed@@QAE@HHMMMM@Z		; CPlayerPed::CPlayerPed
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN4@NewPlayer
$LN3@NewPlayer:
	mov	DWORD PTR tv77[ebp], 0
$LN4@NewPlayer:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T209577[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T209577[ebp]
	mov	DWORD PTR _pPlayerNew$[ebp], eax

; 63   : 	return pPlayerNew;

	mov	eax, DWORD PTR _pPlayerNew$[ebp]

; 64   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z$0:
	mov	eax, DWORD PTR $T209578[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewPlayer@CGame@@QAEPAVCPlayerPed@@HHMMMM@Z ENDP	; CGame::NewPlayer
PUBLIC	?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z	; CGame::NewVehicle
EXTRN	??0CVehicle@@QAE@HMMMM@Z:PROC			; CVehicle::CVehicle
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z$0
__ehfuncinfo$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z
_TEXT	SEGMENT
tv76 = -256						; size = 4
$T209591 = -248						; size = 4
$T209592 = -236						; size = 4
_pVehicleNew$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_iType$ = 8						; size = 4
_fPosX$ = 12						; size = 4
_fPosY$ = 16						; size = 4
_fPosZ$ = 20						; size = 4
_fRotation$ = 24					; size = 4
?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z PROC		; CGame::NewVehicle, COMDAT
; _this$ = ecx

; 70   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 61					; 0000003dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 71   : 	CVehicle *pVehicleNew = new	CVehicle(iType,fPosX,fPosY,fPosZ,fRotation);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T209592[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T209592[ebp], 0
	je	SHORT $LN3@NewVehicle
	push	ecx
	fld	DWORD PTR _fRotation$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fPosZ$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fPosY$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _fPosX$[ebp]
	fstp	DWORD PTR [esp]
	mov	eax, DWORD PTR _iType$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T209592[ebp]
	call	??0CVehicle@@QAE@HMMMM@Z		; CVehicle::CVehicle
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@NewVehicle
$LN3@NewVehicle:
	mov	DWORD PTR tv76[ebp], 0
$LN4@NewVehicle:
	mov	ecx, DWORD PTR tv76[ebp]
	mov	DWORD PTR $T209591[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T209591[ebp]
	mov	DWORD PTR _pVehicleNew$[ebp], edx

; 72   : 	return pVehicleNew;

	mov	eax, DWORD PTR _pVehicleNew$[ebp]

; 73   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z$0:
	mov	eax, DWORD PTR $T209592[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?NewVehicle@CGame@@QAEPAVCVehicle@@HMMMM@Z ENDP		; CGame::NewVehicle
PUBLIC	?GetWeaponModelFromWeapon@CGame@@QAEHH@Z	; CGame::GetWeaponModelFromWeapon
EXTRN	?GameGetWeaponModelFromWeapon@@YGHH@Z:PROC	; GameGetWeaponModelFromWeapon
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetWeaponModelFromWeapon@CGame@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iWeaponID$ = 8						; size = 4
?GetWeaponModelFromWeapon@CGame@@QAEHH@Z PROC		; CGame::GetWeaponModelFromWeapon, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   : 	return GameGetWeaponModelFromWeapon(iWeaponID);

	mov	eax, DWORD PTR _iWeaponID$[ebp]
	push	eax
	call	?GameGetWeaponModelFromWeapon@@YGHH@Z	; GameGetWeaponModelFromWeapon

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetWeaponModelFromWeapon@CGame@@QAEHH@Z ENDP		; CGame::GetWeaponModelFromWeapon
_TEXT	ENDS
PUBLIC	?ToggleKeyInputsDisabled@CGame@@QAEXH@Z		; CGame::ToggleKeyInputsDisabled
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ToggleKeyInputsDisabled@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bDisable$ = 8						; size = 4
?ToggleKeyInputsDisabled@CGame@@QAEXH@Z PROC		; CGame::ToggleKeyInputsDisabled, COMDAT
; _this$ = ecx

; 88   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 89   : 	Unprotect(0x602510, 6);

	push	6
	push	6300944					; 00602510H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 90   : 
; 91   : 	if(bDisable)

	cmp	DWORD PTR _bDisable$[ebp], 0
	je	SHORT $LN2@ToggleKeyI

; 92   : 	{
; 93   : 		memcpy((PVOID)0x602510, byteDisableInput, 6);

	push	6
	push	OFFSET ?byteDisableInput@@3PAEA		; byteDisableInput
	push	6300944					; 00602510H
	call	_memcpy
	add	esp, 12					; 0000000cH

; 94   : 	}
; 95   : 	else

	jmp	SHORT $LN3@ToggleKeyI
$LN2@ToggleKeyI:

; 96   : 	{
; 97   : 		memcpy((PVOID)0x602510, byteEnableInput, 6);

	push	6
	push	OFFSET ?byteEnableInput@@3PAEA		; byteEnableInput
	push	6300944					; 00602510H
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@ToggleKeyI:

; 98   : 	}
; 99   : 
; 100  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleKeyInputsDisabled@CGame@@QAEXH@Z ENDP		; CGame::ToggleKeyInputsDisabled
_TEXT	ENDS
PUBLIC	??_C@_07CDHCGPKI@ldvcmp0?$AA@			; `string'
EXTRN	_strcpy:PROC
;	COMDAT ??_C@_07CDHCGPKI@ldvcmp0?$AA@
CONST	SEGMENT
??_C@_07CDHCGPKI@ldvcmp0?$AA@ DB 'ldvcmp0', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?GameInstallPatches@@YAXXZ
_TEXT	SEGMENT
?GameInstallPatches@@YAXXZ PROC				; GameInstallPatches, COMDAT

; 105  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 106  : 	// Patch to prevent game stopping during a pause
; 107  : 	// (Credits to Luke)
; 108  : 	Unprotect(0x4A3DF7, 5);

	push	5
	push	4865527					; 004a3df7H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 109  : 	memset((PVOID)0x4A3DF7, 0x90, 5); // nop * 5

	push	5
	push	144					; 00000090H
	push	4865527					; 004a3df7H
	call	_memset
	add	esp, 12					; 0000000cH

; 110  : 
; 111  : 	// Patch for GetPlayerTableFromPlayerActor()
; 112  : 	Unprotect(0x531D40, 8);

	push	8
	push	5446976					; 00531d40H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 113  : 	memset((PVOID)0x531D40, 0x90, 8); // nop * 8

	push	8
	push	144					; 00000090H
	push	5446976					; 00531d40H
	call	_memset
	add	esp, 12					; 0000000cH

; 114  : 
; 115  : 	// Patch for SetCurrentWeapon fixes fucking FindPlayerPed shit.4FF970
; 116  : 	Unprotect(0x4FF970, 1);

	push	1
	push	5241200					; 004ff970H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 117  : 	*(BYTE *)0x4FF970 = 0x9D; // turns mov [eax+.. to mov [ebp+..

	mov	BYTE PTR ds:5241200, 157		; 0000009dH

; 118  : 
; 119  : 	/* Player weapon pickups.
; 120  : 	Unprotect(0x4F6538, 1);
; 121  : 	*(BYTE *)0x4F6538 = 0x75; */
; 122  : 
; 123  : 	// Patch CUserDisplay::Process() to not call CPlacename::Process()
; 124  : 	Unprotect(0x4D1405, 5);

	push	5
	push	5051397					; 004d1405H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 125  : 	memset((PVOID)0x4D1405, 0x90, 5); // nop * 5

	push	5
	push	144					; 00000090H
	push	5051397					; 004d1405H
	call	_memset
	add	esp, 12					; 0000000cH

; 126  : 
; 127  : 	// Patch CPed::RefreshSkin() so that it doesn't try to set any
; 128  : 	// animations 50D96A
; 129  : 	Unprotect(0x50D96A, 5);

	push	5
	push	5298538					; 0050d96aH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 130  : 	memset((PVOID)0x50D96A, 0x90, 5); // nop * 5

	push	5
	push	144					; 00000090H
	push	5298538					; 0050d96aH
	call	_memset
	add	esp, 12					; 0000000cH

; 131  : 
; 132  : 	// Patch clear weapons to not set armed weapon to fists.4FF767
; 133  : 	Unprotect(0x4FF767, 7);

	push	7
	push	5240679					; 004ff767H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 134  : 	memset((PVOID)0x4FF767, 0x90, 7); // nop * 7

	push	7
	push	144					; 00000090H
	push	5240679					; 004ff767H
	call	_memset
	add	esp, 12					; 0000000cH

; 135  : 
; 136  : 	/* DoDriveByShootings CWeapon::Update call. 5C9817
; 137  : 	VirtualProtect((PVOID)0x5C9817,8,PAGE_EXECUTE_READWRITE,&dwVP);
; 138  : 	memset((PVOID)0x5C9817,0x90,8); // nop * 8
; 139  : 	VirtualProtect((PVOID)0x5C9817,8,dwVP,&dwVP2);*/
; 140  : 
; 141  : 	// Patch to modify the loadsc0 txd
; 142  : 	Unprotect(0x6D5E9C, 16);

	push	16					; 00000010H
	push	7167644					; 006d5e9cH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 143  : 	strcpy((PCHAR)0x6D5E9C, "ldvcmp0");

	push	OFFSET ??_C@_07CDHCGPKI@ldvcmp0?$AA@
	push	7167644					; 006d5e9cH
	call	_strcpy
	add	esp, 8

; 144  : 	Unprotect(0x68E594, 16);

	push	16					; 00000010H
	push	6874516					; 0068e594H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 145  : 	strcpy((PCHAR)0x68E594, "ldvcmp0");

	push	OFFSET ??_C@_07CDHCGPKI@ldvcmp0?$AA@
	push	6874516					; 0068e594H
	call	_strcpy
	add	esp, 8

; 146  : 	Unprotect(0x68E6F4, 16);

	push	16					; 00000010H
	push	6874868					; 0068e6f4H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 147  : 	strcpy((PCHAR)0x68E6F4, "ldvcmp0");

	push	OFFSET ??_C@_07CDHCGPKI@ldvcmp0?$AA@
	push	6874868					; 0068e6f4H
	call	_strcpy
	add	esp, 8

; 148  : 
; 149  : 	// Patch to increase vehicle pool limit from 110 to 200
; 150  : 	Unprotect(0x4C02E4, 128); // 128, wtf?

	push	128					; 00000080H
	push	4981476					; 004c02e4H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 151  : 	*(BYTE *)0x4C02E4 = 0x6A;

	mov	BYTE PTR ds:4981476, 106		; 0000006aH

; 152  : 	*(BYTE *)0x4C02E5 = 0x00; // push 0 (unused param)

	mov	BYTE PTR ds:4981477, 0

; 153  : 	*(BYTE *)0x4C02E6 = 0x68;

	mov	BYTE PTR ds:4981478, 104		; 00000068H

; 154  : 	*(BYTE *)0x4C02E7 = 0xC8;

	mov	BYTE PTR ds:4981479, 200		; 000000c8H

; 155  : 	*(BYTE *)0x4C02E8 = 0x00;

	mov	BYTE PTR ds:4981480, 0

; 156  : 	*(BYTE *)0x4C02E9 = 0x00;

	mov	BYTE PTR ds:4981481, 0

; 157  : 	*(BYTE *)0x4C02EA = 0x00; // push 200

	mov	BYTE PTR ds:4981482, 0

; 158  : 
; 159  : 	// Patch for cAudioManager::GetPedCommentSfx() 5EA1FC
; 160  : 	Unprotect(0x5EA1FC, 1);

	push	1
	push	6201852					; 005ea1fcH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 161  : 	*(BYTE *)0x5EA1FC = 0x75; // jnz

	mov	BYTE PTR ds:6201852, 117		; 00000075H

; 162  : 
; 163  : 	/* ProcessVehicleOneShots (Reverse logic for CPed::IsPlayer())
; 164  : 	VirtualProtect((PVOID)0x5EB6CD,1,PAGE_EXECUTE_READWRITE,&dwVP);
; 165  : 	*(BYTE *)0x5EB6CD = 0x85; // jnz
; 166  : 	VirtualProtect((PVOID)0x5EB6CD,1,dwVP,&dwVP2);*/
; 167  : 
; 168  : 	// For passenger engine audio hack (applied later).
; 169  : 	Unprotect(0x5F2175, 2);

	push	2
	push	6234485					; 005f2175H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 170  : 
; 171  : 	// For 537723 bug (not checking in vehicle)
; 172  : 	Unprotect(0x537723, 2);

	push	2
	push	5469987					; 00537723H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 173  : 	*(BYTE *)0x537723 = 0x90;

	mov	BYTE PTR ds:5469987, 144		; 00000090H

; 174  : 	*(BYTE *)0x537724 = 0x90;

	mov	BYTE PTR ds:5469988, 144		; 00000090H

; 175  : 
; 176  : 	// For Bike/Passenger bug (test driver for 0)
; 177  : 	Unprotect(0x5C91F5, 4);

	push	4
	push	6066677					; 005c91f5H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 178  : 	*(BYTE *)0x5C91F5 = 0x85;

	mov	BYTE PTR ds:6066677, 133		; 00000085H

; 179  : 	*(BYTE *)0x5C91F6 = 0xC9; // test eax, eax to test ecx, ecx

	mov	BYTE PTR ds:6066678, 201		; 000000c9H

; 180  : 	*(BYTE *)0x5C91F8 = 0x09; // jz +9 - exit if 0

	mov	BYTE PTR ds:6066680, 9

; 181  : 
; 182  : 	// For Boat driveby bug (test driver for 0)
; 183  : 	Unprotect(0x5C9558, 4);

	push	4
	push	6067544					; 005c9558H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 184  : 	*(BYTE *)0x5C9558 = 0x85;

	mov	BYTE PTR ds:6067544, 133		; 00000085H

; 185  : 	*(BYTE *)0x5C9559 = 0xC9; // test eax, eax to test ecx, ecx

	mov	BYTE PTR ds:6067545, 201		; 000000c9H

; 186  : 	*(BYTE *)0x5C955B = 0x09; // jz +9 - exit if 0

	mov	BYTE PTR ds:6067547, 9

; 187  : 
; 188  : 	// Hack to prevent replays.
; 189  : 	Unprotect(0x4A45C3, 5);

	push	5
	push	4867523					; 004a45c3H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 190  : 	memset((PVOID)0x4A45C3, 0x90, 5); // nop * 5

	push	5
	push	144					; 00000090H
	push	4867523					; 004a45c3H
	call	_memset
	add	esp, 12					; 0000000cH

; 191  : 
; 192  : 	// Hack to get rid of the evasive dive.
; 193  : 	Unprotect(0x4F6A20, 3);

	push	3
	push	5204512					; 004f6a20H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 194  : 	*(BYTE *)0x4F6A20 = 0xC2;

	mov	BYTE PTR ds:5204512, 194		; 000000c2H

; 195  : 	*(BYTE *)0x4F6A21 = 0x08;

	mov	BYTE PTR ds:5204513, 8

; 196  : 	*(BYTE *)0x4F6A22 = 0x00;

	mov	BYTE PTR ds:5204514, 0

; 197  : 
; 198  : 	// Hack to get rid of the weapon pickup message (Tab)
; 199  : 	Unprotect(0x440B2C, 5);

	push	5
	push	4459308					; 00440b2cH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 200  : 	memset((PVOID)0x440B2C, 0x90, 5); // nop * 5

	push	5
	push	144					; 00000090H
	push	4459308					; 00440b2cH
	call	_memset
	add	esp, 12					; 0000000cH

; 201  : 
; 202  : 	// Don't load the main scm
; 203  : 	Unprotect(0x4506D1, 2);

	push	2
	push	4523729					; 004506d1H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 204  : 	*(BYTE *)0x4506D1 = 0xEB; // jmp

	mov	BYTE PTR ds:4523729, 235		; 000000ebH

; 205  : 	*(BYTE *)0x4506D2 = 0x41; // +41h

	mov	BYTE PTR ds:4523730, 65			; 00000041H

; 206  : 
; 207  : 	// Disable CPopulation::AddPed
; 208  : 	Unprotect(0x53B600, 3);

	push	3
	push	5486080					; 0053b600H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 209  : 	*(BYTE *)0x53B600 = 0x31; // xor

	mov	BYTE PTR ds:5486080, 49			; 00000031H

; 210  : 	*(BYTE *)0x53B601 = 0xC0; // eax, eax

	mov	BYTE PTR ds:5486081, 192		; 000000c0H

; 211  : 	*(BYTE *)0x53B602 = 0xC3; // retn

	mov	BYTE PTR ds:5486082, 195		; 000000c3H

; 212  : 
; 213  : 	// Stop time advancing on death
; 214  : 	Unprotect(0x42BD69, 15);

	push	15					; 0000000fH
	push	4373865					; 0042bd69H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 215  : 	memset((PVOID)0x42BD69, 0x90, 15); // nop * 15

	push	15					; 0000000fH
	push	144					; 00000090H
	push	4373865					; 0042bd69H
	call	_memset
	add	esp, 12					; 0000000cH

; 216  : 
; 217  : 	// Shorten island loading time
; 218  : 	Unprotect(0x40DFE4, 0xA);

	push	10					; 0000000aH
	push	4251620					; 0040dfe4H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 219  : 	memset((PVOID)0x40DFE4, 0x90, 0xA); // nop * 10

	push	10					; 0000000aH
	push	144					; 00000090H
	push	4251620					; 0040dfe4H
	call	_memset
	add	esp, 12					; 0000000cH

; 220  : 	Unprotect(0x40DFF4, 0x38);

	push	56					; 00000038H
	push	4251636					; 0040dff4H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 221  : 	memset((PVOID)0x40DFF4, 0x90, 0x38); // nop * 56

	push	56					; 00000038H
	push	144					; 00000090H
	push	4251636					; 0040dff4H
	call	_memset
	add	esp, 12					; 0000000cH

; 222  : 
; 223  : 	// Disable taxi cash
; 224  : 	Unprotect(0x5B8AB6, 1);

	push	1
	push	5999286					; 005b8ab6H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 225  : 	*(BYTE *)0x5B8AB6 = 0;

	mov	BYTE PTR ds:5999286, 0

; 226  : 
; 227  : 	// Disable golf clubs from caddys
; 228  : 	Unprotect(0x5B89C0, 1);

	push	1
	push	5999040					; 005b89c0H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 229  : 	*(BYTE *)0x5B89C0 = 0xEB;

	mov	BYTE PTR ds:5999040, 235		; 000000ebH

; 230  : 
; 231  : 	// Disable shotguns from police cars
; 232  : 	Unprotect(0x5B895F, 1);

	push	1
	push	5998943					; 005b895fH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 233  : 	*(BYTE *)0x5B895F = 0xEB;

	mov	BYTE PTR ds:5998943, 235		; 000000ebH

; 234  : 
; 235  : 	// Disable health increases from vehicle model 146 (ambulance?)
; 236  : 	Unprotect(0x5B8A4B, 2);

	push	2
	push	5999179					; 005b8a4bH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 237  : 	memset((PVOID)0x5B8A4B, 0x90, 2); // nop * 2

	push	2
	push	144					; 00000090H
	push	5999179					; 005b8a4bH
	call	_memset
	add	esp, 12					; 0000000cH

; 238  : 
; 239  : 	// Disable armour increases from vehicle model 157 (enforcer?)
; 240  : 	Unprotect(0x5B8A5A, 6);

	push	6
	push	5999194					; 005b8a5aH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 241  : 	memset((PVOID)0x5B8A5A, 0x90, 6);

	push	6
	push	144					; 00000090H
	push	5999194					; 005b8a5aH
	call	_memset
	add	esp, 12					; 0000000cH

; 242  : 
; 243  : 	// Disable menu after alt + tab
; 244  : 	Unprotect(0x4A4FFC, 7);

	push	7
	push	4870140					; 004a4ffcH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 245  : 	memset((PVOID)0x4A4FFC, 0x90, 7); // nop * 7

	push	7
	push	144					; 00000090H
	push	4870140					; 004a4ffcH
	call	_memset
	add	esp, 12					; 0000000cH

; 246  : 
; 247  : 	// Allow camera movement in vehicles (Test)
; 248  : 	Unprotect(0x4A45FA, 5);

	push	5
	push	4867578					; 004a45faH
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 249  : 	*(DWORD *)0x4A45FA = 0x9090C030; // xor al, al, nop nop

	mov	DWORD PTR ds:4867578, -1869561808	; 9090c030H

; 250  : 	*(BYTE *)(0x4A45FA + 4) = 0x90;  // nop

	mov	BYTE PTR ds:4867582, 144		; 00000090H

; 251  : 	Unprotect(0x4A4601, 1);

	push	1
	push	4867585					; 004a4601H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 252  : 	*(BYTE *)0x4A4601 = 0x75; // jz to jnz

	mov	BYTE PTR ds:4867585, 117		; 00000075H

; 253  : 
; 254  : 	// Disable plane traffic
; 255  : 	Unprotect(0x4A4515, 5);

	push	5
	push	4867349					; 004a4515H
	call	?Unprotect@@YAXKI@Z			; Unprotect
	add	esp, 8

; 256  : 	memset((PVOID)0x4A4515, 0x90, 5); // nop * 5

	push	5
	push	144					; 00000090H
	push	4867349					; 004a4515H
	call	_memset
	add	esp, 12					; 0000000cH

; 257  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GameInstallPatches@@YAXXZ ENDP				; GameInstallPatches
_TEXT	ENDS
PUBLIC	?StartGame@CGame@@QAEXXZ			; CGame::StartGame
EXTRN	?GameToggleCheatCodes@@YGX_N@Z:PROC		; GameToggleCheatCodes
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StartGame@CGame@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?StartGame@CGame@@QAEXXZ PROC				; CGame::StartGame, COMDAT
; _this$ = ecx

; 262  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 263  : 	GameToggleCheatCodes(false);

	push	0
	call	?GameToggleCheatCodes@@YGX_N@Z		; GameToggleCheatCodes

; 264  : 
; 265  : 	*(DWORD *)VAR_Menu__IsActive = 0;

	mov	DWORD PTR ds:8820328, 0

; 266  : 	*(DWORD *)VAR_Menu__StartGame = 1;

	mov	DWORD PTR ds:8820289, 1

; 267  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?StartGame@CGame@@QAEXXZ ENDP				; CGame::StartGame
_TEXT	ENDS
PUBLIC	?IsMenuActive@CGame@@QAEHXZ			; CGame::IsMenuActive
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsMenuActive@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?IsMenuActive@CGame@@QAEHXZ PROC			; CGame::IsMenuActive, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  : 	return *(BOOL *)VAR_Menu__IsActive;

	mov	eax, DWORD PTR ds:8820328

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?IsMenuActive@CGame@@QAEHXZ ENDP			; CGame::IsMenuActive
_TEXT	ENDS
PUBLIC	?CheckModel@@YAHH@Z				; CheckModel
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckModel@@YAHH@Z
_TEXT	SEGMENT
_dwUnknown$209363 = -8					; size = 4
_iModelID$ = 8						; size = 4
?CheckModel@@YAHH@Z PROC				; CheckModel, COMDAT

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 280  : 	if(iModelID < 0) {

	cmp	DWORD PTR _iModelID$[ebp], 0
	jge	SHORT $LN1@CheckModel

; 281  : 		DWORD * dwUnknown = (DWORD *)0x7D1DE0;

	mov	DWORD PTR _dwUnknown$209363[ebp], 8199648 ; 007d1de0H

; 282  : 		return dwUnknown[-7 * iModelID];

	mov	eax, DWORD PTR _iModelID$[ebp]
	imul	eax, -7					; fffffff9H
	mov	ecx, DWORD PTR _dwUnknown$209363[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN2@CheckModel
$LN1@CheckModel:

; 283  : 	}
; 284  : 	return iModelID;

	mov	eax, DWORD PTR _iModelID$[ebp]
$LN2@CheckModel:

; 285  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckModel@@YAHH@Z ENDP				; CheckModel
_TEXT	ENDS
PUBLIC	?RequestModel@CGame@@QAEXH@Z			; CGame::RequestModel
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RequestModel@CGame@@QAEXH@Z
_TEXT	SEGMENT
_dwFunc$ = -44						; size = 4
_dwFlags$ = -32						; size = 4
_dwModelID$ = -20					; size = 4
_this$ = -8						; size = 4
_iModelID$ = 8						; size = 4
?RequestModel@CGame@@QAEXH@Z PROC			; CGame::RequestModel, COMDAT
; _this$ = ecx

; 290  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 291  : 	DWORD dwModelID = CheckModel(iModelID);

	mov	eax, DWORD PTR _iModelID$[ebp]
	push	eax
	call	?CheckModel@@YAHH@Z			; CheckModel
	add	esp, 4
	mov	DWORD PTR _dwModelID$[ebp], eax

; 292  : 	DWORD dwFlags = 0x16;

	mov	DWORD PTR _dwFlags$[ebp], 22		; 00000016H

; 293  : 	DWORD dwFunc = FUNC_RequestModel;

	mov	DWORD PTR _dwFunc$[ebp], 4252432	; 0040e310H

; 294  : 	_asm
; 295  : 	{
; 296  : 		push dwFlags

	push	DWORD PTR _dwFlags$[ebp]

; 297  : 		push dwModelID

	push	DWORD PTR _dwModelID$[ebp]

; 298  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 299  : 		add esp, 8

	add	esp, 8

; 300  : 	}
; 301  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?RequestModel@CGame@@QAEXH@Z ENDP			; CGame::RequestModel
_TEXT	ENDS
PUBLIC	?LoadRequestedModels@CGame@@QAEXXZ		; CGame::LoadRequestedModels
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?LoadRequestedModels@CGame@@QAEXXZ
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_this$ = -8						; size = 4
?LoadRequestedModels@CGame@@QAEXXZ PROC			; CGame::LoadRequestedModels, COMDAT
; _this$ = ecx

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 307  : 	DWORD dwFunc = FUNC_LoadRequestedModels;

	mov	DWORD PTR _dwFunc$[ebp], 4240880	; 0040b5f0H

; 308  : 	_asm
; 309  : 	{
; 310  : 		push 0

	push	0

; 311  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 312  : 		add esp, 4

	add	esp, 4

; 313  : 	}
; 314  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadRequestedModels@CGame@@QAEXXZ ENDP			; CGame::LoadRequestedModels
_TEXT	ENDS
PUBLIC	?IsModelLoaded@CGame@@QAEHH@Z			; CGame::IsModelLoaded
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsModelLoaded@CGame@@QAEHH@Z
_TEXT	SEGMENT
_byteModelInfo$ = -32					; size = 4
_dwModelID$ = -20					; size = 4
_this$ = -8						; size = 4
_iModelID$ = 8						; size = 4
?IsModelLoaded@CGame@@QAEHH@Z PROC			; CGame::IsModelLoaded, COMDAT
; _this$ = ecx

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 320  : 	DWORD dwModelID = CheckModel(iModelID);

	mov	eax, DWORD PTR _iModelID$[ebp]
	push	eax
	call	?CheckModel@@YAHH@Z			; CheckModel
	add	esp, 4
	mov	DWORD PTR _dwModelID$[ebp], eax

; 321  : 	BYTE * byteModelInfo = (BYTE *)VAR_ModelInfo;

	mov	DWORD PTR _byteModelInfo$[ebp], 9756120	; 0094ddd8H

; 322  : 	if(byteModelInfo[20 * dwModelID] == 1) {

	mov	eax, DWORD PTR _dwModelID$[ebp]
	imul	eax, 20					; 00000014H
	mov	ecx, DWORD PTR _byteModelInfo$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 1
	jne	SHORT $LN2@IsModelLoa

; 323  : 		return TRUE;

	mov	eax, 1
	jmp	SHORT $LN3@IsModelLoa

; 324  : 	} else {

	jmp	SHORT $LN3@IsModelLoa
$LN2@IsModelLoa:

; 325  : 		return FALSE;

	xor	eax, eax
$LN3@IsModelLoa:

; 326  : 	}
; 327  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsModelLoaded@CGame@@QAEHH@Z ENDP			; CGame::IsModelLoaded
_TEXT	ENDS
PUBLIC	?DisplayHud@CGame@@QAEXH@Z			; CGame::DisplayHud
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DisplayHud@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bSwitch$ = 8						; size = 4
?DisplayHud@CGame@@QAEXH@Z PROC				; CGame::DisplayHud, COMDAT
; _this$ = ecx

; 332  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 333  : 	if(bSwitch)

	cmp	DWORD PTR _bSwitch$[ebp], 0
	je	SHORT $LN2@DisplayHud

; 334  : 		*(BYTE *)ADDR_HUD_SWITCH = 1;

	mov	BYTE PTR ds:10554181, 1

; 335  :     else

	jmp	SHORT $LN3@DisplayHud
$LN2@DisplayHud:

; 336  : 		*(BYTE *)ADDR_HUD_SWITCH = 0;

	mov	BYTE PTR ds:10554181, 0
$LN3@DisplayHud:

; 337  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DisplayHud@CGame@@QAEXH@Z ENDP				; CGame::DisplayHud
_TEXT	ENDS
PUBLIC	?ToggleHud@CGame@@QAEX_N@Z			; CGame::ToggleHud
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ToggleHud@CGame@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bToggle$ = 8						; size = 1
?ToggleHud@CGame@@QAEX_N@Z PROC				; CGame::ToggleHud, COMDAT
; _this$ = ecx

; 342  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 343  : 	*(bool *)VAR_Menu__HudMode = bToggle;

	mov	al, BYTE PTR _bToggle$[ebp]
	mov	BYTE PTR ds:8820282, al

; 344  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleHud@CGame@@QAEX_N@Z ENDP				; CGame::ToggleHud
_TEXT	ENDS
PUBLIC	?HideRadar@CGame@@QAEX_N@Z			; CGame::HideRadar
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?HideRadar@CGame@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bToggle$ = 8						; size = 1
?HideRadar@CGame@@QAEX_N@Z PROC				; CGame::HideRadar, COMDAT
; _this$ = ecx

; 349  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 350  : 	*(bool *)ADDR_Toggle_Radar = bToggle;

	mov	al, BYTE PTR _bToggle$[ebp]
	mov	BYTE PTR ds:10554038, al

; 351  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?HideRadar@CGame@@QAEX_N@Z ENDP				; CGame::HideRadar
_TEXT	ENDS
PUBLIC	?ToggleFrameLimiterState@CGame@@QAEXH@Z		; CGame::ToggleFrameLimiterState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ToggleFrameLimiterState@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bState$ = 8						; size = 4
?ToggleFrameLimiterState@CGame@@QAEXH@Z PROC		; CGame::ToggleFrameLimiterState, COMDAT
; _this$ = ecx

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 357  : 	if(bState) {

	cmp	DWORD PTR _bState$[ebp], 0
	je	SHORT $LN2@ToggleFram

; 358  : 		*(BYTE *)VAR_Menu__FrameLimiter = 1;

	mov	BYTE PTR ds:8820309, 1

; 359  : 	} else {

	jmp	SHORT $LN3@ToggleFram
$LN2@ToggleFram:

; 360  : 		*(BYTE *)VAR_Menu__FrameLimiter = 0;

	mov	BYTE PTR ds:8820309, 0
$LN3@ToggleFram:

; 361  : 	}
; 362  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?ToggleFrameLimiterState@CGame@@QAEXH@Z ENDP		; CGame::ToggleFrameLimiterState
_TEXT	ENDS
PUBLIC	?GetFrameLimiterState@CGame@@QAEHXZ		; CGame::GetFrameLimiterState
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetFrameLimiterState@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetFrameLimiterState@CGame@@QAEHXZ PROC		; CGame::GetFrameLimiterState, COMDAT
; _this$ = ecx

; 367  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 368  : 	return *(BYTE *)VAR_Menu__FrameLimiter;

	movzx	eax, BYTE PTR ds:8820309

; 369  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFrameLimiterState@CGame@@QAEHXZ ENDP		; CGame::GetFrameLimiterState
_TEXT	ENDS
PUBLIC	?SetDrawDistance@CGame@@QAEXK@Z			; CGame::SetDrawDistance
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetDrawDistance@CGame@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwDrawDistance$ = 8					; size = 4
?SetDrawDistance@CGame@@QAEXK@Z PROC			; CGame::SetDrawDistance, COMDAT
; _this$ = ecx

; 374  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 375  : 	*(DWORD *)VAR_Menu__DrawDistance = dwDrawDistance;

	mov	eax, DWORD PTR _dwDrawDistance$[ebp]
	mov	DWORD PTR ds:8820300, eax

; 376  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetDrawDistance@CGame@@QAEXK@Z ENDP			; CGame::SetDrawDistance
_TEXT	ENDS
PUBLIC	?GetDrawDistance@CGame@@QAEKXZ			; CGame::GetDrawDistance
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetDrawDistance@CGame@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetDrawDistance@CGame@@QAEKXZ PROC			; CGame::GetDrawDistance, COMDAT
; _this$ = ecx

; 381  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 382  : 	return *(DWORD *)VAR_Menu__DrawDistance;

	mov	eax, DWORD PTR ds:8820300

; 383  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDrawDistance@CGame@@QAEKXZ ENDP			; CGame::GetDrawDistance
_TEXT	ENDS
PUBLIC	?SetBrightness@CGame@@QAEXK@Z			; CGame::SetBrightness
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetBrightness@CGame@@QAEXK@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_dwBrightness$ = 8					; size = 4
?SetBrightness@CGame@@QAEXK@Z PROC			; CGame::SetBrightness, COMDAT
; _this$ = ecx

; 388  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 389  : 	*(DWORD *)VAR_Menu__Brightness = dwBrightness;

	mov	eax, DWORD PTR _dwBrightness$[ebp]
	mov	DWORD PTR ds:8820296, eax

; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetBrightness@CGame@@QAEXK@Z ENDP			; CGame::SetBrightness
_TEXT	ENDS
PUBLIC	?GetBrightness@CGame@@QAEKXZ			; CGame::GetBrightness
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetBrightness@CGame@@QAEKXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetBrightness@CGame@@QAEKXZ PROC			; CGame::GetBrightness, COMDAT
; _this$ = ecx

; 395  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 396  : 	return *(DWORD *)VAR_Menu__Brightness;

	mov	eax, DWORD PTR ds:8820296

; 397  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBrightness@CGame@@QAEKXZ ENDP			; CGame::GetBrightness
_TEXT	ENDS
PUBLIC	?SetWidescreen@CGame@@QAEXH@Z			; CGame::SetWidescreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetWidescreen@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_bWidescreen$ = 8					; size = 4
?SetWidescreen@CGame@@QAEXH@Z PROC			; CGame::SetWidescreen, COMDAT
; _this$ = ecx

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 403  : 	if(bWidescreen) {

	cmp	DWORD PTR _bWidescreen$[ebp], 0
	je	SHORT $LN2@SetWidescr

; 404  : 		*(BYTE *)VAR_Menu__Widescreen = 1;

	mov	BYTE PTR ds:8820306, 1

; 405  : 	} else {

	jmp	SHORT $LN3@SetWidescr
$LN2@SetWidescr:

; 406  : 		*(BYTE *)VAR_Menu__Widescreen = 0;

	mov	BYTE PTR ds:8820306, 0
$LN3@SetWidescr:

; 407  : 	}
; 408  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetWidescreen@CGame@@QAEXH@Z ENDP			; CGame::SetWidescreen
_TEXT	ENDS
PUBLIC	?GetWidescreen@CGame@@QAEHXZ			; CGame::GetWidescreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetWidescreen@CGame@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetWidescreen@CGame@@QAEHXZ PROC			; CGame::GetWidescreen, COMDAT
; _this$ = ecx

; 413  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 414  : 	return *(BYTE *)VAR_Menu__Widescreen;

	movzx	eax, BYTE PTR ds:8820306

; 415  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetWidescreen@CGame@@QAEHXZ ENDP			; CGame::GetWidescreen
_TEXT	ENDS
PUBLIC	?DisplayTextMessage@CGame@@QAEXPAD@Z		; CGame::DisplayTextMessage
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DisplayTextMessage@CGame@@QAEXPAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_szText$ = 8						; size = 4
?DisplayTextMessage@CGame@@QAEXPAD@Z PROC		; CGame::DisplayTextMessage, COMDAT
; _this$ = ecx

; 420  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 421  : 
; 422  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?DisplayTextMessage@CGame@@QAEXPAD@Z ENDP		; CGame::DisplayTextMessage
_TEXT	ENDS
PUBLIC	?PlaySoundA@CGame@@QAEXHUVector3@@@Z		; CGame::PlaySoundA
EXTRN	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ:PROC	; ScriptCommand
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PlaySoundA@CGame@@QAEXHUVector3@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iSoundId$ = 8						; size = 4
_vPosition$ = 12					; size = 12
?PlaySoundA@CGame@@QAEXHUVector3@@@Z PROC		; CGame::PlaySoundA, COMDAT
; _this$ = ecx

; 427  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 428  : 	ScriptCommand(&play_sound, vPosition.X, vPosition.Y, vPosition.Z, iSoundId);

	mov	eax, DWORD PTR _iSoundId$[ebp]
	push	eax
	fld	DWORD PTR _vPosition$[ebp+8]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _vPosition$[ebp+4]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	fld	DWORD PTR _vPosition$[ebp]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET _play_sound
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 32					; 00000020H

; 429  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?PlaySoundA@CGame@@QAEXHUVector3@@@Z ENDP		; CGame::PlaySoundA
_TEXT	ENDS
PUBLIC	?FadeScreen@CGame@@QAEXHH@Z			; CGame::FadeScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FadeScreen@CGame@@QAEXHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_iType$ = 8						; size = 4
_iTime$ = 12						; size = 4
?FadeScreen@CGame@@QAEXHH@Z PROC			; CGame::FadeScreen, COMDAT
; _this$ = ecx

; 434  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 435  : 	ScriptCommand(&fade, iTime, iType);

	mov	eax, DWORD PTR _iType$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iTime$[ebp]
	push	ecx
	push	OFFSET _fade
	call	?ScriptCommand@@YAHPBUSCRIPT_COMMAND@@ZZ ; ScriptCommand
	add	esp, 12					; 0000000cH

; 436  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?FadeScreen@CGame@@QAEXHH@Z ENDP			; CGame::FadeScreen
_TEXT	ENDS
PUBLIC	?SetGameTime@CGame@@QAEXHH@Z			; CGame::SetGameTime
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetGameTime@CGame@@QAEXHH@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_this$ = -8						; size = 4
_iHour$ = 8						; size = 4
_iMinute$ = 12						; size = 4
?SetGameTime@CGame@@QAEXHH@Z PROC			; CGame::SetGameTime, COMDAT
; _this$ = ecx

; 442  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 443  : 	DWORD dwFunc = CClock__SetTime;

	mov	DWORD PTR _dwFunc$[ebp], 4747616	; 00487160H

; 444  : 	_asm
; 445  : 	{
; 446  : 		push iMinute

	push	DWORD PTR _iMinute$[ebp]

; 447  : 		push iHour

	push	DWORD PTR _iHour$[ebp]

; 448  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 449  : 		add esp, 8

	add	esp, 8

; 450  : 	}
; 451  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetGameTime@CGame@@QAEXHH@Z ENDP			; CGame::SetGameTime
_TEXT	ENDS
PUBLIC	?SetCash@CGame@@QAEXH@Z				; CGame::SetCash
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCash@CGame@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_Cash$ = 8						; size = 4
?SetCash@CGame@@QAEXH@Z PROC				; CGame::SetCash, COMDAT
; _this$ = ecx

; 456  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 457  : 	*(int *)VAR_PlayerCash = Cash;

	mov	eax, DWORD PTR _Cash$[ebp]
	mov	DWORD PTR ds:9743816, eax

; 458  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetCash@CGame@@QAEXH@Z ENDP				; CGame::SetCash
_TEXT	ENDS
PUBLIC	?SetGravity@CGame@@QAEXM@Z			; CGame::SetGravity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetGravity@CGame@@QAEXM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fGravity$ = 8						; size = 4
?SetGravity@CGame@@QAEXM@Z PROC				; CGame::SetGravity, COMDAT
; _this$ = ecx

; 463  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 464  : 	*(float *)VAR_GlobalGravity = fGravity;

	fld	DWORD PTR _fGravity$[ebp]
	fstp	DWORD PTR ds:6878704

; 465  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetGravity@CGame@@QAEXM@Z ENDP				; CGame::SetGravity
_TEXT	ENDS
PUBLIC	?GetGravity@CGame@@QAEMXZ			; CGame::GetGravity
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGravity@CGame@@QAEMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetGravity@CGame@@QAEMXZ PROC				; CGame::GetGravity, COMDAT
; _this$ = ecx

; 470  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 471  : 	return *(float *)VAR_GlobalGravity;

	fld	DWORD PTR ds:6878704

; 472  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetGravity@CGame@@QAEMXZ ENDP				; CGame::GetGravity
_TEXT	ENDS
PUBLIC	?CreateMarker@CGame@@QAEHHMMMHH@Z		; CGame::CreateMarker
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CreateMarker@CGame@@QAEHHMMMHH@Z
_TEXT	SEGMENT
_iMarkerId$ = -32					; size = 4
_dwFunc$ = -20						; size = 4
_this$ = -8						; size = 4
_iType$ = 8						; size = 4
_fX$ = 12						; size = 4
_fY$ = 16						; size = 4
_fZ$ = 20						; size = 4
_iFlag1$ = 24						; size = 4
_iFlag2$ = 28						; size = 4
?CreateMarker@CGame@@QAEHHMMMHH@Z PROC			; CGame::CreateMarker, COMDAT
; _this$ = ecx

; 477  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 478  : 	DWORD dwFunc = FUNC_CreateMarker;

	mov	DWORD PTR _dwFunc$[ebp], 4996224	; 004c3c80H

; 479  : 	int iMarkerId;
; 480  : 	_asm
; 481  : 	{
; 482  : 		push iFlag2

	push	DWORD PTR _iFlag2$[ebp]

; 483  : 		push iFlag1

	push	DWORD PTR _iFlag1$[ebp]

; 484  : 		push fZ

	push	DWORD PTR _fZ$[ebp]

; 485  : 		push fY

	push	DWORD PTR _fY$[ebp]

; 486  : 		push fX

	push	DWORD PTR _fX$[ebp]

; 487  : 		push iType

	push	DWORD PTR _iType$[ebp]

; 488  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 489  : 		add esp, 18h

	add	esp, 24					; 00000018H

; 490  : 		mov iMarkerId, eax

	mov	DWORD PTR _iMarkerId$[ebp], eax

; 491  : 	}
; 492  : 	return iMarkerId;

	mov	eax, DWORD PTR _iMarkerId$[ebp]

; 493  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?CreateMarker@CGame@@QAEHHMMMHH@Z ENDP			; CGame::CreateMarker
_TEXT	ENDS
PUBLIC	?ShowMarker@CGame@@QAEXHH@Z			; CGame::ShowMarker
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ShowMarker@CGame@@QAEXHH@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_this$ = -8						; size = 4
_iMarkerId$ = 8						; size = 4
_iType$ = 12						; size = 4
?ShowMarker@CGame@@QAEXHH@Z PROC			; CGame::ShowMarker, COMDAT
; _this$ = ecx

; 498  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 499  : 	DWORD dwFunc = FUNC_ShowMarker;

	mov	DWORD PTR _dwFunc$[ebp], 4995136	; 004c3840H

; 500  : 	_asm
; 501  : 	{
; 502  : 		push iType

	push	DWORD PTR _iType$[ebp]

; 503  : 		push iMarkerId

	push	DWORD PTR _iMarkerId$[ebp]

; 504  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 505  : 		add esp, 8

	add	esp, 8

; 506  : 	}
; 507  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ShowMarker@CGame@@QAEXHH@Z ENDP			; CGame::ShowMarker
_TEXT	ENDS
PUBLIC	?SetMarkerIcon@CGame@@QAEXHH@Z			; CGame::SetMarkerIcon
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetMarkerIcon@CGame@@QAEXHH@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_this$ = -8						; size = 4
_iMarkerId$ = 8						; size = 4
_iIconId$ = 12						; size = 4
?SetMarkerIcon@CGame@@QAEXHH@Z PROC			; CGame::SetMarkerIcon, COMDAT
; _this$ = ecx

; 512  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 513  : 	DWORD dwFunc = FUNC_SetMarkerIcon;

	mov	DWORD PTR _dwFunc$[ebp], 4994944	; 004c3780H

; 514  : 	_asm
; 515  : 	{
; 516  : 		push iIconId

	push	DWORD PTR _iIconId$[ebp]

; 517  : 		push iMarkerId

	push	DWORD PTR _iMarkerId$[ebp]

; 518  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 519  : 		add esp, 8

	add	esp, 8

; 520  : 	}
; 521  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetMarkerIcon@CGame@@QAEXHH@Z ENDP			; CGame::SetMarkerIcon
_TEXT	ENDS
PUBLIC	?SetMarkerColor@CGame@@QAEXHH@Z			; CGame::SetMarkerColor
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetMarkerColor@CGame@@QAEXHH@Z
_TEXT	SEGMENT
_dwFunc$ = -20						; size = 4
_this$ = -8						; size = 4
_iMarkerId$ = 8						; size = 4
_iColorId$ = 12						; size = 4
?SetMarkerColor@CGame@@QAEXHH@Z PROC			; CGame::SetMarkerColor, COMDAT
; _this$ = ecx

; 526  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 527  : 	DWORD dwFunc = FUNC_SetMarkerColor;

	mov	DWORD PTR _dwFunc$[ebp], 4995376	; 004c3930H

; 528  : 	_asm
; 529  : 	{
; 530  : 		push iColorId

	push	DWORD PTR _iColorId$[ebp]

; 531  : 		push iMarkerId

	push	DWORD PTR _iMarkerId$[ebp]

; 532  : 		call dwFunc

	call	DWORD PTR _dwFunc$[ebp]

; 533  : 		add esp, 8

	add	esp, 8

; 534  : 	}
; 535  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetMarkerColor@CGame@@QAEXHH@Z ENDP			; CGame::SetMarkerColor
_TEXT	ENDS
END
